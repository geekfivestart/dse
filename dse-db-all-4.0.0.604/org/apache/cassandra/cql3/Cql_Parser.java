package org.apache.cassandra.cql3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.DFA;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.MismatchedSetException;
import org.antlr.runtime.MismatchedTokenException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.Parser;
import org.antlr.runtime.ParserRuleReturnScope;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.apache.cassandra.auth.DataResource;
import org.apache.cassandra.auth.FunctionResource;
import org.apache.cassandra.auth.GrantMode;
import org.apache.cassandra.auth.IResource;
import org.apache.cassandra.auth.IRoleManager;
import org.apache.cassandra.auth.JMXResource;
import org.apache.cassandra.auth.Permission;
import org.apache.cassandra.auth.Resources;
import org.apache.cassandra.auth.RoleOptions;
import org.apache.cassandra.auth.RoleResource;
import org.apache.cassandra.auth.permission.CorePermission;
import org.apache.cassandra.auth.permission.Permissions;
import org.apache.cassandra.config.DatabaseDescriptor;
import org.apache.cassandra.cql3.conditions.ColumnCondition;
import org.apache.cassandra.cql3.functions.FunctionCall;
import org.apache.cassandra.cql3.functions.FunctionName;
import org.apache.cassandra.cql3.restrictions.CustomIndexExpression;
import org.apache.cassandra.cql3.selection.RawSelector;
import org.apache.cassandra.cql3.selection.Selectable;
import org.apache.cassandra.cql3.statements.AlterKeyspaceStatement;
import org.apache.cassandra.cql3.statements.AlterRoleStatement;
import org.apache.cassandra.cql3.statements.AlterTableStatement;
import org.apache.cassandra.cql3.statements.AlterTableStatementColumn;
import org.apache.cassandra.cql3.statements.AlterTypeStatement;
import org.apache.cassandra.cql3.statements.AlterViewStatement;
import org.apache.cassandra.cql3.statements.BatchStatement;
import org.apache.cassandra.cql3.statements.CFProperties;
import org.apache.cassandra.cql3.statements.CreateAggregateStatement;
import org.apache.cassandra.cql3.statements.CreateFunctionStatement;
import org.apache.cassandra.cql3.statements.CreateIndexStatement;
import org.apache.cassandra.cql3.statements.CreateKeyspaceStatement;
import org.apache.cassandra.cql3.statements.CreateRoleStatement;
import org.apache.cassandra.cql3.statements.CreateTableStatement;
import org.apache.cassandra.cql3.statements.CreateTriggerStatement;
import org.apache.cassandra.cql3.statements.CreateTypeStatement;
import org.apache.cassandra.cql3.statements.CreateViewStatement;
import org.apache.cassandra.cql3.statements.DeleteStatement;
import org.apache.cassandra.cql3.statements.DropAggregateStatement;
import org.apache.cassandra.cql3.statements.DropFunctionStatement;
import org.apache.cassandra.cql3.statements.DropIndexStatement;
import org.apache.cassandra.cql3.statements.DropKeyspaceStatement;
import org.apache.cassandra.cql3.statements.DropRoleStatement;
import org.apache.cassandra.cql3.statements.DropTableStatement;
import org.apache.cassandra.cql3.statements.DropTriggerStatement;
import org.apache.cassandra.cql3.statements.DropTypeStatement;
import org.apache.cassandra.cql3.statements.DropViewStatement;
import org.apache.cassandra.cql3.statements.GrantPermissionsStatement;
import org.apache.cassandra.cql3.statements.GrantRoleStatement;
import org.apache.cassandra.cql3.statements.IndexPropDefs;
import org.apache.cassandra.cql3.statements.IndexTarget;
import org.apache.cassandra.cql3.statements.KeyspaceAttributes;
import org.apache.cassandra.cql3.statements.ListPermissionsStatement;
import org.apache.cassandra.cql3.statements.ListRolesStatement;
import org.apache.cassandra.cql3.statements.ListUsersStatement;
import org.apache.cassandra.cql3.statements.ModificationStatement;
import org.apache.cassandra.cql3.statements.ParsedStatement;
import org.apache.cassandra.cql3.statements.PropertyDefinitions;
import org.apache.cassandra.cql3.statements.RevokePermissionsStatement;
import org.apache.cassandra.cql3.statements.RevokeRoleStatement;
import org.apache.cassandra.cql3.statements.SelectStatement;
import org.apache.cassandra.cql3.statements.TableAttributes;
import org.apache.cassandra.cql3.statements.TruncateStatement;
import org.apache.cassandra.cql3.statements.UpdateStatement;
import org.apache.cassandra.cql3.statements.UseStatement;
import org.apache.cassandra.exceptions.ConfigurationException;
import org.apache.cassandra.exceptions.InvalidRequestException;
import org.apache.cassandra.exceptions.SyntaxException;
import org.apache.cassandra.schema.ColumnMetadata;
import org.apache.cassandra.utils.Pair;

public class Cql_Parser extends Parser {
   public static final int EOF = -1;
   public static final int T__192 = 192;
   public static final int T__193 = 193;
   public static final int T__194 = 194;
   public static final int T__195 = 195;
   public static final int T__196 = 196;
   public static final int T__197 = 197;
   public static final int T__198 = 198;
   public static final int T__199 = 199;
   public static final int T__200 = 200;
   public static final int T__201 = 201;
   public static final int T__202 = 202;
   public static final int T__203 = 203;
   public static final int T__204 = 204;
   public static final int T__205 = 205;
   public static final int T__206 = 206;
   public static final int T__207 = 207;
   public static final int T__208 = 208;
   public static final int T__209 = 209;
   public static final int T__210 = 210;
   public static final int T__211 = 211;
   public static final int T__212 = 212;
   public static final int T__213 = 213;
   public static final int T__214 = 214;
   public static final int T__215 = 215;
   public static final int A = 4;
   public static final int B = 5;
   public static final int BOOLEAN = 6;
   public static final int C = 7;
   public static final int COMMENT = 8;
   public static final int D = 9;
   public static final int DIGIT = 10;
   public static final int DURATION = 11;
   public static final int DURATION_UNIT = 12;
   public static final int E = 13;
   public static final int EMPTY_QUOTED_NAME = 14;
   public static final int EXPONENT = 15;
   public static final int F = 16;
   public static final int FLOAT = 17;
   public static final int G = 18;
   public static final int H = 19;
   public static final int HEX = 20;
   public static final int HEXNUMBER = 21;
   public static final int I = 22;
   public static final int IDENT = 23;
   public static final int INTEGER = 24;
   public static final int J = 25;
   public static final int K = 26;
   public static final int K_ADD = 27;
   public static final int K_AGGREGATE = 28;
   public static final int K_ALL = 29;
   public static final int K_ALLOW = 30;
   public static final int K_ALTER = 31;
   public static final int K_AND = 32;
   public static final int K_APPLY = 33;
   public static final int K_AS = 34;
   public static final int K_ASC = 35;
   public static final int K_ASCII = 36;
   public static final int K_AUTHORIZE = 37;
   public static final int K_BATCH = 38;
   public static final int K_BEGIN = 39;
   public static final int K_BIGINT = 40;
   public static final int K_BLOB = 41;
   public static final int K_BOOLEAN = 42;
   public static final int K_BY = 43;
   public static final int K_CALLED = 44;
   public static final int K_CAST = 45;
   public static final int K_CLUSTERING = 46;
   public static final int K_COLUMNFAMILY = 47;
   public static final int K_COMPACT = 48;
   public static final int K_CONTAINS = 49;
   public static final int K_COUNT = 50;
   public static final int K_COUNTER = 51;
   public static final int K_CREATE = 52;
   public static final int K_CUSTOM = 53;
   public static final int K_DATE = 54;
   public static final int K_DECIMAL = 55;
   public static final int K_DEFAULT = 56;
   public static final int K_DELETE = 57;
   public static final int K_DESC = 58;
   public static final int K_DESCRIBE = 59;
   public static final int K_DETERMINISTIC = 60;
   public static final int K_DISTINCT = 61;
   public static final int K_DOUBLE = 62;
   public static final int K_DROP = 63;
   public static final int K_DURATION = 64;
   public static final int K_ENTRIES = 65;
   public static final int K_EXECUTE = 66;
   public static final int K_EXISTS = 67;
   public static final int K_FILTERING = 68;
   public static final int K_FINALFUNC = 69;
   public static final int K_FLOAT = 70;
   public static final int K_FOR = 71;
   public static final int K_FROM = 72;
   public static final int K_FROZEN = 73;
   public static final int K_FULL = 74;
   public static final int K_FUNCTION = 75;
   public static final int K_FUNCTIONS = 76;
   public static final int K_GRANT = 77;
   public static final int K_GROUP = 78;
   public static final int K_IF = 79;
   public static final int K_IN = 80;
   public static final int K_INDEX = 81;
   public static final int K_INET = 82;
   public static final int K_INITCOND = 83;
   public static final int K_INPUT = 84;
   public static final int K_INSERT = 85;
   public static final int K_INT = 86;
   public static final int K_INTO = 87;
   public static final int K_IS = 88;
   public static final int K_JSON = 89;
   public static final int K_KEY = 90;
   public static final int K_KEYS = 91;
   public static final int K_KEYSPACE = 92;
   public static final int K_KEYSPACES = 93;
   public static final int K_LANGUAGE = 94;
   public static final int K_LIKE = 95;
   public static final int K_LIMIT = 96;
   public static final int K_LIST = 97;
   public static final int K_LOGIN = 98;
   public static final int K_MAP = 99;
   public static final int K_MATERIALIZED = 100;
   public static final int K_MBEAN = 101;
   public static final int K_MBEANS = 102;
   public static final int K_MODIFY = 103;
   public static final int K_MONOTONIC = 104;
   public static final int K_NEGATIVE_INFINITY = 105;
   public static final int K_NEGATIVE_NAN = 106;
   public static final int K_NOLOGIN = 107;
   public static final int K_NORECURSIVE = 108;
   public static final int K_NOSUPERUSER = 109;
   public static final int K_NOT = 110;
   public static final int K_NULL = 111;
   public static final int K_OF = 112;
   public static final int K_ON = 113;
   public static final int K_OPTIONS = 114;
   public static final int K_OR = 115;
   public static final int K_ORDER = 116;
   public static final int K_PARTITION = 117;
   public static final int K_PASSWORD = 118;
   public static final int K_PER = 119;
   public static final int K_PERMISSION = 120;
   public static final int K_PERMISSIONS = 121;
   public static final int K_POSITIVE_INFINITY = 122;
   public static final int K_POSITIVE_NAN = 123;
   public static final int K_PRIMARY = 124;
   public static final int K_RENAME = 125;
   public static final int K_REPLACE = 126;
   public static final int K_RESOURCE = 127;
   public static final int K_RESTRICT = 128;
   public static final int K_RETURNS = 129;
   public static final int K_REVOKE = 130;
   public static final int K_ROLE = 131;
   public static final int K_ROLES = 132;
   public static final int K_SELECT = 133;
   public static final int K_SET = 134;
   public static final int K_SFUNC = 135;
   public static final int K_SMALLINT = 136;
   public static final int K_STATIC = 137;
   public static final int K_STORAGE = 138;
   public static final int K_STYPE = 139;
   public static final int K_SUPERUSER = 140;
   public static final int K_TEXT = 141;
   public static final int K_TIME = 142;
   public static final int K_TIMESTAMP = 143;
   public static final int K_TIMEUUID = 144;
   public static final int K_TINYINT = 145;
   public static final int K_TO = 146;
   public static final int K_TOKEN = 147;
   public static final int K_TRIGGER = 148;
   public static final int K_TRUNCATE = 149;
   public static final int K_TTL = 150;
   public static final int K_TUPLE = 151;
   public static final int K_TYPE = 152;
   public static final int K_UNLOGGED = 153;
   public static final int K_UNRESTRICT = 154;
   public static final int K_UNSET = 155;
   public static final int K_UPDATE = 156;
   public static final int K_USE = 157;
   public static final int K_USER = 158;
   public static final int K_USERS = 159;
   public static final int K_USING = 160;
   public static final int K_UUID = 161;
   public static final int K_VALUES = 162;
   public static final int K_VARCHAR = 163;
   public static final int K_VARINT = 164;
   public static final int K_VIEW = 165;
   public static final int K_WHERE = 166;
   public static final int K_WITH = 167;
   public static final int K_WRITETIME = 168;
   public static final int L = 169;
   public static final int LETTER = 170;
   public static final int M = 171;
   public static final int MULTILINE_COMMENT = 172;
   public static final int N = 173;
   public static final int O = 174;
   public static final int P = 175;
   public static final int Q = 176;
   public static final int QMARK = 177;
   public static final int QUOTED_NAME = 178;
   public static final int R = 179;
   public static final int RANGE = 180;
   public static final int S = 181;
   public static final int STRING_LITERAL = 182;
   public static final int T = 183;
   public static final int U = 184;
   public static final int UUID = 185;
   public static final int V = 186;
   public static final int W = 187;
   public static final int WS = 188;
   public static final int X = 189;
   public static final int Y = 190;
   public static final int Z = 191;
   public CqlParser gCql;
   public CqlParser gParent;
   private final List<ErrorListener> listeners;
   protected final List<ColumnIdentifier> bindVariables;
   public static final Set<String> reservedTypeNames = new HashSet<String>() {
      {
         this.add("byte");
         this.add("complex");
         this.add("enum");
         this.add("date");
         this.add("interval");
         this.add("macaddr");
         this.add("bitstring");
      }
   };
   protected Cql_Parser.DFA1 dfa1;
   protected Cql_Parser.DFA2 dfa2;
   protected Cql_Parser.DFA11 dfa11;
   protected Cql_Parser.DFA17 dfa17;
   protected Cql_Parser.DFA22 dfa22;
   protected Cql_Parser.DFA30 dfa30;
   protected Cql_Parser.DFA31 dfa31;
   protected Cql_Parser.DFA61 dfa61;
   protected Cql_Parser.DFA185 dfa185;
   protected Cql_Parser.DFA186 dfa186;
   protected Cql_Parser.DFA204 dfa204;
   protected Cql_Parser.DFA206 dfa206;
   protected Cql_Parser.DFA208 dfa208;
   protected Cql_Parser.DFA210 dfa210;
   protected Cql_Parser.DFA213 dfa213;
   protected Cql_Parser.DFA216 dfa216;
   protected Cql_Parser.DFA224 dfa224;
   protected Cql_Parser.DFA229 dfa229;
   protected Cql_Parser.DFA228 dfa228;
   protected Cql_Parser.DFA239 dfa239;
   static final String DFA1_eotS = "m\uffff";
   static final String DFA1_eofS = "g\uffff\u0001k\u0001l\u0004\uffff";
   static final String DFA1_minS = "\u0001\u001f\u0007\uffff\u0002\u001c\u0001/\u0003\u0017\n\uffff\u0001~\u0013\uffff\u0002q\u001a\u0092\u0002\uffff\u001cH\u0001\uffff\u0001É\u0001l\u0001\uffff\u0001\u001c\u0002\uffff";
   static final String DFA1_maxS = "\u0001\u009d\u0007\uffff\u0003\u009e\u0003¶\n\uffff\u0001~\u0013\uffff\u001cÉ\u0002\uffff\u001cÉ\u0001\uffff\u0002Ì\u0001\uffff\u0001K\u0002\uffff";
   static final String DFA1_acceptS = "\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0006\uffff\u0001)\u0001*\u0001\b\u0001\t\u0001\u0013\u0001\u0017\u0001\u0019\u0001 \u0001&\u0001\n\u0001\uffff\u0001\u001c\u0001\u001e\u0001\u000b\u0001\f\u0001\r\u0001\u0015\u0001\u0018\u0001\u001b\u0001\u001d\u0001\u001f\u0001\"\u0001'\u0001\u000e\u0001\u000f\u0001\u0014\u0001\u001a\u0001!\u0001(\u0001\u0010\u001c\uffff\u0001$\u0001\u0011\u001c\uffff\u0001%\u0002\uffff\u0001\u0012\u0001\uffff\u0001\u0016\u0001#";
   static final String DFA1_specialS = "m\uffff}>";
   static final String[] DFA1_transitionS = new String[]{"\u0001\n\u0007\uffff\u0001\u0004\f\uffff\u0001\b\u0004\uffff\u0001\u0005\u0005\uffff\u0001\t\r\uffff\u0001\u000b\u0007\uffff\u0001\u0002\u000b\uffff\u0001\r\u001e\uffff\u0001\u000e\u0001\uffff\u0001\f\u0002\uffff\u0001\u0001\u000f\uffff\u0001\u0007\u0004\uffff\u0001\u000f\u0001\uffff\u0001\u0003\u0001\u0006", "", "", "", "", "", "", "", "\u0001\u001a\u0012\uffff\u0001\u0011\u0005\uffff\u0001\u0017\u0015\uffff\u0001\u0019\u0005\uffff\u0001\u0017\n\uffff\u0001\u0010\u0007\uffff\u0001\u0016\u000e\uffff\u0001\u0018\u000f\uffff\u0001\u0015\u0010\uffff\u0001\u0013\u0003\uffff\u0001\u0014\u0005\uffff\u0001\u0012", "\u0001\"\u0012\uffff\u0001\u001c\u001b\uffff\u0001!\u0005\uffff\u0001\u001d\n\uffff\u0001\u001b\u0007\uffff\u0001$\u001e\uffff\u0001#\u0010\uffff\u0001\u001f\u0003\uffff\u0001 \u0005\uffff\u0001\u001e", "\u0001%,\uffff\u0001&\u0007\uffff\u0001*\u001e\uffff\u0001)\u0014\uffff\u0001(\u0005\uffff\u0001'", "\u0001.\u0004\uffff\u00011\u0001,\u0001\uffff\u0001+\u0002\uffff\u00011\u0001\uffff\u00012\u0001+\u0002\uffff\u00013\u00014\u00015\u0001\uffff\u00011\u0001G\u00011\u0001\uffff\u00021\u0001G\u00016\u0001+\u00011\u0001E\u00017\u0003\uffff\u0001+\u00011\u0001G\u00018\u0001+\u00019\u0001\uffff\u0001+\u00031\u0001:\u0002\uffff\u00011\u0001\uffff\u00021\u0001\uffff\u00011\u0003\uffff\u0001;\u00021\u0001\uffff\u0001<\u0002\uffff\u0002G\u00011\u0001\uffff\u00031\u0001\uffff\u00031\u0003\uffff\u0001+\u00011\u0002\uffff\u00011\u0001\uffff\u00011\u0004\uffff\u00011\u0002\uffff\u00041\u0001-\u0005\uffff\u00011\u0001\uffff\u00011\u0001\uffff\u00021\u0001+\u0001\uffff\u00011\u0001=\u00041\u0001>\u0001F\u0001?\u0001D\u0001@\u0002\uffff\u00011\u0001\uffff\u0001G\u00021\u0005\uffff\u00021\u0001\uffff\u0001A\u00011\u0001B\u0001C\u0003\uffff\u0001G\b\uffff\u0001H\u00010\u0003\uffff\u0001/", "\u0001L\u0004\uffff\u0001O\u0001J\u0001\uffff\u0001I\u0002\uffff\u0001O\u0001\uffff\u0001P\u0001I\u0002\uffff\u0001Q\u0001R\u0001S\u0001\uffff\u0001O\u0001e\u0001O\u0001\uffff\u0002O\u0001e\u0001T\u0001I\u0001O\u0001c\u0001U\u0003\uffff\u0001I\u0001O\u0001e\u0001V\u0001I\u0001W\u0001\uffff\u0001I\u0003O\u0001X\u0002\uffff\u0001O\u0001\uffff\u0002O\u0001\uffff\u0001O\u0003\uffff\u0001Y\u0002O\u0001\uffff\u0001Z\u0002\uffff\u0002e\u0001O\u0001\uffff\u0003O\u0001\uffff\u0003O\u0003\uffff\u0001I\u0001O\u0002\uffff\u0001O\u0001\uffff\u0001O\u0004\uffff\u0001O\u0002\uffff\u0004O\u0001K\u0005\uffff\u0001O\u0001\uffff\u0001O\u0001\uffff\u0002O\u0001I\u0001\uffff\u0001O\u0001[\u0004O\u0001\\\u0001d\u0001]\u0001b\u0001^\u0002\uffff\u0001O\u0001\uffff\u0001e\u0002O\u0005\uffff\u0002O\u0001\uffff\u0001_\u0001O\u0001`\u0001a\u0003\uffff\u0001e\b\uffff\u0001f\u0001N\u0003\uffff\u0001M", "\u0001i\u0004\uffff\u0002i\u0001\uffff\u0001i\u0002\uffff\u0001i\u0001\uffff\u0002i\u0002\uffff\u0003i\u0001\uffff\u0003i\u0001\uffff\bi\u0003\uffff\u0006i\u0001\uffff\u0005i\u0002\uffff\u0001i\u0001\uffff\u0002i\u0001\uffff\u0001i\u0003\uffff\u0003i\u0001\uffff\u0001i\u0002\uffff\u0003i\u0001\uffff\u0003i\u0001\uffff\u0003i\u0003\uffff\u0002i\u0002\uffff\u0001i\u0001\uffff\u0001i\u0004\uffff\u0001i\u0002\uffff\u0005i\u0005\uffff\u0001i\u0001\uffff\u0001i\u0001\uffff\u0001i\u0001h\u0001i\u0001\uffff\u000bi\u0002\uffff\u0001i\u0001\uffff\u0003i\u0005\uffff\u0001i\u0001g\u0001\uffff\u0004i\u0003\uffff\u0001i\t\uffff\u0001i\u0003\uffff\u0001i", "", "", "", "", "", "", "", "", "", "", "\u0001j", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\u0001+\u0007\uffff\u0001+\u0018\uffff\u0001H6\uffff\u0001+", "\u0001+ \uffff\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "\u0001H6\uffff\u0001+", "", "", "\u0001f(\uffff\u0001I\u0007\uffff\u0001IO\uffff\u0001I", "\u0001f(\uffff\u0001IW\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "\u0001f\u0080\uffff\u0001I", "", "\u0001i\u0002\uffff\u0001k", "\u0001l\u0003\uffff\u0001lX\uffff\u0001i\u0002\uffff\u0001l", "", "\u0001\u001a.\uffff\u0001\u0019", "", ""};
   static final short[] DFA1_eot = DFA.unpackEncodedString("m\uffff");
   static final short[] DFA1_eof = DFA.unpackEncodedString("g\uffff\u0001k\u0001l\u0004\uffff");
   static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u001f\u0007\uffff\u0002\u001c\u0001/\u0003\u0017\n\uffff\u0001~\u0013\uffff\u0002q\u001a\u0092\u0002\uffff\u001cH\u0001\uffff\u0001É\u0001l\u0001\uffff\u0001\u001c\u0002\uffff");
   static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars("\u0001\u009d\u0007\uffff\u0003\u009e\u0003¶\n\uffff\u0001~\u0013\uffff\u001cÉ\u0002\uffff\u001cÉ\u0001\uffff\u0002Ì\u0001\uffff\u0001K\u0002\uffff");
   static final short[] DFA1_accept = DFA.unpackEncodedString("\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0006\uffff\u0001)\u0001*\u0001\b\u0001\t\u0001\u0013\u0001\u0017\u0001\u0019\u0001 \u0001&\u0001\n\u0001\uffff\u0001\u001c\u0001\u001e\u0001\u000b\u0001\f\u0001\r\u0001\u0015\u0001\u0018\u0001\u001b\u0001\u001d\u0001\u001f\u0001\"\u0001'\u0001\u000e\u0001\u000f\u0001\u0014\u0001\u001a\u0001!\u0001(\u0001\u0010\u001c\uffff\u0001$\u0001\u0011\u001c\uffff\u0001%\u0002\uffff\u0001\u0012\u0001\uffff\u0001\u0016\u0001#");
   static final short[] DFA1_special = DFA.unpackEncodedString("m\uffff}>");
   static final short[][] DFA1_transition;
   static final String DFA2_eotS = "5\uffff";
   static final String DFA2_eofS = "5\uffff";
   static final String DFA2_minS = "\u0001\u0006\u0001\u00003\uffff";
   static final String DFA2_maxS = "\u0001Ö\u0001\u00003\uffff";
   static final String DFA2_acceptS = "\u0002\uffff\u0001\u00021\uffff\u0001\u0001";
   static final String DFA2_specialS = "\u0001\uffff\u0001\u00003\uffff}>";
   static final String[] DFA2_transitionS;
   static final short[] DFA2_eot;
   static final short[] DFA2_eof;
   static final char[] DFA2_min;
   static final char[] DFA2_max;
   static final short[] DFA2_accept;
   static final short[] DFA2_special;
   static final short[][] DFA2_transition;
   static final String DFA11_eotS = "4\uffff";
   static final String DFA11_eofS = "4\uffff";
   static final String DFA11_minS = "\u0001\u0006\u0001\u00002\uffff";
   static final String DFA11_maxS = "\u0001Ö\u0001\u00002\uffff";
   static final String DFA11_acceptS = "\u0002\uffff\u0001\u00020\uffff\u0001\u0001";
   static final String DFA11_specialS = "\u0001\uffff\u0001\u00002\uffff}>";
   static final String[] DFA11_transitionS;
   static final short[] DFA11_eot;
   static final short[] DFA11_eof;
   static final char[] DFA11_min;
   static final char[] DFA11_max;
   static final short[] DFA11_accept;
   static final short[] DFA11_special;
   static final short[][] DFA11_transition;
   static final String DFA17_eotS = "3\uffff";
   static final String DFA17_eofS = "3\uffff";
   static final String DFA17_minS = "\u0001\u0006/\u0000\u0003\uffff";
   static final String DFA17_maxS = "\u0001Ö/\u0000\u0003\uffff";
   static final String DFA17_acceptS = "0\uffff\u0001\u0003\u0001\u0001\u0001\u0002";
   static final String DFA17_specialS = "\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\b\u0001\t\u0001\n\u0001\u000b\u0001\f\u0001\r\u0001\u000e\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001 \u0001!\u0001\"\u0001#\u0001$\u0001%\u0001&\u0001'\u0001(\u0001)\u0001*\u0001+\u0001,\u0001-\u0001.\u0003\uffff}>";
   static final String[] DFA17_transitionS;
   static final short[] DFA17_eot;
   static final short[] DFA17_eof;
   static final char[] DFA17_min;
   static final char[] DFA17_max;
   static final short[] DFA17_accept;
   static final short[] DFA17_special;
   static final short[][] DFA17_transition;
   static final String DFA22_eotS = "2\uffff";
   static final String DFA22_eofS = "2\uffff";
   static final String DFA22_minS = "\u0001\u0006,\uffff\u0001\u0000\u0004\uffff";
   static final String DFA22_maxS = "\u0001Ö,\uffff\u0001\u0000\u0004\uffff";
   static final String DFA22_acceptS = "\u0001\uffff\u0001\u0001,\uffff\u0001\u0004\u0001\u0005\u0001\u0002\u0001\u0003";
   static final String DFA22_specialS = "-\uffff\u0001\u0000\u0004\uffff}>";
   static final String[] DFA22_transitionS;
   static final short[] DFA22_eot;
   static final short[] DFA22_eof;
   static final char[] DFA22_min;
   static final char[] DFA22_max;
   static final short[] DFA22_accept;
   static final short[] DFA22_special;
   static final short[][] DFA22_transition;
   static final String DFA30_eotS = "V\uffff";
   static final String DFA30_eofS = "\u0001\uffff\u0019\u001a\u0002\uffff\u0001\u001b\u0004\u001a\u0003\uffff\u0019\u001a\u0019\u001b";
   static final String DFA30_minS = "\u0001\u0006\u0019\u001e\u0002\uffff\u0005\u001e\u0001\uffff\u0002\u00172\u001e";
   static final String DFA30_maxS = "\u0001Ë\u0019×\u0002\uffff\u0005×\u0001\uffff\u0002²2×";
   static final String DFA30_acceptS = "\u001a\uffff\u0001\u0001\u0001\u0002\u0005\uffff\u0001\u00034\uffff";
   static final String DFA30_specialS = "V\uffff}>";
   static final String[] DFA30_transitionS;
   static final short[] DFA30_eot;
   static final short[] DFA30_eof;
   static final char[] DFA30_min;
   static final char[] DFA30_max;
   static final short[] DFA30_accept;
   static final short[] DFA30_special;
   static final short[][] DFA30_transition;
   static final String DFA31_eotS = "\u000b\uffff";
   static final String DFA31_eofS = "\u000b\uffff";
   static final String DFA31_minS = "\u0001\u0017\u0004Â\u0001\uffff\u0001\u0006\u0004\uffff";
   static final String DFA31_maxS = "\u0001²\u0004É\u0001\uffff\u0001Ö\u0004\uffff";
   static final String DFA31_acceptS = "\u0005\uffff\u0001\u0005\u0001\uffff\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0001";
   static final String DFA31_specialS = "\u000b\uffff}>";
   static final String[] DFA31_transitionS;
   static final short[] DFA31_eot;
   static final short[] DFA31_eof;
   static final char[] DFA31_min;
   static final char[] DFA31_max;
   static final short[] DFA31_accept;
   static final short[] DFA31_special;
   static final short[][] DFA31_transition;
   static final String DFA61_eotS = "\u001e\uffff";
   static final String DFA61_eofS = "\u001e\uffff";
   static final String DFA61_minS = "\u0001\u000e\u001aH\u0003\uffff";
   static final String DFA61_maxS = "\u0001²\u001aÒ\u0003\uffff";
   static final String DFA61_acceptS = "\u001b\uffff\u0001\u0001\u0001\u0002\u0001\u0003";
   static final String DFA61_specialS = "\u001e\uffff}>";
   static final String[] DFA61_transitionS;
   static final short[] DFA61_eot;
   static final short[] DFA61_eof;
   static final char[] DFA61_min;
   static final char[] DFA61_max;
   static final short[] DFA61_accept;
   static final short[] DFA61_special;
   static final short[][] DFA61_transition;
   static final String DFA185_eotS = "\u001d\uffff";
   static final String DFA185_eofS = "\u0001\uffff\u001a\u001c\u0002\uffff";
   static final String DFA185_minS = "\u0001\u0017\u001aÉ\u0002\uffff";
   static final String DFA185_maxS = "\u0001²\u001aÌ\u0002\uffff";
   static final String DFA185_acceptS = "\u001b\uffff\u0001\u0001\u0001\u0002";
   static final String DFA185_specialS = "\u001d\uffff}>";
   static final String[] DFA185_transitionS;
   static final short[] DFA185_eot;
   static final short[] DFA185_eof;
   static final char[] DFA185_min;
   static final char[] DFA185_max;
   static final short[] DFA185_accept;
   static final short[] DFA185_special;
   static final short[][] DFA185_transition;
   static final String DFA186_eotS = "\u001d\uffff";
   static final String DFA186_eofS = "\u0001\uffff\u001a\u001c\u0002\uffff";
   static final String DFA186_minS = "\u0001\u0017\u001a\u001b\u0002\uffff";
   static final String DFA186_maxS = "\u0001²\u001aÌ\u0002\uffff";
   static final String DFA186_acceptS = "\u001b\uffff\u0001\u0001\u0001\u0002";
   static final String DFA186_specialS = "\u001d\uffff}>";
   static final String[] DFA186_transitionS;
   static final short[] DFA186_eot;
   static final short[] DFA186_eof;
   static final char[] DFA186_min;
   static final char[] DFA186_max;
   static final short[] DFA186_accept;
   static final short[] DFA186_special;
   static final short[][] DFA186_transition;
   static final String DFA204_eotS = "#\uffff";
   static final String DFA204_eofS = "#\uffff";
   static final String DFA204_minS = "\u0001\u0006\u0002\uffff\u0001\u0006\u0004\uffff\u0019Â\u0001É\u0001\uffff";
   static final String DFA204_maxS = "\u0001Ö\u0002\uffff\u0001×\u0004\uffff\u001aË\u0001\uffff";
   static final String DFA204_acceptS = "\u0001\uffff\u0001\u0001\u0001\u0002\u0001\uffff\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u001a\uffff\u0001\u0003";
   static final String DFA204_specialS = "#\uffff}>";
   static final String[] DFA204_transitionS;
   static final short[] DFA204_eot;
   static final short[] DFA204_eof;
   static final char[] DFA204_min;
   static final char[] DFA204_max;
   static final short[] DFA204_accept;
   static final short[] DFA204_special;
   static final short[][] DFA204_transition;
   static final String DFA206_eotS = "\u001c\uffff";
   static final String DFA206_eofS = "\u0001\uffff\u0019\u001b\u0002\uffff";
   static final String DFA206_minS = "\u0001\u0017\u0019Â\u0002\uffff";
   static final String DFA206_maxS = "\u0001²\u0019Ì\u0002\uffff";
   static final String DFA206_acceptS = "\u001a\uffff\u0001\u0001\u0001\u0002";
   static final String DFA206_specialS = "\u001c\uffff}>";
   static final String[] DFA206_transitionS;
   static final short[] DFA206_eot;
   static final short[] DFA206_eof;
   static final char[] DFA206_min;
   static final char[] DFA206_max;
   static final short[] DFA206_accept;
   static final short[] DFA206_special;
   static final short[][] DFA206_transition;
   static final String DFA208_eotS = ":\uffff";
   static final String DFA208_eofS = ":\uffff";
   static final String DFA208_minS = "\u0001\u0017\u0019Â\u0001É\u0001Â\u0001É\u0001\u0017\u0001\u0006\u0019Â\u0002\uffff";
   static final String DFA208_maxS = "\u0001²\u001aÉ\u0001Â\u0001É\u0001²\u0001Ö\u0019Â\u0002\uffff";
   static final String DFA208_acceptS = "8\uffff\u0001\u0001\u0001\u0002";
   static final String DFA208_specialS = ":\uffff}>";
   static final String[] DFA208_transitionS;
   static final short[] DFA208_eot;
   static final short[] DFA208_eof;
   static final char[] DFA208_min;
   static final char[] DFA208_max;
   static final short[] DFA208_accept;
   static final short[] DFA208_special;
   static final short[][] DFA208_transition;
   static final String DFA210_eotS = "\u001f\uffff";
   static final String DFA210_eofS = "\u0001\u0001\u001e\uffff";
   static final String DFA210_minS = "\u0001\u001e\u0001\uffff\u0001\u0006\u0001\uffff\u0019¦\u0001\uffff\u0001¦";
   static final String DFA210_maxS = "\u0001×\u0001\uffff\u0001Ö\u0001\uffff\u0019É\u0001\uffff\u0001É";
   static final String DFA210_acceptS = "\u0001\uffff\u0001\u0003\u0001\uffff\u0001\u0002\u0019\uffff\u0001\u0001\u0001\uffff";
   static final String DFA210_specialS = "\u001f\uffff}>";
   static final String[] DFA210_transitionS;
   static final short[] DFA210_eot;
   static final short[] DFA210_eof;
   static final char[] DFA210_min;
   static final char[] DFA210_max;
   static final short[] DFA210_accept;
   static final short[] DFA210_special;
   static final short[][] DFA210_transition;
   static final String DFA213_eotS = "I\uffff";
   static final String DFA213_eofS = "\u0003\uffff\u0001\u0001\"\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0006\uffff\u001a\"";
   static final String DFA213_minS = "\u0001\u0006\u0001\uffff\u0001\u0006\u0001\u001e\u0001\uffff\u0001Á\u0019Â\u0001Ã\u0002Â\u0001\uffff\u0001É\u0002Â\u0001\u0006\u0001\u0017\u0001Â\u0001\u0006\u0001+\u0001u\u0003Â\u001a\u001e";
   static final String DFA213_maxS = "\u0001Ö\u0001\uffff\u0001Ö\u0001×\u0001\uffff\u0001Ó\u0002É\u0001Í\u0017É\u0002Í\u0001\uffff\u0001É\u0001Í\u0001É\u0001×\u0001²\u0001Ì\u0001Ö\u0002É\u0003Ã\u001a×";
   static final String DFA213_acceptS = "\u0001\uffff\u0001\u0001\u0002\uffff\u0001\u0002\u001d\uffff\u0001\u0003&\uffff";
   static final String DFA213_specialS = "I\uffff}>";
   static final String[] DFA213_transitionS;
   static final short[] DFA213_eot;
   static final short[] DFA213_eof;
   static final char[] DFA213_min;
   static final char[] DFA213_max;
   static final short[] DFA213_accept;
   static final short[] DFA213_special;
   static final short[][] DFA213_transition;
   static final String DFA216_eotS = "\u001f\uffff";
   static final String DFA216_eofS = "\u001f\uffff";
   static final String DFA216_minS = "\u0001\u0006\u0001\uffff\u001b\u0018\u0002\uffff";
   static final String DFA216_maxS = "\u0001Ö\u0001\uffff\u001aÉ\u0001Ç\u0002\uffff";
   static final String DFA216_acceptS = "\u0001\uffff\u0001\u0001\u001b\uffff\u0001\u0002\u0001\u0003";
   static final String DFA216_specialS = "\u001f\uffff}>";
   static final String[] DFA216_transitionS;
   static final short[] DFA216_eot;
   static final short[] DFA216_eof;
   static final char[] DFA216_min;
   static final char[] DFA216_max;
   static final short[] DFA216_accept;
   static final short[] DFA216_special;
   static final short[][] DFA216_transition;
   static final String DFA224_eotS = "\u001d\uffff";
   static final String DFA224_eofS = "\u001d\uffff";
   static final String DFA224_minS = "\u0001\u0017\u0019Ï\u0001\u0006\u0002\uffff";
   static final String DFA224_maxS = "\u0001²\u0019Ï\u0001Ö\u0002\uffff";
   static final String DFA224_acceptS = "\u001b\uffff\u0001\u0001\u0001\u0002";
   static final String DFA224_specialS = "\u001d\uffff}>";
   static final String[] DFA224_transitionS;
   static final short[] DFA224_eot;
   static final short[] DFA224_eof;
   static final char[] DFA224_min;
   static final char[] DFA224_max;
   static final short[] DFA224_accept;
   static final short[] DFA224_special;
   static final short[][] DFA224_transition;
   static final String DFA229_eotS = "A\uffff";
   static final String DFA229_eofS = "A\uffff";
   static final String DFA229_minS = "\u0001\u000e\u001a1\u0001\uffff\u0001\u000e\u0003\uffff\u0001±\u0002\uffff\u001a1\u0004\uffff";
   static final String DFA229_maxS = "\u0001Â\u001aÒ\u0001\uffff\u0001Â\u0003\uffff\u0001Ë\u0002\uffff\u001aÒ\u0004\uffff";
   static final String DFA229_acceptS = "\u001b\uffff\u0001\u0004\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\uffff\u0001\u0007\u0001\b\u001a\uffff\u0001\n\u0001\u0005\u0001\u0006\u0001\t";
   static final String DFA229_specialS = "A\uffff}>";
   static final String[] DFA229_transitionS;
   static final short[] DFA229_eot;
   static final short[] DFA229_eof;
   static final char[] DFA229_min;
   static final char[] DFA229_max;
   static final short[] DFA229_accept;
   static final short[] DFA229_special;
   static final short[][] DFA229_transition;
   static final String DFA228_eotS = "\n\uffff";
   static final String DFA228_eofS = "\n\uffff";
   static final String DFA228_minS = "\u0001P\u0001\uffff\u0006±\u0002\uffff";
   static final String DFA228_maxS = "\u0001Ñ\u0001\uffff\u0006Ë\u0002\uffff";
   static final String DFA228_acceptS = "\u0001\uffff\u0001\u0001\u0006\uffff\u0001\u0002\u0001\u0003";
   static final String DFA228_specialS = "\n\uffff}>";
   static final String[] DFA228_transitionS;
   static final short[] DFA228_eot;
   static final short[] DFA228_eof;
   static final char[] DFA228_min;
   static final char[] DFA228_max;
   static final short[] DFA228_accept;
   static final short[] DFA228_special;
   static final short[][] DFA228_transition;
   static final String DFA239_eotS = "\u001e\uffff";
   static final String DFA239_eofS = "\u0001\uffff\u0015\u001c\u0002\u0019\u0002\uffff\u0001\u0019\u0003\uffff";
   static final String DFA239_minS = "\u0001\u0017\u0017<\u0002\uffff\u0001<\u0003\uffff";
   static final String DFA239_maxS = "\u0001¶\u0017Ð\u0002\uffff\u0001Ð\u0003\uffff";
   static final String DFA239_acceptS = "\u0018\uffff\u0001\u0002\u0001\u0003\u0001\uffff\u0001\u0005\u0001\u0001\u0001\u0004";
   static final String DFA239_specialS = "\u001e\uffff}>";
   static final String[] DFA239_transitionS;
   static final short[] DFA239_eot;
   static final short[] DFA239_eof;
   static final char[] DFA239_min;
   static final char[] DFA239_max;
   static final short[] DFA239_accept;
   static final short[] DFA239_special;
   static final short[][] DFA239_transition;
   public static final BitSet FOLLOW_selectStatement_in_cqlStatement59;
   public static final BitSet FOLLOW_insertStatement_in_cqlStatement88;
   public static final BitSet FOLLOW_updateStatement_in_cqlStatement117;
   public static final BitSet FOLLOW_batchStatement_in_cqlStatement146;
   public static final BitSet FOLLOW_deleteStatement_in_cqlStatement176;
   public static final BitSet FOLLOW_useStatement_in_cqlStatement205;
   public static final BitSet FOLLOW_truncateStatement_in_cqlStatement237;
   public static final BitSet FOLLOW_createKeyspaceStatement_in_cqlStatement264;
   public static final BitSet FOLLOW_createTableStatement_in_cqlStatement285;
   public static final BitSet FOLLOW_createIndexStatement_in_cqlStatement308;
   public static final BitSet FOLLOW_dropKeyspaceStatement_in_cqlStatement331;
   public static final BitSet FOLLOW_dropTableStatement_in_cqlStatement353;
   public static final BitSet FOLLOW_dropIndexStatement_in_cqlStatement378;
   public static final BitSet FOLLOW_alterTableStatement_in_cqlStatement403;
   public static final BitSet FOLLOW_alterKeyspaceStatement_in_cqlStatement427;
   public static final BitSet FOLLOW_grantPermissionsStatement_in_cqlStatement448;
   public static final BitSet FOLLOW_revokePermissionsStatement_in_cqlStatement466;
   public static final BitSet FOLLOW_listPermissionsStatement_in_cqlStatement483;
   public static final BitSet FOLLOW_createUserStatement_in_cqlStatement502;
   public static final BitSet FOLLOW_alterUserStatement_in_cqlStatement526;
   public static final BitSet FOLLOW_dropUserStatement_in_cqlStatement551;
   public static final BitSet FOLLOW_listUsersStatement_in_cqlStatement577;
   public static final BitSet FOLLOW_createTriggerStatement_in_cqlStatement602;
   public static final BitSet FOLLOW_dropTriggerStatement_in_cqlStatement623;
   public static final BitSet FOLLOW_createTypeStatement_in_cqlStatement646;
   public static final BitSet FOLLOW_alterTypeStatement_in_cqlStatement670;
   public static final BitSet FOLLOW_dropTypeStatement_in_cqlStatement695;
   public static final BitSet FOLLOW_createFunctionStatement_in_cqlStatement721;
   public static final BitSet FOLLOW_dropFunctionStatement_in_cqlStatement741;
   public static final BitSet FOLLOW_createAggregateStatement_in_cqlStatement763;
   public static final BitSet FOLLOW_dropAggregateStatement_in_cqlStatement782;
   public static final BitSet FOLLOW_createRoleStatement_in_cqlStatement803;
   public static final BitSet FOLLOW_alterRoleStatement_in_cqlStatement827;
   public static final BitSet FOLLOW_dropRoleStatement_in_cqlStatement852;
   public static final BitSet FOLLOW_listRolesStatement_in_cqlStatement878;
   public static final BitSet FOLLOW_grantRoleStatement_in_cqlStatement903;
   public static final BitSet FOLLOW_revokeRoleStatement_in_cqlStatement928;
   public static final BitSet FOLLOW_createMaterializedViewStatement_in_cqlStatement952;
   public static final BitSet FOLLOW_dropMaterializedViewStatement_in_cqlStatement964;
   public static final BitSet FOLLOW_alterMaterializedViewStatement_in_cqlStatement978;
   public static final BitSet FOLLOW_restrictPermissionsStatement_in_cqlStatement991;
   public static final BitSet FOLLOW_unrestrictPermissionsStatement_in_cqlStatement1006;
   public static final BitSet FOLLOW_K_USE_in_useStatement1032;
   public static final BitSet FOLLOW_keyspaceName_in_useStatement1036;
   public static final BitSet FOLLOW_K_SELECT_in_selectStatement1070;
   public static final BitSet FOLLOW_K_JSON_in_selectStatement1096;
   public static final BitSet FOLLOW_selectClause_in_selectStatement1105;
   public static final BitSet FOLLOW_K_FROM_in_selectStatement1113;
   public static final BitSet FOLLOW_columnFamilyName_in_selectStatement1117;
   public static final BitSet FOLLOW_K_WHERE_in_selectStatement1127;
   public static final BitSet FOLLOW_whereClause_in_selectStatement1131;
   public static final BitSet FOLLOW_K_GROUP_in_selectStatement1144;
   public static final BitSet FOLLOW_K_BY_in_selectStatement1146;
   public static final BitSet FOLLOW_groupByClause_in_selectStatement1148;
   public static final BitSet FOLLOW_198_in_selectStatement1153;
   public static final BitSet FOLLOW_groupByClause_in_selectStatement1155;
   public static final BitSet FOLLOW_K_ORDER_in_selectStatement1172;
   public static final BitSet FOLLOW_K_BY_in_selectStatement1174;
   public static final BitSet FOLLOW_orderByClause_in_selectStatement1176;
   public static final BitSet FOLLOW_198_in_selectStatement1181;
   public static final BitSet FOLLOW_orderByClause_in_selectStatement1183;
   public static final BitSet FOLLOW_K_PER_in_selectStatement1200;
   public static final BitSet FOLLOW_K_PARTITION_in_selectStatement1202;
   public static final BitSet FOLLOW_K_LIMIT_in_selectStatement1204;
   public static final BitSet FOLLOW_intValue_in_selectStatement1208;
   public static final BitSet FOLLOW_K_LIMIT_in_selectStatement1223;
   public static final BitSet FOLLOW_intValue_in_selectStatement1227;
   public static final BitSet FOLLOW_K_ALLOW_in_selectStatement1242;
   public static final BitSet FOLLOW_K_FILTERING_in_selectStatement1244;
   public static final BitSet FOLLOW_K_DISTINCT_in_selectClause1299;
   public static final BitSet FOLLOW_selectors_in_selectClause1303;
   public static final BitSet FOLLOW_selectors_in_selectClause1315;
   public static final BitSet FOLLOW_selector_in_selectors1340;
   public static final BitSet FOLLOW_198_in_selectors1345;
   public static final BitSet FOLLOW_selector_in_selectors1349;
   public static final BitSet FOLLOW_211_in_selectors1361;
   public static final BitSet FOLLOW_unaliasedSelector_in_selector1394;
   public static final BitSet FOLLOW_K_AS_in_selector1397;
   public static final BitSet FOLLOW_noncol_ident_in_selector1401;
   public static final BitSet FOLLOW_selectionAddition_in_unaliasedSelector1430;
   public static final BitSet FOLLOW_selectionMultiplication_in_selectionAddition1457;
   public static final BitSet FOLLOW_196_in_selectionAddition1473;
   public static final BitSet FOLLOW_selectionMultiplication_in_selectionAddition1477;
   public static final BitSet FOLLOW_199_in_selectionAddition1491;
   public static final BitSet FOLLOW_selectionMultiplication_in_selectionAddition1495;
   public static final BitSet FOLLOW_selectionGroup_in_selectionMultiplication1533;
   public static final BitSet FOLLOW_211_in_selectionMultiplication1549;
   public static final BitSet FOLLOW_selectionGroup_in_selectionMultiplication1553;
   public static final BitSet FOLLOW_202_in_selectionMultiplication1567;
   public static final BitSet FOLLOW_selectionGroup_in_selectionMultiplication1571;
   public static final BitSet FOLLOW_193_in_selectionMultiplication1585;
   public static final BitSet FOLLOW_selectionGroup_in_selectionMultiplication1589;
   public static final BitSet FOLLOW_selectionGroupWithField_in_selectionGroup1631;
   public static final BitSet FOLLOW_selectionGroupWithoutField_in_selectionGroup1643;
   public static final BitSet FOLLOW_199_in_selectionGroup1653;
   public static final BitSet FOLLOW_selectionGroup_in_selectionGroup1657;
   public static final BitSet FOLLOW_selectionGroupWithoutField_in_selectionGroupWithField1682;
   public static final BitSet FOLLOW_selectorModifier_in_selectionGroupWithField1686;
   public static final BitSet FOLLOW_fieldSelectorModifier_in_selectorModifier1713;
   public static final BitSet FOLLOW_selectorModifier_in_selectorModifier1718;
   public static final BitSet FOLLOW_210_in_selectorModifier1729;
   public static final BitSet FOLLOW_collectionSubSelection_in_selectorModifier1733;
   public static final BitSet FOLLOW_212_in_selectorModifier1736;
   public static final BitSet FOLLOW_selectorModifier_in_selectorModifier1740;
   public static final BitSet FOLLOW_201_in_fieldSelectorModifier1773;
   public static final BitSet FOLLOW_fident_in_fieldSelectorModifier1777;
   public static final BitSet FOLLOW_term_in_collectionSubSelection1815;
   public static final BitSet FOLLOW_RANGE_in_collectionSubSelection1821;
   public static final BitSet FOLLOW_term_in_collectionSubSelection1826;
   public static final BitSet FOLLOW_RANGE_in_collectionSubSelection1841;
   public static final BitSet FOLLOW_term_in_collectionSubSelection1847;
   public static final BitSet FOLLOW_simpleUnaliasedSelector_in_selectionGroupWithoutField1899;
   public static final BitSet FOLLOW_selectionTypeHint_in_selectionGroupWithoutField1917;
   public static final BitSet FOLLOW_selectionTupleOrNestedSelector_in_selectionGroupWithoutField1929;
   public static final BitSet FOLLOW_selectionList_in_selectionGroupWithoutField1941;
   public static final BitSet FOLLOW_selectionMapOrSet_in_selectionGroupWithoutField1953;
   public static final BitSet FOLLOW_194_in_selectionTypeHint1981;
   public static final BitSet FOLLOW_comparatorType_in_selectionTypeHint1985;
   public static final BitSet FOLLOW_195_in_selectionTypeHint1987;
   public static final BitSet FOLLOW_selectionGroupWithoutField_in_selectionTypeHint1991;
   public static final BitSet FOLLOW_210_in_selectionList2032;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionList2038;
   public static final BitSet FOLLOW_198_in_selectionList2044;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionList2048;
   public static final BitSet FOLLOW_212_in_selectionList2058;
   public static final BitSet FOLLOW_214_in_selectionMapOrSet2079;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionMapOrSet2083;
   public static final BitSet FOLLOW_selectionMap_in_selectionMapOrSet2089;
   public static final BitSet FOLLOW_selectionSet_in_selectionMapOrSet2098;
   public static final BitSet FOLLOW_215_in_selectionMapOrSet2104;
   public static final BitSet FOLLOW_214_in_selectionMapOrSet2112;
   public static final BitSet FOLLOW_215_in_selectionMapOrSet2114;
   public static final BitSet FOLLOW_203_in_selectionMap2159;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionMap2163;
   public static final BitSet FOLLOW_198_in_selectionMap2171;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionMap2175;
   public static final BitSet FOLLOW_203_in_selectionMap2177;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionMap2181;
   public static final BitSet FOLLOW_198_in_selectionSet2233;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionSet2237;
   public static final BitSet FOLLOW_194_in_selectionTupleOrNestedSelector2283;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionTupleOrNestedSelector2287;
   public static final BitSet FOLLOW_198_in_selectionTupleOrNestedSelector2292;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionTupleOrNestedSelector2296;
   public static final BitSet FOLLOW_195_in_selectionTupleOrNestedSelector2303;
   public static final BitSet FOLLOW_sident_in_simpleUnaliasedSelector2328;
   public static final BitSet FOLLOW_selectionLiteral_in_simpleUnaliasedSelector2374;
   public static final BitSet FOLLOW_selectionFunction_in_simpleUnaliasedSelector2410;
   public static final BitSet FOLLOW_K_COUNT_in_selectionFunction2456;
   public static final BitSet FOLLOW_194_in_selectionFunction2458;
   public static final BitSet FOLLOW_211_in_selectionFunction2460;
   public static final BitSet FOLLOW_195_in_selectionFunction2462;
   public static final BitSet FOLLOW_K_WRITETIME_in_selectionFunction2493;
   public static final BitSet FOLLOW_194_in_selectionFunction2495;
   public static final BitSet FOLLOW_cident_in_selectionFunction2499;
   public static final BitSet FOLLOW_195_in_selectionFunction2501;
   public static final BitSet FOLLOW_K_TTL_in_selectionFunction2524;
   public static final BitSet FOLLOW_194_in_selectionFunction2532;
   public static final BitSet FOLLOW_cident_in_selectionFunction2536;
   public static final BitSet FOLLOW_195_in_selectionFunction2538;
   public static final BitSet FOLLOW_K_CAST_in_selectionFunction2561;
   public static final BitSet FOLLOW_194_in_selectionFunction2568;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionFunction2572;
   public static final BitSet FOLLOW_K_AS_in_selectionFunction2574;
   public static final BitSet FOLLOW_native_type_in_selectionFunction2578;
   public static final BitSet FOLLOW_195_in_selectionFunction2580;
   public static final BitSet FOLLOW_functionName_in_selectionFunction2592;
   public static final BitSet FOLLOW_selectionFunctionArgs_in_selectionFunction2596;
   public static final BitSet FOLLOW_constant_in_selectionLiteral2621;
   public static final BitSet FOLLOW_K_NULL_in_selectionLiteral2651;
   public static final BitSet FOLLOW_203_in_selectionLiteral2685;
   public static final BitSet FOLLOW_noncol_ident_in_selectionLiteral2689;
   public static final BitSet FOLLOW_QMARK_in_selectionLiteral2710;
   public static final BitSet FOLLOW_194_in_selectionFunctionArgs2766;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionFunctionArgs2771;
   public static final BitSet FOLLOW_198_in_selectionFunctionArgs2787;
   public static final BitSet FOLLOW_unaliasedSelector_in_selectionFunctionArgs2791;
   public static final BitSet FOLLOW_195_in_selectionFunctionArgs2806;
   public static final BitSet FOLLOW_IDENT_in_sident2829;
   public static final BitSet FOLLOW_QUOTED_NAME_in_sident2854;
   public static final BitSet FOLLOW_unreserved_keyword_in_sident2873;
   public static final BitSet FOLLOW_EMPTY_QUOTED_NAME_in_sident2883;
   public static final BitSet FOLLOW_relationOrExpression_in_whereClause2917;
   public static final BitSet FOLLOW_K_AND_in_whereClause2921;
   public static final BitSet FOLLOW_relationOrExpression_in_whereClause2923;
   public static final BitSet FOLLOW_relation_in_relationOrExpression2945;
   public static final BitSet FOLLOW_customIndexExpression_in_relationOrExpression2954;
   public static final BitSet FOLLOW_213_in_customIndexExpression2982;
   public static final BitSet FOLLOW_idxName_in_customIndexExpression2984;
   public static final BitSet FOLLOW_198_in_customIndexExpression2987;
   public static final BitSet FOLLOW_term_in_customIndexExpression2991;
   public static final BitSet FOLLOW_195_in_customIndexExpression2993;
   public static final BitSet FOLLOW_cident_in_orderByClause3023;
   public static final BitSet FOLLOW_K_ASC_in_orderByClause3026;
   public static final BitSet FOLLOW_K_DESC_in_orderByClause3030;
   public static final BitSet FOLLOW_unaliasedSelector_in_groupByClause3056;
   public static final BitSet FOLLOW_K_INSERT_in_insertStatement3081;
   public static final BitSet FOLLOW_K_INTO_in_insertStatement3083;
   public static final BitSet FOLLOW_columnFamilyName_in_insertStatement3087;
   public static final BitSet FOLLOW_normalInsertStatement_in_insertStatement3101;
   public static final BitSet FOLLOW_K_JSON_in_insertStatement3116;
   public static final BitSet FOLLOW_jsonInsertStatement_in_insertStatement3120;
   public static final BitSet FOLLOW_194_in_normalInsertStatement3156;
   public static final BitSet FOLLOW_cident_in_normalInsertStatement3160;
   public static final BitSet FOLLOW_198_in_normalInsertStatement3167;
   public static final BitSet FOLLOW_cident_in_normalInsertStatement3171;
   public static final BitSet FOLLOW_195_in_normalInsertStatement3178;
   public static final BitSet FOLLOW_K_VALUES_in_normalInsertStatement3186;
   public static final BitSet FOLLOW_194_in_normalInsertStatement3194;
   public static final BitSet FOLLOW_term_in_normalInsertStatement3198;
   public static final BitSet FOLLOW_198_in_normalInsertStatement3204;
   public static final BitSet FOLLOW_term_in_normalInsertStatement3208;
   public static final BitSet FOLLOW_195_in_normalInsertStatement3215;
   public static final BitSet FOLLOW_K_IF_in_normalInsertStatement3225;
   public static final BitSet FOLLOW_K_NOT_in_normalInsertStatement3227;
   public static final BitSet FOLLOW_K_EXISTS_in_normalInsertStatement3229;
   public static final BitSet FOLLOW_usingClause_in_normalInsertStatement3244;
   public static final BitSet FOLLOW_jsonValue_in_jsonInsertStatement3290;
   public static final BitSet FOLLOW_K_DEFAULT_in_jsonInsertStatement3300;
   public static final BitSet FOLLOW_K_NULL_in_jsonInsertStatement3304;
   public static final BitSet FOLLOW_K_UNSET_in_jsonInsertStatement3312;
   public static final BitSet FOLLOW_K_IF_in_jsonInsertStatement3328;
   public static final BitSet FOLLOW_K_NOT_in_jsonInsertStatement3330;
   public static final BitSet FOLLOW_K_EXISTS_in_jsonInsertStatement3332;
   public static final BitSet FOLLOW_usingClause_in_jsonInsertStatement3347;
   public static final BitSet FOLLOW_STRING_LITERAL_in_jsonValue3382;
   public static final BitSet FOLLOW_203_in_jsonValue3392;
   public static final BitSet FOLLOW_noncol_ident_in_jsonValue3396;
   public static final BitSet FOLLOW_QMARK_in_jsonValue3410;
   public static final BitSet FOLLOW_K_USING_in_usingClause3441;
   public static final BitSet FOLLOW_usingClauseObjective_in_usingClause3443;
   public static final BitSet FOLLOW_K_AND_in_usingClause3448;
   public static final BitSet FOLLOW_usingClauseObjective_in_usingClause3450;
   public static final BitSet FOLLOW_K_TIMESTAMP_in_usingClauseObjective3472;
   public static final BitSet FOLLOW_intValue_in_usingClauseObjective3476;
   public static final BitSet FOLLOW_K_TTL_in_usingClauseObjective3486;
   public static final BitSet FOLLOW_intValue_in_usingClauseObjective3490;
   public static final BitSet FOLLOW_K_UPDATE_in_updateStatement3524;
   public static final BitSet FOLLOW_columnFamilyName_in_updateStatement3528;
   public static final BitSet FOLLOW_usingClause_in_updateStatement3538;
   public static final BitSet FOLLOW_K_SET_in_updateStatement3550;
   public static final BitSet FOLLOW_columnOperation_in_updateStatement3552;
   public static final BitSet FOLLOW_198_in_updateStatement3556;
   public static final BitSet FOLLOW_columnOperation_in_updateStatement3558;
   public static final BitSet FOLLOW_K_WHERE_in_updateStatement3569;
   public static final BitSet FOLLOW_whereClause_in_updateStatement3573;
   public static final BitSet FOLLOW_K_IF_in_updateStatement3583;
   public static final BitSet FOLLOW_K_EXISTS_in_updateStatement3587;
   public static final BitSet FOLLOW_updateConditions_in_updateStatement3595;
   public static final BitSet FOLLOW_columnCondition_in_updateConditions3637;
   public static final BitSet FOLLOW_K_AND_in_updateConditions3642;
   public static final BitSet FOLLOW_columnCondition_in_updateConditions3644;
   public static final BitSet FOLLOW_K_DELETE_in_deleteStatement3681;
   public static final BitSet FOLLOW_deleteSelection_in_deleteStatement3687;
   public static final BitSet FOLLOW_K_FROM_in_deleteStatement3700;
   public static final BitSet FOLLOW_columnFamilyName_in_deleteStatement3704;
   public static final BitSet FOLLOW_usingClauseDelete_in_deleteStatement3714;
   public static final BitSet FOLLOW_K_WHERE_in_deleteStatement3726;
   public static final BitSet FOLLOW_whereClause_in_deleteStatement3730;
   public static final BitSet FOLLOW_K_IF_in_deleteStatement3740;
   public static final BitSet FOLLOW_K_EXISTS_in_deleteStatement3744;
   public static final BitSet FOLLOW_updateConditions_in_deleteStatement3752;
   public static final BitSet FOLLOW_deleteOp_in_deleteSelection3799;
   public static final BitSet FOLLOW_198_in_deleteSelection3814;
   public static final BitSet FOLLOW_deleteOp_in_deleteSelection3818;
   public static final BitSet FOLLOW_cident_in_deleteOp3845;
   public static final BitSet FOLLOW_cident_in_deleteOp3872;
   public static final BitSet FOLLOW_210_in_deleteOp3874;
   public static final BitSet FOLLOW_term_in_deleteOp3878;
   public static final BitSet FOLLOW_212_in_deleteOp3880;
   public static final BitSet FOLLOW_cident_in_deleteOp3892;
   public static final BitSet FOLLOW_201_in_deleteOp3894;
   public static final BitSet FOLLOW_fident_in_deleteOp3898;
   public static final BitSet FOLLOW_K_USING_in_usingClauseDelete3918;
   public static final BitSet FOLLOW_K_TIMESTAMP_in_usingClauseDelete3920;
   public static final BitSet FOLLOW_intValue_in_usingClauseDelete3924;
   public static final BitSet FOLLOW_K_BEGIN_in_batchStatement3958;
   public static final BitSet FOLLOW_K_UNLOGGED_in_batchStatement3968;
   public static final BitSet FOLLOW_K_COUNTER_in_batchStatement3974;
   public static final BitSet FOLLOW_K_BATCH_in_batchStatement3987;
   public static final BitSet FOLLOW_usingClause_in_batchStatement3991;
   public static final BitSet FOLLOW_batchStatementObjective_in_batchStatement4011;
   public static final BitSet FOLLOW_204_in_batchStatement4013;
   public static final BitSet FOLLOW_K_APPLY_in_batchStatement4027;
   public static final BitSet FOLLOW_K_BATCH_in_batchStatement4029;
   public static final BitSet FOLLOW_insertStatement_in_batchStatementObjective4060;
   public static final BitSet FOLLOW_updateStatement_in_batchStatementObjective4073;
   public static final BitSet FOLLOW_deleteStatement_in_batchStatementObjective4086;
   public static final BitSet FOLLOW_K_CREATE_in_createAggregateStatement4119;
   public static final BitSet FOLLOW_K_OR_in_createAggregateStatement4122;
   public static final BitSet FOLLOW_K_REPLACE_in_createAggregateStatement4124;
   public static final BitSet FOLLOW_K_AGGREGATE_in_createAggregateStatement4136;
   public static final BitSet FOLLOW_K_IF_in_createAggregateStatement4145;
   public static final BitSet FOLLOW_K_NOT_in_createAggregateStatement4147;
   public static final BitSet FOLLOW_K_EXISTS_in_createAggregateStatement4149;
   public static final BitSet FOLLOW_functionName_in_createAggregateStatement4163;
   public static final BitSet FOLLOW_194_in_createAggregateStatement4171;
   public static final BitSet FOLLOW_comparatorType_in_createAggregateStatement4195;
   public static final BitSet FOLLOW_198_in_createAggregateStatement4211;
   public static final BitSet FOLLOW_comparatorType_in_createAggregateStatement4215;
   public static final BitSet FOLLOW_195_in_createAggregateStatement4239;
   public static final BitSet FOLLOW_K_SFUNC_in_createAggregateStatement4247;
   public static final BitSet FOLLOW_allowedFunctionName_in_createAggregateStatement4253;
   public static final BitSet FOLLOW_K_STYPE_in_createAggregateStatement4261;
   public static final BitSet FOLLOW_comparatorType_in_createAggregateStatement4267;
   public static final BitSet FOLLOW_K_FINALFUNC_in_createAggregateStatement4285;
   public static final BitSet FOLLOW_allowedFunctionName_in_createAggregateStatement4291;
   public static final BitSet FOLLOW_K_INITCOND_in_createAggregateStatement4318;
   public static final BitSet FOLLOW_term_in_createAggregateStatement4324;
   public static final BitSet FOLLOW_K_DETERMINISTIC_in_createAggregateStatement4343;
   public static final BitSet FOLLOW_K_DROP_in_dropAggregateStatement4386;
   public static final BitSet FOLLOW_K_AGGREGATE_in_dropAggregateStatement4388;
   public static final BitSet FOLLOW_K_IF_in_dropAggregateStatement4397;
   public static final BitSet FOLLOW_K_EXISTS_in_dropAggregateStatement4399;
   public static final BitSet FOLLOW_functionName_in_dropAggregateStatement4414;
   public static final BitSet FOLLOW_194_in_dropAggregateStatement4432;
   public static final BitSet FOLLOW_comparatorType_in_dropAggregateStatement4460;
   public static final BitSet FOLLOW_198_in_dropAggregateStatement4478;
   public static final BitSet FOLLOW_comparatorType_in_dropAggregateStatement4482;
   public static final BitSet FOLLOW_195_in_dropAggregateStatement4510;
   public static final BitSet FOLLOW_K_CREATE_in_createFunctionStatement4567;
   public static final BitSet FOLLOW_K_OR_in_createFunctionStatement4570;
   public static final BitSet FOLLOW_K_REPLACE_in_createFunctionStatement4572;
   public static final BitSet FOLLOW_K_FUNCTION_in_createFunctionStatement4584;
   public static final BitSet FOLLOW_K_IF_in_createFunctionStatement4593;
   public static final BitSet FOLLOW_K_NOT_in_createFunctionStatement4595;
   public static final BitSet FOLLOW_K_EXISTS_in_createFunctionStatement4597;
   public static final BitSet FOLLOW_functionName_in_createFunctionStatement4611;
   public static final BitSet FOLLOW_194_in_createFunctionStatement4619;
   public static final BitSet FOLLOW_noncol_ident_in_createFunctionStatement4643;
   public static final BitSet FOLLOW_comparatorType_in_createFunctionStatement4647;
   public static final BitSet FOLLOW_198_in_createFunctionStatement4663;
   public static final BitSet FOLLOW_noncol_ident_in_createFunctionStatement4667;
   public static final BitSet FOLLOW_comparatorType_in_createFunctionStatement4671;
   public static final BitSet FOLLOW_195_in_createFunctionStatement4695;
   public static final BitSet FOLLOW_K_RETURNS_in_createFunctionStatement4706;
   public static final BitSet FOLLOW_K_NULL_in_createFunctionStatement4708;
   public static final BitSet FOLLOW_K_CALLED_in_createFunctionStatement4714;
   public static final BitSet FOLLOW_K_ON_in_createFunctionStatement4720;
   public static final BitSet FOLLOW_K_NULL_in_createFunctionStatement4722;
   public static final BitSet FOLLOW_K_INPUT_in_createFunctionStatement4724;
   public static final BitSet FOLLOW_K_RETURNS_in_createFunctionStatement4732;
   public static final BitSet FOLLOW_comparatorType_in_createFunctionStatement4738;
   public static final BitSet FOLLOW_K_DETERMINISTIC_in_createFunctionStatement4748;
   public static final BitSet FOLLOW_K_MONOTONIC_in_createFunctionStatement4771;
   public static final BitSet FOLLOW_K_MONOTONIC_in_createFunctionStatement4785;
   public static final BitSet FOLLOW_K_ON_in_createFunctionStatement4787;
   public static final BitSet FOLLOW_noncol_ident_in_createFunctionStatement4791;
   public static final BitSet FOLLOW_K_LANGUAGE_in_createFunctionStatement4810;
   public static final BitSet FOLLOW_IDENT_in_createFunctionStatement4816;
   public static final BitSet FOLLOW_K_AS_in_createFunctionStatement4824;
   public static final BitSet FOLLOW_STRING_LITERAL_in_createFunctionStatement4830;
   public static final BitSet FOLLOW_K_DROP_in_dropFunctionStatement4868;
   public static final BitSet FOLLOW_K_FUNCTION_in_dropFunctionStatement4870;
   public static final BitSet FOLLOW_K_IF_in_dropFunctionStatement4879;
   public static final BitSet FOLLOW_K_EXISTS_in_dropFunctionStatement4881;
   public static final BitSet FOLLOW_functionName_in_dropFunctionStatement4896;
   public static final BitSet FOLLOW_194_in_dropFunctionStatement4914;
   public static final BitSet FOLLOW_comparatorType_in_dropFunctionStatement4942;
   public static final BitSet FOLLOW_198_in_dropFunctionStatement4960;
   public static final BitSet FOLLOW_comparatorType_in_dropFunctionStatement4964;
   public static final BitSet FOLLOW_195_in_dropFunctionStatement4992;
   public static final BitSet FOLLOW_K_CREATE_in_createKeyspaceStatement5051;
   public static final BitSet FOLLOW_K_KEYSPACE_in_createKeyspaceStatement5053;
   public static final BitSet FOLLOW_K_IF_in_createKeyspaceStatement5056;
   public static final BitSet FOLLOW_K_NOT_in_createKeyspaceStatement5058;
   public static final BitSet FOLLOW_K_EXISTS_in_createKeyspaceStatement5060;
   public static final BitSet FOLLOW_keyspaceName_in_createKeyspaceStatement5069;
   public static final BitSet FOLLOW_K_WITH_in_createKeyspaceStatement5077;
   public static final BitSet FOLLOW_properties_in_createKeyspaceStatement5079;
   public static final BitSet FOLLOW_K_CREATE_in_createTableStatement5114;
   public static final BitSet FOLLOW_K_COLUMNFAMILY_in_createTableStatement5116;
   public static final BitSet FOLLOW_K_IF_in_createTableStatement5119;
   public static final BitSet FOLLOW_K_NOT_in_createTableStatement5121;
   public static final BitSet FOLLOW_K_EXISTS_in_createTableStatement5123;
   public static final BitSet FOLLOW_columnFamilyName_in_createTableStatement5138;
   public static final BitSet FOLLOW_cfamDefinition_in_createTableStatement5148;
   public static final BitSet FOLLOW_194_in_cfamDefinition5167;
   public static final BitSet FOLLOW_cfamColumns_in_cfamDefinition5169;
   public static final BitSet FOLLOW_198_in_cfamDefinition5174;
   public static final BitSet FOLLOW_cfamColumns_in_cfamDefinition5176;
   public static final BitSet FOLLOW_195_in_cfamDefinition5183;
   public static final BitSet FOLLOW_K_WITH_in_cfamDefinition5193;
   public static final BitSet FOLLOW_cfamProperty_in_cfamDefinition5195;
   public static final BitSet FOLLOW_K_AND_in_cfamDefinition5200;
   public static final BitSet FOLLOW_cfamProperty_in_cfamDefinition5202;
   public static final BitSet FOLLOW_ident_in_cfamColumns5237;
   public static final BitSet FOLLOW_comparatorType_in_cfamColumns5241;
   public static final BitSet FOLLOW_K_STATIC_in_cfamColumns5244;
   public static final BitSet FOLLOW_K_PRIMARY_in_cfamColumns5261;
   public static final BitSet FOLLOW_K_KEY_in_cfamColumns5263;
   public static final BitSet FOLLOW_K_PRIMARY_in_cfamColumns5275;
   public static final BitSet FOLLOW_K_KEY_in_cfamColumns5277;
   public static final BitSet FOLLOW_194_in_cfamColumns5279;
   public static final BitSet FOLLOW_pkDef_in_cfamColumns5281;
   public static final BitSet FOLLOW_198_in_cfamColumns5285;
   public static final BitSet FOLLOW_ident_in_cfamColumns5289;
   public static final BitSet FOLLOW_195_in_cfamColumns5296;
   public static final BitSet FOLLOW_ident_in_pkDef5333;
   public static final BitSet FOLLOW_194_in_pkDef5343;
   public static final BitSet FOLLOW_ident_in_pkDef5347;
   public static final BitSet FOLLOW_198_in_pkDef5353;
   public static final BitSet FOLLOW_ident_in_pkDef5357;
   public static final BitSet FOLLOW_195_in_pkDef5364;
   public static final BitSet FOLLOW_property_in_cfamProperty5382;
   public static final BitSet FOLLOW_K_COMPACT_in_cfamProperty5391;
   public static final BitSet FOLLOW_K_STORAGE_in_cfamProperty5393;
   public static final BitSet FOLLOW_K_CLUSTERING_in_cfamProperty5403;
   public static final BitSet FOLLOW_K_ORDER_in_cfamProperty5405;
   public static final BitSet FOLLOW_K_BY_in_cfamProperty5407;
   public static final BitSet FOLLOW_194_in_cfamProperty5409;
   public static final BitSet FOLLOW_cfamOrdering_in_cfamProperty5411;
   public static final BitSet FOLLOW_198_in_cfamProperty5415;
   public static final BitSet FOLLOW_cfamOrdering_in_cfamProperty5417;
   public static final BitSet FOLLOW_195_in_cfamProperty5422;
   public static final BitSet FOLLOW_ident_in_cfamOrdering5450;
   public static final BitSet FOLLOW_K_ASC_in_cfamOrdering5453;
   public static final BitSet FOLLOW_K_DESC_in_cfamOrdering5457;
   public static final BitSet FOLLOW_K_CREATE_in_createTypeStatement5496;
   public static final BitSet FOLLOW_K_TYPE_in_createTypeStatement5498;
   public static final BitSet FOLLOW_K_IF_in_createTypeStatement5501;
   public static final BitSet FOLLOW_K_NOT_in_createTypeStatement5503;
   public static final BitSet FOLLOW_K_EXISTS_in_createTypeStatement5505;
   public static final BitSet FOLLOW_userTypeName_in_createTypeStatement5523;
   public static final BitSet FOLLOW_194_in_createTypeStatement5536;
   public static final BitSet FOLLOW_typeColumns_in_createTypeStatement5538;
   public static final BitSet FOLLOW_198_in_createTypeStatement5543;
   public static final BitSet FOLLOW_typeColumns_in_createTypeStatement5545;
   public static final BitSet FOLLOW_195_in_createTypeStatement5552;
   public static final BitSet FOLLOW_fident_in_typeColumns5572;
   public static final BitSet FOLLOW_comparatorType_in_typeColumns5576;
   public static final BitSet FOLLOW_K_CREATE_in_createIndexStatement5611;
   public static final BitSet FOLLOW_K_CUSTOM_in_createIndexStatement5614;
   public static final BitSet FOLLOW_K_INDEX_in_createIndexStatement5620;
   public static final BitSet FOLLOW_K_IF_in_createIndexStatement5623;
   public static final BitSet FOLLOW_K_NOT_in_createIndexStatement5625;
   public static final BitSet FOLLOW_K_EXISTS_in_createIndexStatement5627;
   public static final BitSet FOLLOW_idxName_in_createIndexStatement5643;
   public static final BitSet FOLLOW_K_ON_in_createIndexStatement5648;
   public static final BitSet FOLLOW_columnFamilyName_in_createIndexStatement5652;
   public static final BitSet FOLLOW_194_in_createIndexStatement5654;
   public static final BitSet FOLLOW_indexIdent_in_createIndexStatement5657;
   public static final BitSet FOLLOW_198_in_createIndexStatement5661;
   public static final BitSet FOLLOW_indexIdent_in_createIndexStatement5663;
   public static final BitSet FOLLOW_195_in_createIndexStatement5670;
   public static final BitSet FOLLOW_K_USING_in_createIndexStatement5681;
   public static final BitSet FOLLOW_STRING_LITERAL_in_createIndexStatement5685;
   public static final BitSet FOLLOW_K_WITH_in_createIndexStatement5700;
   public static final BitSet FOLLOW_properties_in_createIndexStatement5702;
   public static final BitSet FOLLOW_cident_in_indexIdent5734;
   public static final BitSet FOLLOW_K_VALUES_in_indexIdent5762;
   public static final BitSet FOLLOW_194_in_indexIdent5764;
   public static final BitSet FOLLOW_cident_in_indexIdent5768;
   public static final BitSet FOLLOW_195_in_indexIdent5770;
   public static final BitSet FOLLOW_K_KEYS_in_indexIdent5781;
   public static final BitSet FOLLOW_194_in_indexIdent5783;
   public static final BitSet FOLLOW_cident_in_indexIdent5787;
   public static final BitSet FOLLOW_195_in_indexIdent5789;
   public static final BitSet FOLLOW_K_ENTRIES_in_indexIdent5802;
   public static final BitSet FOLLOW_194_in_indexIdent5804;
   public static final BitSet FOLLOW_cident_in_indexIdent5808;
   public static final BitSet FOLLOW_195_in_indexIdent5810;
   public static final BitSet FOLLOW_K_FULL_in_indexIdent5820;
   public static final BitSet FOLLOW_194_in_indexIdent5822;
   public static final BitSet FOLLOW_cident_in_indexIdent5826;
   public static final BitSet FOLLOW_195_in_indexIdent5828;
   public static final BitSet FOLLOW_K_CREATE_in_createMaterializedViewStatement5865;
   public static final BitSet FOLLOW_K_MATERIALIZED_in_createMaterializedViewStatement5867;
   public static final BitSet FOLLOW_K_VIEW_in_createMaterializedViewStatement5869;
   public static final BitSet FOLLOW_K_IF_in_createMaterializedViewStatement5872;
   public static final BitSet FOLLOW_K_NOT_in_createMaterializedViewStatement5874;
   public static final BitSet FOLLOW_K_EXISTS_in_createMaterializedViewStatement5876;
   public static final BitSet FOLLOW_columnFamilyName_in_createMaterializedViewStatement5884;
   public static final BitSet FOLLOW_K_AS_in_createMaterializedViewStatement5886;
   public static final BitSet FOLLOW_K_SELECT_in_createMaterializedViewStatement5896;
   public static final BitSet FOLLOW_selectors_in_createMaterializedViewStatement5900;
   public static final BitSet FOLLOW_K_FROM_in_createMaterializedViewStatement5902;
   public static final BitSet FOLLOW_columnFamilyName_in_createMaterializedViewStatement5906;
   public static final BitSet FOLLOW_K_WHERE_in_createMaterializedViewStatement5917;
   public static final BitSet FOLLOW_whereClause_in_createMaterializedViewStatement5921;
   public static final BitSet FOLLOW_K_PRIMARY_in_createMaterializedViewStatement5933;
   public static final BitSet FOLLOW_K_KEY_in_createMaterializedViewStatement5935;
   public static final BitSet FOLLOW_194_in_createMaterializedViewStatement5947;
   public static final BitSet FOLLOW_194_in_createMaterializedViewStatement5949;
   public static final BitSet FOLLOW_cident_in_createMaterializedViewStatement5953;
   public static final BitSet FOLLOW_198_in_createMaterializedViewStatement5959;
   public static final BitSet FOLLOW_cident_in_createMaterializedViewStatement5963;
   public static final BitSet FOLLOW_195_in_createMaterializedViewStatement5970;
   public static final BitSet FOLLOW_198_in_createMaterializedViewStatement5974;
   public static final BitSet FOLLOW_cident_in_createMaterializedViewStatement5978;
   public static final BitSet FOLLOW_195_in_createMaterializedViewStatement5985;
   public static final BitSet FOLLOW_194_in_createMaterializedViewStatement5995;
   public static final BitSet FOLLOW_cident_in_createMaterializedViewStatement5999;
   public static final BitSet FOLLOW_198_in_createMaterializedViewStatement6005;
   public static final BitSet FOLLOW_cident_in_createMaterializedViewStatement6009;
   public static final BitSet FOLLOW_195_in_createMaterializedViewStatement6016;
   public static final BitSet FOLLOW_K_WITH_in_createMaterializedViewStatement6048;
   public static final BitSet FOLLOW_cfamProperty_in_createMaterializedViewStatement6050;
   public static final BitSet FOLLOW_K_AND_in_createMaterializedViewStatement6055;
   public static final BitSet FOLLOW_cfamProperty_in_createMaterializedViewStatement6057;
   public static final BitSet FOLLOW_K_CREATE_in_createTriggerStatement6095;
   public static final BitSet FOLLOW_K_TRIGGER_in_createTriggerStatement6097;
   public static final BitSet FOLLOW_K_IF_in_createTriggerStatement6100;
   public static final BitSet FOLLOW_K_NOT_in_createTriggerStatement6102;
   public static final BitSet FOLLOW_K_EXISTS_in_createTriggerStatement6104;
   public static final BitSet FOLLOW_ident_in_createTriggerStatement6114;
   public static final BitSet FOLLOW_K_ON_in_createTriggerStatement6125;
   public static final BitSet FOLLOW_columnFamilyName_in_createTriggerStatement6129;
   public static final BitSet FOLLOW_K_USING_in_createTriggerStatement6131;
   public static final BitSet FOLLOW_STRING_LITERAL_in_createTriggerStatement6135;
   public static final BitSet FOLLOW_K_DROP_in_dropTriggerStatement6176;
   public static final BitSet FOLLOW_K_TRIGGER_in_dropTriggerStatement6178;
   public static final BitSet FOLLOW_K_IF_in_dropTriggerStatement6181;
   public static final BitSet FOLLOW_K_EXISTS_in_dropTriggerStatement6183;
   public static final BitSet FOLLOW_ident_in_dropTriggerStatement6193;
   public static final BitSet FOLLOW_K_ON_in_dropTriggerStatement6196;
   public static final BitSet FOLLOW_columnFamilyName_in_dropTriggerStatement6200;
   public static final BitSet FOLLOW_K_ALTER_in_alterKeyspaceStatement6240;
   public static final BitSet FOLLOW_K_KEYSPACE_in_alterKeyspaceStatement6242;
   public static final BitSet FOLLOW_keyspaceName_in_alterKeyspaceStatement6246;
   public static final BitSet FOLLOW_K_WITH_in_alterKeyspaceStatement6256;
   public static final BitSet FOLLOW_properties_in_alterKeyspaceStatement6258;
   public static final BitSet FOLLOW_K_ALTER_in_alterTableStatement6293;
   public static final BitSet FOLLOW_K_COLUMNFAMILY_in_alterTableStatement6295;
   public static final BitSet FOLLOW_columnFamilyName_in_alterTableStatement6299;
   public static final BitSet FOLLOW_K_ALTER_in_alterTableStatement6313;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6317;
   public static final BitSet FOLLOW_K_TYPE_in_alterTableStatement6320;
   public static final BitSet FOLLOW_comparatorType_in_alterTableStatement6324;
   public static final BitSet FOLLOW_K_ADD_in_alterTableStatement6343;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6358;
   public static final BitSet FOLLOW_comparatorType_in_alterTableStatement6363;
   public static final BitSet FOLLOW_cfisStatic_in_alterTableStatement6369;
   public static final BitSet FOLLOW_194_in_alterTableStatement6398;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6403;
   public static final BitSet FOLLOW_comparatorType_in_alterTableStatement6408;
   public static final BitSet FOLLOW_cfisStatic_in_alterTableStatement6413;
   public static final BitSet FOLLOW_198_in_alterTableStatement6442;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6446;
   public static final BitSet FOLLOW_comparatorType_in_alterTableStatement6451;
   public static final BitSet FOLLOW_cfisStatic_in_alterTableStatement6456;
   public static final BitSet FOLLOW_195_in_alterTableStatement6463;
   public static final BitSet FOLLOW_K_DROP_in_alterTableStatement6483;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6498;
   public static final BitSet FOLLOW_194_in_alterTableStatement6528;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6533;
   public static final BitSet FOLLOW_198_in_alterTableStatement6563;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6567;
   public static final BitSet FOLLOW_195_in_alterTableStatement6574;
   public static final BitSet FOLLOW_K_USING_in_alterTableStatement6602;
   public static final BitSet FOLLOW_K_TIMESTAMP_in_alterTableStatement6604;
   public static final BitSet FOLLOW_INTEGER_in_alterTableStatement6608;
   public static final BitSet FOLLOW_K_WITH_in_alterTableStatement6630;
   public static final BitSet FOLLOW_properties_in_alterTableStatement6633;
   public static final BitSet FOLLOW_K_RENAME_in_alterTableStatement6666;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6720;
   public static final BitSet FOLLOW_K_TO_in_alterTableStatement6722;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6726;
   public static final BitSet FOLLOW_K_AND_in_alterTableStatement6747;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6751;
   public static final BitSet FOLLOW_K_TO_in_alterTableStatement6753;
   public static final BitSet FOLLOW_schema_cident_in_alterTableStatement6757;
   public static final BitSet FOLLOW_K_STATIC_in_cfisStatic6810;
   public static final BitSet FOLLOW_K_ALTER_in_alterMaterializedViewStatement6846;
   public static final BitSet FOLLOW_K_MATERIALIZED_in_alterMaterializedViewStatement6848;
   public static final BitSet FOLLOW_K_VIEW_in_alterMaterializedViewStatement6850;
   public static final BitSet FOLLOW_columnFamilyName_in_alterMaterializedViewStatement6854;
   public static final BitSet FOLLOW_K_WITH_in_alterMaterializedViewStatement6866;
   public static final BitSet FOLLOW_properties_in_alterMaterializedViewStatement6868;
   public static final BitSet FOLLOW_K_ALTER_in_alterTypeStatement6899;
   public static final BitSet FOLLOW_K_TYPE_in_alterTypeStatement6901;
   public static final BitSet FOLLOW_userTypeName_in_alterTypeStatement6905;
   public static final BitSet FOLLOW_K_ALTER_in_alterTypeStatement6919;
   public static final BitSet FOLLOW_fident_in_alterTypeStatement6923;
   public static final BitSet FOLLOW_K_TYPE_in_alterTypeStatement6925;
   public static final BitSet FOLLOW_comparatorType_in_alterTypeStatement6929;
   public static final BitSet FOLLOW_K_ADD_in_alterTypeStatement6945;
   public static final BitSet FOLLOW_fident_in_alterTypeStatement6951;
   public static final BitSet FOLLOW_comparatorType_in_alterTypeStatement6955;
   public static final BitSet FOLLOW_K_RENAME_in_alterTypeStatement6978;
   public static final BitSet FOLLOW_renamedColumns_in_alterTypeStatement6982;
   public static final BitSet FOLLOW_fident_in_renamedColumns7043;
   public static final BitSet FOLLOW_K_TO_in_renamedColumns7045;
   public static final BitSet FOLLOW_fident_in_renamedColumns7049;
   public static final BitSet FOLLOW_K_AND_in_renamedColumns7055;
   public static final BitSet FOLLOW_fident_in_renamedColumns7059;
   public static final BitSet FOLLOW_K_TO_in_renamedColumns7061;
   public static final BitSet FOLLOW_fident_in_renamedColumns7065;
   public static final BitSet FOLLOW_K_DROP_in_dropKeyspaceStatement7102;
   public static final BitSet FOLLOW_K_KEYSPACE_in_dropKeyspaceStatement7104;
   public static final BitSet FOLLOW_K_IF_in_dropKeyspaceStatement7107;
   public static final BitSet FOLLOW_K_EXISTS_in_dropKeyspaceStatement7109;
   public static final BitSet FOLLOW_keyspaceName_in_dropKeyspaceStatement7118;
   public static final BitSet FOLLOW_K_DROP_in_dropTableStatement7152;
   public static final BitSet FOLLOW_K_COLUMNFAMILY_in_dropTableStatement7154;
   public static final BitSet FOLLOW_K_IF_in_dropTableStatement7157;
   public static final BitSet FOLLOW_K_EXISTS_in_dropTableStatement7159;
   public static final BitSet FOLLOW_columnFamilyName_in_dropTableStatement7168;
   public static final BitSet FOLLOW_K_DROP_in_dropTypeStatement7202;
   public static final BitSet FOLLOW_K_TYPE_in_dropTypeStatement7204;
   public static final BitSet FOLLOW_K_IF_in_dropTypeStatement7207;
   public static final BitSet FOLLOW_K_EXISTS_in_dropTypeStatement7209;
   public static final BitSet FOLLOW_userTypeName_in_dropTypeStatement7218;
   public static final BitSet FOLLOW_K_DROP_in_dropIndexStatement7252;
   public static final BitSet FOLLOW_K_INDEX_in_dropIndexStatement7254;
   public static final BitSet FOLLOW_K_IF_in_dropIndexStatement7257;
   public static final BitSet FOLLOW_K_EXISTS_in_dropIndexStatement7259;
   public static final BitSet FOLLOW_indexName_in_dropIndexStatement7268;
   public static final BitSet FOLLOW_K_DROP_in_dropMaterializedViewStatement7308;
   public static final BitSet FOLLOW_K_MATERIALIZED_in_dropMaterializedViewStatement7310;
   public static final BitSet FOLLOW_K_VIEW_in_dropMaterializedViewStatement7312;
   public static final BitSet FOLLOW_K_IF_in_dropMaterializedViewStatement7315;
   public static final BitSet FOLLOW_K_EXISTS_in_dropMaterializedViewStatement7317;
   public static final BitSet FOLLOW_columnFamilyName_in_dropMaterializedViewStatement7326;
   public static final BitSet FOLLOW_K_TRUNCATE_in_truncateStatement7357;
   public static final BitSet FOLLOW_K_COLUMNFAMILY_in_truncateStatement7360;
   public static final BitSet FOLLOW_columnFamilyName_in_truncateStatement7366;
   public static final BitSet FOLLOW_K_GRANT_in_grantPermissionsStatement7400;
   public static final BitSet FOLLOW_K_AUTHORIZE_in_grantPermissionsStatement7414;
   public static final BitSet FOLLOW_K_FOR_in_grantPermissionsStatement7416;
   public static final BitSet FOLLOW_permissionOrAll_in_grantPermissionsStatement7433;
   public static final BitSet FOLLOW_K_ON_in_grantPermissionsStatement7441;
   public static final BitSet FOLLOW_resourceFromInternalName_in_grantPermissionsStatement7457;
   public static final BitSet FOLLOW_resource_in_grantPermissionsStatement7465;
   public static final BitSet FOLLOW_K_TO_in_grantPermissionsStatement7477;
   public static final BitSet FOLLOW_userOrRoleName_in_grantPermissionsStatement7491;
   public static final BitSet FOLLOW_K_REVOKE_in_revokePermissionsStatement7531;
   public static final BitSet FOLLOW_K_AUTHORIZE_in_revokePermissionsStatement7545;
   public static final BitSet FOLLOW_K_FOR_in_revokePermissionsStatement7547;
   public static final BitSet FOLLOW_permissionOrAll_in_revokePermissionsStatement7564;
   public static final BitSet FOLLOW_K_ON_in_revokePermissionsStatement7572;
   public static final BitSet FOLLOW_resourceFromInternalName_in_revokePermissionsStatement7588;
   public static final BitSet FOLLOW_resource_in_revokePermissionsStatement7596;
   public static final BitSet FOLLOW_K_FROM_in_revokePermissionsStatement7608;
   public static final BitSet FOLLOW_userOrRoleName_in_revokePermissionsStatement7622;
   public static final BitSet FOLLOW_K_RESTRICT_in_restrictPermissionsStatement7662;
   public static final BitSet FOLLOW_permissionOrAll_in_restrictPermissionsStatement7674;
   public static final BitSet FOLLOW_K_ON_in_restrictPermissionsStatement7682;
   public static final BitSet FOLLOW_resourceFromInternalName_in_restrictPermissionsStatement7698;
   public static final BitSet FOLLOW_resource_in_restrictPermissionsStatement7706;
   public static final BitSet FOLLOW_K_TO_in_restrictPermissionsStatement7718;
   public static final BitSet FOLLOW_userOrRoleName_in_restrictPermissionsStatement7732;
   public static final BitSet FOLLOW_K_UNRESTRICT_in_unrestrictPermissionsStatement7772;
   public static final BitSet FOLLOW_permissionOrAll_in_unrestrictPermissionsStatement7784;
   public static final BitSet FOLLOW_K_ON_in_unrestrictPermissionsStatement7792;
   public static final BitSet FOLLOW_resourceFromInternalName_in_unrestrictPermissionsStatement7808;
   public static final BitSet FOLLOW_resource_in_unrestrictPermissionsStatement7816;
   public static final BitSet FOLLOW_K_FROM_in_unrestrictPermissionsStatement7828;
   public static final BitSet FOLLOW_userOrRoleName_in_unrestrictPermissionsStatement7842;
   public static final BitSet FOLLOW_K_GRANT_in_grantRoleStatement7873;
   public static final BitSet FOLLOW_userOrRoleName_in_grantRoleStatement7887;
   public static final BitSet FOLLOW_K_TO_in_grantRoleStatement7895;
   public static final BitSet FOLLOW_userOrRoleName_in_grantRoleStatement7909;
   public static final BitSet FOLLOW_K_REVOKE_in_revokeRoleStatement7940;
   public static final BitSet FOLLOW_userOrRoleName_in_revokeRoleStatement7954;
   public static final BitSet FOLLOW_K_FROM_in_revokeRoleStatement7962;
   public static final BitSet FOLLOW_userOrRoleName_in_revokeRoleStatement7976;
   public static final BitSet FOLLOW_K_LIST_in_listPermissionsStatement8014;
   public static final BitSet FOLLOW_permissionOrAll_in_listPermissionsStatement8026;
   public static final BitSet FOLLOW_K_ON_in_listPermissionsStatement8036;
   public static final BitSet FOLLOW_resource_in_listPermissionsStatement8038;
   public static final BitSet FOLLOW_K_OF_in_listPermissionsStatement8053;
   public static final BitSet FOLLOW_roleName_in_listPermissionsStatement8055;
   public static final BitSet FOLLOW_K_NORECURSIVE_in_listPermissionsStatement8069;
   public static final BitSet FOLLOW_IDENT_in_permissionDomain8099;
   public static final BitSet FOLLOW_STRING_LITERAL_in_permissionDomain8107;
   public static final BitSet FOLLOW_QUOTED_NAME_in_permissionDomain8115;
   public static final BitSet FOLLOW_unreserved_keyword_in_permissionDomain8123;
   public static final BitSet FOLLOW_IDENT_in_permissionName8140;
   public static final BitSet FOLLOW_STRING_LITERAL_in_permissionName8148;
   public static final BitSet FOLLOW_QUOTED_NAME_in_permissionName8156;
   public static final BitSet FOLLOW_corePermissionName_in_permissionName8164;
   public static final BitSet FOLLOW_unreserved_keyword_in_permissionName8172;
   public static final BitSet FOLLOW_corePermissionName_in_permission8273;
   public static final BitSet FOLLOW_permissionDomain_in_permission8285;
   public static final BitSet FOLLOW_201_in_permission8287;
   public static final BitSet FOLLOW_permissionName_in_permission8291;
   public static final BitSet FOLLOW_K_ALL_in_permissionOrAll8314;
   public static final BitSet FOLLOW_K_PERMISSIONS_in_permissionOrAll8318;
   public static final BitSet FOLLOW_K_PERMISSIONS_in_permissionOrAll8337;
   public static final BitSet FOLLOW_permission_in_permissionOrAll8349;
   public static final BitSet FOLLOW_K_PERMISSION_in_permissionOrAll8353;
   public static final BitSet FOLLOW_198_in_permissionOrAll8382;
   public static final BitSet FOLLOW_permission_in_permissionOrAll8386;
   public static final BitSet FOLLOW_K_PERMISSION_in_permissionOrAll8390;
   public static final BitSet FOLLOW_K_RESOURCE_in_resourceFromInternalName8427;
   public static final BitSet FOLLOW_194_in_resourceFromInternalName8429;
   public static final BitSet FOLLOW_STRING_LITERAL_in_resourceFromInternalName8433;
   public static final BitSet FOLLOW_195_in_resourceFromInternalName8435;
   public static final BitSet FOLLOW_dataResource_in_cassandraResource8460;
   public static final BitSet FOLLOW_roleResource_in_cassandraResource8472;
   public static final BitSet FOLLOW_functionResource_in_cassandraResource8484;
   public static final BitSet FOLLOW_jmxResource_in_cassandraResource8496;
   public static final BitSet FOLLOW_K_ALL_in_dataResource8519;
   public static final BitSet FOLLOW_K_KEYSPACES_in_dataResource8521;
   public static final BitSet FOLLOW_K_KEYSPACE_in_dataResource8531;
   public static final BitSet FOLLOW_keyspaceName_in_dataResource8537;
   public static final BitSet FOLLOW_K_COLUMNFAMILY_in_dataResource8549;
   public static final BitSet FOLLOW_columnFamilyName_in_dataResource8558;
   public static final BitSet FOLLOW_K_ALL_in_jmxResource8587;
   public static final BitSet FOLLOW_K_MBEANS_in_jmxResource8589;
   public static final BitSet FOLLOW_K_MBEAN_in_jmxResource8609;
   public static final BitSet FOLLOW_mbean_in_jmxResource8611;
   public static final BitSet FOLLOW_K_MBEANS_in_jmxResource8621;
   public static final BitSet FOLLOW_mbean_in_jmxResource8623;
   public static final BitSet FOLLOW_K_ALL_in_roleResource8646;
   public static final BitSet FOLLOW_K_ROLES_in_roleResource8648;
   public static final BitSet FOLLOW_K_ROLE_in_roleResource8658;
   public static final BitSet FOLLOW_userOrRoleName_in_roleResource8664;
   public static final BitSet FOLLOW_K_ALL_in_functionResource8696;
   public static final BitSet FOLLOW_K_FUNCTIONS_in_functionResource8698;
   public static final BitSet FOLLOW_K_ALL_in_functionResource8708;
   public static final BitSet FOLLOW_K_FUNCTIONS_in_functionResource8710;
   public static final BitSet FOLLOW_K_IN_in_functionResource8712;
   public static final BitSet FOLLOW_K_KEYSPACE_in_functionResource8714;
   public static final BitSet FOLLOW_keyspaceName_in_functionResource8720;
   public static final BitSet FOLLOW_K_FUNCTION_in_functionResource8735;
   public static final BitSet FOLLOW_functionName_in_functionResource8739;
   public static final BitSet FOLLOW_194_in_functionResource8757;
   public static final BitSet FOLLOW_comparatorType_in_functionResource8785;
   public static final BitSet FOLLOW_198_in_functionResource8803;
   public static final BitSet FOLLOW_comparatorType_in_functionResource8807;
   public static final BitSet FOLLOW_195_in_functionResource8835;
   public static final BitSet FOLLOW_K_CREATE_in_createUserStatement8883;
   public static final BitSet FOLLOW_K_USER_in_createUserStatement8885;
   public static final BitSet FOLLOW_K_IF_in_createUserStatement8888;
   public static final BitSet FOLLOW_K_NOT_in_createUserStatement8890;
   public static final BitSet FOLLOW_K_EXISTS_in_createUserStatement8892;
   public static final BitSet FOLLOW_username_in_createUserStatement8900;
   public static final BitSet FOLLOW_K_WITH_in_createUserStatement8912;
   public static final BitSet FOLLOW_userPassword_in_createUserStatement8914;
   public static final BitSet FOLLOW_K_SUPERUSER_in_createUserStatement8928;
   public static final BitSet FOLLOW_K_NOSUPERUSER_in_createUserStatement8934;
   public static final BitSet FOLLOW_K_ALTER_in_alterUserStatement8979;
   public static final BitSet FOLLOW_K_USER_in_alterUserStatement8981;
   public static final BitSet FOLLOW_username_in_alterUserStatement8985;
   public static final BitSet FOLLOW_K_WITH_in_alterUserStatement8997;
   public static final BitSet FOLLOW_userPassword_in_alterUserStatement8999;
   public static final BitSet FOLLOW_K_SUPERUSER_in_alterUserStatement9013;
   public static final BitSet FOLLOW_K_NOSUPERUSER_in_alterUserStatement9027;
   public static final BitSet FOLLOW_K_DROP_in_dropUserStatement9073;
   public static final BitSet FOLLOW_K_USER_in_dropUserStatement9075;
   public static final BitSet FOLLOW_K_IF_in_dropUserStatement9078;
   public static final BitSet FOLLOW_K_EXISTS_in_dropUserStatement9080;
   public static final BitSet FOLLOW_username_in_dropUserStatement9088;
   public static final BitSet FOLLOW_K_LIST_in_listUsersStatement9113;
   public static final BitSet FOLLOW_K_USERS_in_listUsersStatement9115;
   public static final BitSet FOLLOW_K_CREATE_in_createRoleStatement9149;
   public static final BitSet FOLLOW_K_ROLE_in_createRoleStatement9151;
   public static final BitSet FOLLOW_K_IF_in_createRoleStatement9154;
   public static final BitSet FOLLOW_K_NOT_in_createRoleStatement9156;
   public static final BitSet FOLLOW_K_EXISTS_in_createRoleStatement9158;
   public static final BitSet FOLLOW_userOrRoleName_in_createRoleStatement9166;
   public static final BitSet FOLLOW_K_WITH_in_createRoleStatement9176;
   public static final BitSet FOLLOW_roleOptions_in_createRoleStatement9178;
   public static final BitSet FOLLOW_K_ALTER_in_alterRoleStatement9222;
   public static final BitSet FOLLOW_K_ROLE_in_alterRoleStatement9224;
   public static final BitSet FOLLOW_userOrRoleName_in_alterRoleStatement9228;
   public static final BitSet FOLLOW_K_WITH_in_alterRoleStatement9238;
   public static final BitSet FOLLOW_roleOptions_in_alterRoleStatement9240;
   public static final BitSet FOLLOW_K_DROP_in_dropRoleStatement9284;
   public static final BitSet FOLLOW_K_ROLE_in_dropRoleStatement9286;
   public static final BitSet FOLLOW_K_IF_in_dropRoleStatement9289;
   public static final BitSet FOLLOW_K_EXISTS_in_dropRoleStatement9291;
   public static final BitSet FOLLOW_userOrRoleName_in_dropRoleStatement9299;
   public static final BitSet FOLLOW_K_LIST_in_listRolesStatement9339;
   public static final BitSet FOLLOW_K_ROLES_in_listRolesStatement9341;
   public static final BitSet FOLLOW_K_OF_in_listRolesStatement9351;
   public static final BitSet FOLLOW_roleName_in_listRolesStatement9353;
   public static final BitSet FOLLOW_K_NORECURSIVE_in_listRolesStatement9366;
   public static final BitSet FOLLOW_roleOption_in_roleOptions9397;
   public static final BitSet FOLLOW_K_AND_in_roleOptions9401;
   public static final BitSet FOLLOW_roleOption_in_roleOptions9403;
   public static final BitSet FOLLOW_K_PASSWORD_in_roleOption9425;
   public static final BitSet FOLLOW_207_in_roleOption9427;
   public static final BitSet FOLLOW_STRING_LITERAL_in_roleOption9431;
   public static final BitSet FOLLOW_K_OPTIONS_in_roleOption9442;
   public static final BitSet FOLLOW_207_in_roleOption9444;
   public static final BitSet FOLLOW_fullMapLiteral_in_roleOption9448;
   public static final BitSet FOLLOW_K_SUPERUSER_in_roleOption9459;
   public static final BitSet FOLLOW_207_in_roleOption9461;
   public static final BitSet FOLLOW_BOOLEAN_in_roleOption9465;
   public static final BitSet FOLLOW_K_LOGIN_in_roleOption9476;
   public static final BitSet FOLLOW_207_in_roleOption9478;
   public static final BitSet FOLLOW_BOOLEAN_in_roleOption9482;
   public static final BitSet FOLLOW_K_PASSWORD_in_userPassword9504;
   public static final BitSet FOLLOW_STRING_LITERAL_in_userPassword9508;
   public static final BitSet FOLLOW_EMPTY_QUOTED_NAME_in_cident9540;
   public static final BitSet FOLLOW_IDENT_in_cident9555;
   public static final BitSet FOLLOW_QUOTED_NAME_in_cident9580;
   public static final BitSet FOLLOW_unreserved_keyword_in_cident9599;
   public static final BitSet FOLLOW_IDENT_in_schema_cident9624;
   public static final BitSet FOLLOW_QUOTED_NAME_in_schema_cident9649;
   public static final BitSet FOLLOW_unreserved_keyword_in_schema_cident9668;
   public static final BitSet FOLLOW_IDENT_in_ident9694;
   public static final BitSet FOLLOW_QUOTED_NAME_in_ident9719;
   public static final BitSet FOLLOW_unreserved_keyword_in_ident9738;
   public static final BitSet FOLLOW_IDENT_in_fident9763;
   public static final BitSet FOLLOW_QUOTED_NAME_in_fident9788;
   public static final BitSet FOLLOW_unreserved_keyword_in_fident9807;
   public static final BitSet FOLLOW_IDENT_in_noncol_ident9833;
   public static final BitSet FOLLOW_QUOTED_NAME_in_noncol_ident9858;
   public static final BitSet FOLLOW_unreserved_keyword_in_noncol_ident9877;
   public static final BitSet FOLLOW_ksName_in_keyspaceName9910;
   public static final BitSet FOLLOW_ksName_in_indexName9944;
   public static final BitSet FOLLOW_201_in_indexName9947;
   public static final BitSet FOLLOW_idxName_in_indexName9951;
   public static final BitSet FOLLOW_ksName_in_columnFamilyName9983;
   public static final BitSet FOLLOW_201_in_columnFamilyName9986;
   public static final BitSet FOLLOW_cfName_in_columnFamilyName9990;
   public static final BitSet FOLLOW_noncol_ident_in_userTypeName10015;
   public static final BitSet FOLLOW_201_in_userTypeName10017;
   public static final BitSet FOLLOW_non_type_ident_in_userTypeName10023;
   public static final BitSet FOLLOW_roleName_in_userOrRoleName10055;
   public static final BitSet FOLLOW_IDENT_in_ksName10078;
   public static final BitSet FOLLOW_QUOTED_NAME_in_ksName10103;
   public static final BitSet FOLLOW_unreserved_keyword_in_ksName10122;
   public static final BitSet FOLLOW_QMARK_in_ksName10132;
   public static final BitSet FOLLOW_IDENT_in_cfName10154;
   public static final BitSet FOLLOW_QUOTED_NAME_in_cfName10179;
   public static final BitSet FOLLOW_unreserved_keyword_in_cfName10198;
   public static final BitSet FOLLOW_QMARK_in_cfName10208;
   public static final BitSet FOLLOW_IDENT_in_idxName10230;
   public static final BitSet FOLLOW_QUOTED_NAME_in_idxName10255;
   public static final BitSet FOLLOW_unreserved_keyword_in_idxName10274;
   public static final BitSet FOLLOW_QMARK_in_idxName10284;
   public static final BitSet FOLLOW_IDENT_in_roleName10306;
   public static final BitSet FOLLOW_STRING_LITERAL_in_roleName10331;
   public static final BitSet FOLLOW_QUOTED_NAME_in_roleName10347;
   public static final BitSet FOLLOW_unreserved_keyword_in_roleName10366;
   public static final BitSet FOLLOW_QMARK_in_roleName10376;
   public static final BitSet FOLLOW_STRING_LITERAL_in_constant10401;
   public static final BitSet FOLLOW_INTEGER_in_constant10413;
   public static final BitSet FOLLOW_FLOAT_in_constant10432;
   public static final BitSet FOLLOW_BOOLEAN_in_constant10453;
   public static final BitSet FOLLOW_DURATION_in_constant10472;
   public static final BitSet FOLLOW_UUID_in_constant10490;
   public static final BitSet FOLLOW_HEXNUMBER_in_constant10512;
   public static final BitSet FOLLOW_set_in_constant10528;
   public static final BitSet FOLLOW_K_POSITIVE_INFINITY_in_constant10548;
   public static final BitSet FOLLOW_K_NEGATIVE_INFINITY_in_constant10563;
   public static final BitSet FOLLOW_214_in_fullMapLiteral10604;
   public static final BitSet FOLLOW_term_in_fullMapLiteral10610;
   public static final BitSet FOLLOW_203_in_fullMapLiteral10612;
   public static final BitSet FOLLOW_term_in_fullMapLiteral10616;
   public static final BitSet FOLLOW_198_in_fullMapLiteral10622;
   public static final BitSet FOLLOW_term_in_fullMapLiteral10626;
   public static final BitSet FOLLOW_203_in_fullMapLiteral10628;
   public static final BitSet FOLLOW_term_in_fullMapLiteral10632;
   public static final BitSet FOLLOW_215_in_fullMapLiteral10648;
   public static final BitSet FOLLOW_mapLiteral_in_setOrMapLiteral10672;
   public static final BitSet FOLLOW_setLiteral_in_setOrMapLiteral10685;
   public static final BitSet FOLLOW_198_in_setLiteral10730;
   public static final BitSet FOLLOW_term_in_setLiteral10734;
   public static final BitSet FOLLOW_203_in_mapLiteral10779;
   public static final BitSet FOLLOW_term_in_mapLiteral10783;
   public static final BitSet FOLLOW_198_in_mapLiteral10789;
   public static final BitSet FOLLOW_term_in_mapLiteral10793;
   public static final BitSet FOLLOW_203_in_mapLiteral10795;
   public static final BitSet FOLLOW_term_in_mapLiteral10799;
   public static final BitSet FOLLOW_listLiteral_in_collectionLiteral10827;
   public static final BitSet FOLLOW_214_in_collectionLiteral10837;
   public static final BitSet FOLLOW_term_in_collectionLiteral10841;
   public static final BitSet FOLLOW_setOrMapLiteral_in_collectionLiteral10845;
   public static final BitSet FOLLOW_215_in_collectionLiteral10850;
   public static final BitSet FOLLOW_214_in_collectionLiteral10868;
   public static final BitSet FOLLOW_215_in_collectionLiteral10870;
   public static final BitSet FOLLOW_210_in_listLiteral10911;
   public static final BitSet FOLLOW_term_in_listLiteral10917;
   public static final BitSet FOLLOW_198_in_listLiteral10923;
   public static final BitSet FOLLOW_term_in_listLiteral10927;
   public static final BitSet FOLLOW_212_in_listLiteral10937;
   public static final BitSet FOLLOW_214_in_usertypeLiteral10981;
   public static final BitSet FOLLOW_fident_in_usertypeLiteral10985;
   public static final BitSet FOLLOW_203_in_usertypeLiteral10987;
   public static final BitSet FOLLOW_term_in_usertypeLiteral10991;
   public static final BitSet FOLLOW_198_in_usertypeLiteral10997;
   public static final BitSet FOLLOW_fident_in_usertypeLiteral11001;
   public static final BitSet FOLLOW_203_in_usertypeLiteral11003;
   public static final BitSet FOLLOW_term_in_usertypeLiteral11007;
   public static final BitSet FOLLOW_215_in_usertypeLiteral11014;
   public static final BitSet FOLLOW_194_in_tupleLiteral11051;
   public static final BitSet FOLLOW_term_in_tupleLiteral11055;
   public static final BitSet FOLLOW_198_in_tupleLiteral11061;
   public static final BitSet FOLLOW_term_in_tupleLiteral11065;
   public static final BitSet FOLLOW_195_in_tupleLiteral11072;
   public static final BitSet FOLLOW_constant_in_value11095;
   public static final BitSet FOLLOW_collectionLiteral_in_value11117;
   public static final BitSet FOLLOW_usertypeLiteral_in_value11130;
   public static final BitSet FOLLOW_tupleLiteral_in_value11145;
   public static final BitSet FOLLOW_K_NULL_in_value11161;
   public static final BitSet FOLLOW_203_in_value11185;
   public static final BitSet FOLLOW_noncol_ident_in_value11189;
   public static final BitSet FOLLOW_QMARK_in_value11200;
   public static final BitSet FOLLOW_INTEGER_in_intValue11240;
   public static final BitSet FOLLOW_203_in_intValue11254;
   public static final BitSet FOLLOW_noncol_ident_in_intValue11258;
   public static final BitSet FOLLOW_QMARK_in_intValue11269;
   public static final BitSet FOLLOW_keyspaceName_in_functionName11315;
   public static final BitSet FOLLOW_201_in_functionName11317;
   public static final BitSet FOLLOW_allowedFunctionName_in_functionName11323;
   public static final BitSet FOLLOW_IDENT_in_allowedFunctionName11350;
   public static final BitSet FOLLOW_QUOTED_NAME_in_allowedFunctionName11384;
   public static final BitSet FOLLOW_unreserved_function_keyword_in_allowedFunctionName11412;
   public static final BitSet FOLLOW_K_TOKEN_in_allowedFunctionName11422;
   public static final BitSet FOLLOW_K_COUNT_in_allowedFunctionName11454;
   public static final BitSet FOLLOW_functionName_in_function11501;
   public static final BitSet FOLLOW_194_in_function11503;
   public static final BitSet FOLLOW_195_in_function11505;
   public static final BitSet FOLLOW_functionName_in_function11535;
   public static final BitSet FOLLOW_194_in_function11537;
   public static final BitSet FOLLOW_functionArgs_in_function11541;
   public static final BitSet FOLLOW_195_in_function11543;
   public static final BitSet FOLLOW_term_in_functionArgs11576;
   public static final BitSet FOLLOW_198_in_functionArgs11582;
   public static final BitSet FOLLOW_term_in_functionArgs11586;
   public static final BitSet FOLLOW_termAddition_in_term11614;
   public static final BitSet FOLLOW_termMultiplication_in_termAddition11666;
   public static final BitSet FOLLOW_196_in_termAddition11682;
   public static final BitSet FOLLOW_termMultiplication_in_termAddition11686;
   public static final BitSet FOLLOW_199_in_termAddition11700;
   public static final BitSet FOLLOW_termMultiplication_in_termAddition11704;
   public static final BitSet FOLLOW_termGroup_in_termMultiplication11742;
   public static final BitSet FOLLOW_211_in_termMultiplication11758;
   public static final BitSet FOLLOW_termGroup_in_termMultiplication11762;
   public static final BitSet FOLLOW_202_in_termMultiplication11776;
   public static final BitSet FOLLOW_termGroup_in_termMultiplication11780;
   public static final BitSet FOLLOW_193_in_termMultiplication11794;
   public static final BitSet FOLLOW_termGroup_in_termMultiplication11798;
   public static final BitSet FOLLOW_simpleTerm_in_termGroup11834;
   public static final BitSet FOLLOW_199_in_termGroup11857;
   public static final BitSet FOLLOW_simpleTerm_in_termGroup11862;
   public static final BitSet FOLLOW_value_in_simpleTerm11895;
   public static final BitSet FOLLOW_function_in_simpleTerm11939;
   public static final BitSet FOLLOW_194_in_simpleTerm11978;
   public static final BitSet FOLLOW_comparatorType_in_simpleTerm11982;
   public static final BitSet FOLLOW_195_in_simpleTerm11984;
   public static final BitSet FOLLOW_simpleTerm_in_simpleTerm11988;
   public static final BitSet FOLLOW_cident_in_columnOperation12012;
   public static final BitSet FOLLOW_columnOperationDifferentiator_in_columnOperation12014;
   public static final BitSet FOLLOW_207_in_columnOperationDifferentiator12033;
   public static final BitSet FOLLOW_normalColumnOperation_in_columnOperationDifferentiator12035;
   public static final BitSet FOLLOW_shorthandColumnOperation_in_columnOperationDifferentiator12044;
   public static final BitSet FOLLOW_210_in_columnOperationDifferentiator12053;
   public static final BitSet FOLLOW_term_in_columnOperationDifferentiator12057;
   public static final BitSet FOLLOW_212_in_columnOperationDifferentiator12059;
   public static final BitSet FOLLOW_collectionColumnOperation_in_columnOperationDifferentiator12061;
   public static final BitSet FOLLOW_201_in_columnOperationDifferentiator12070;
   public static final BitSet FOLLOW_fident_in_columnOperationDifferentiator12074;
   public static final BitSet FOLLOW_udtColumnOperation_in_columnOperationDifferentiator12076;
   public static final BitSet FOLLOW_term_in_normalColumnOperation12097;
   public static final BitSet FOLLOW_196_in_normalColumnOperation12100;
   public static final BitSet FOLLOW_cident_in_normalColumnOperation12104;
   public static final BitSet FOLLOW_cident_in_normalColumnOperation12125;
   public static final BitSet FOLLOW_set_in_normalColumnOperation12129;
   public static final BitSet FOLLOW_term_in_normalColumnOperation12139;
   public static final BitSet FOLLOW_cident_in_normalColumnOperation12157;
   public static final BitSet FOLLOW_INTEGER_in_normalColumnOperation12161;
   public static final BitSet FOLLOW_set_in_shorthandColumnOperation12189;
   public static final BitSet FOLLOW_term_in_shorthandColumnOperation12199;
   public static final BitSet FOLLOW_207_in_collectionColumnOperation12225;
   public static final BitSet FOLLOW_term_in_collectionColumnOperation12229;
   public static final BitSet FOLLOW_207_in_udtColumnOperation12255;
   public static final BitSet FOLLOW_term_in_udtColumnOperation12259;
   public static final BitSet FOLLOW_cident_in_columnCondition12292;
   public static final BitSet FOLLOW_relationType_in_columnCondition12306;
   public static final BitSet FOLLOW_term_in_columnCondition12310;
   public static final BitSet FOLLOW_K_IN_in_columnCondition12324;
   public static final BitSet FOLLOW_singleColumnInValues_in_columnCondition12342;
   public static final BitSet FOLLOW_inMarker_in_columnCondition12362;
   public static final BitSet FOLLOW_210_in_columnCondition12390;
   public static final BitSet FOLLOW_term_in_columnCondition12394;
   public static final BitSet FOLLOW_212_in_columnCondition12396;
   public static final BitSet FOLLOW_relationType_in_columnCondition12414;
   public static final BitSet FOLLOW_term_in_columnCondition12418;
   public static final BitSet FOLLOW_K_IN_in_columnCondition12436;
   public static final BitSet FOLLOW_singleColumnInValues_in_columnCondition12458;
   public static final BitSet FOLLOW_inMarker_in_columnCondition12482;
   public static final BitSet FOLLOW_201_in_columnCondition12528;
   public static final BitSet FOLLOW_fident_in_columnCondition12532;
   public static final BitSet FOLLOW_relationType_in_columnCondition12550;
   public static final BitSet FOLLOW_term_in_columnCondition12554;
   public static final BitSet FOLLOW_K_IN_in_columnCondition12572;
   public static final BitSet FOLLOW_singleColumnInValues_in_columnCondition12594;
   public static final BitSet FOLLOW_inMarker_in_columnCondition12618;
   public static final BitSet FOLLOW_property_in_properties12680;
   public static final BitSet FOLLOW_K_AND_in_properties12684;
   public static final BitSet FOLLOW_property_in_properties12686;
   public static final BitSet FOLLOW_noncol_ident_in_property12709;
   public static final BitSet FOLLOW_207_in_property12711;
   public static final BitSet FOLLOW_propertyValue_in_property12715;
   public static final BitSet FOLLOW_noncol_ident_in_property12727;
   public static final BitSet FOLLOW_207_in_property12729;
   public static final BitSet FOLLOW_fullMapLiteral_in_property12733;
   public static final BitSet FOLLOW_constant_in_propertyValue12758;
   public static final BitSet FOLLOW_unreserved_keyword_in_propertyValue12780;
   public static final BitSet FOLLOW_207_in_relationType12803;
   public static final BitSet FOLLOW_205_in_relationType12814;
   public static final BitSet FOLLOW_206_in_relationType12825;
   public static final BitSet FOLLOW_208_in_relationType12835;
   public static final BitSet FOLLOW_209_in_relationType12846;
   public static final BitSet FOLLOW_192_in_relationType12856;
   public static final BitSet FOLLOW_cident_in_relation12878;
   public static final BitSet FOLLOW_relationType_in_relation12882;
   public static final BitSet FOLLOW_term_in_relation12886;
   public static final BitSet FOLLOW_cident_in_relation12898;
   public static final BitSet FOLLOW_K_LIKE_in_relation12900;
   public static final BitSet FOLLOW_term_in_relation12904;
   public static final BitSet FOLLOW_cident_in_relation12916;
   public static final BitSet FOLLOW_K_IS_in_relation12918;
   public static final BitSet FOLLOW_K_NOT_in_relation12920;
   public static final BitSet FOLLOW_K_NULL_in_relation12922;
   public static final BitSet FOLLOW_K_TOKEN_in_relation12932;
   public static final BitSet FOLLOW_tupleOfIdentifiers_in_relation12936;
   public static final BitSet FOLLOW_relationType_in_relation12940;
   public static final BitSet FOLLOW_term_in_relation12944;
   public static final BitSet FOLLOW_cident_in_relation12964;
   public static final BitSet FOLLOW_K_IN_in_relation12966;
   public static final BitSet FOLLOW_inMarker_in_relation12970;
   public static final BitSet FOLLOW_cident_in_relation12990;
   public static final BitSet FOLLOW_K_IN_in_relation12992;
   public static final BitSet FOLLOW_singleColumnInValues_in_relation12996;
   public static final BitSet FOLLOW_cident_in_relation13016;
   public static final BitSet FOLLOW_containsOperator_in_relation13020;
   public static final BitSet FOLLOW_term_in_relation13024;
   public static final BitSet FOLLOW_cident_in_relation13036;
   public static final BitSet FOLLOW_210_in_relation13038;
   public static final BitSet FOLLOW_term_in_relation13042;
   public static final BitSet FOLLOW_212_in_relation13044;
   public static final BitSet FOLLOW_relationType_in_relation13048;
   public static final BitSet FOLLOW_term_in_relation13052;
   public static final BitSet FOLLOW_tupleOfIdentifiers_in_relation13064;
   public static final BitSet FOLLOW_K_IN_in_relation13074;
   public static final BitSet FOLLOW_194_in_relation13088;
   public static final BitSet FOLLOW_195_in_relation13090;
   public static final BitSet FOLLOW_inMarkerForTuple_in_relation13122;
   public static final BitSet FOLLOW_tupleOfTupleLiterals_in_relation13156;
   public static final BitSet FOLLOW_tupleOfMarkersForTuples_in_relation13190;
   public static final BitSet FOLLOW_relationType_in_relation13232;
   public static final BitSet FOLLOW_tupleLiteral_in_relation13236;
   public static final BitSet FOLLOW_relationType_in_relation13262;
   public static final BitSet FOLLOW_markerForTuple_in_relation13266;
   public static final BitSet FOLLOW_194_in_relation13296;
   public static final BitSet FOLLOW_relation_in_relation13298;
   public static final BitSet FOLLOW_195_in_relation13301;
   public static final BitSet FOLLOW_K_CONTAINS_in_containsOperator13322;
   public static final BitSet FOLLOW_K_KEY_in_containsOperator13327;
   public static final BitSet FOLLOW_QMARK_in_inMarker13352;
   public static final BitSet FOLLOW_203_in_inMarker13362;
   public static final BitSet FOLLOW_noncol_ident_in_inMarker13366;
   public static final BitSet FOLLOW_194_in_tupleOfIdentifiers13398;
   public static final BitSet FOLLOW_cident_in_tupleOfIdentifiers13402;
   public static final BitSet FOLLOW_198_in_tupleOfIdentifiers13407;
   public static final BitSet FOLLOW_cident_in_tupleOfIdentifiers13411;
   public static final BitSet FOLLOW_195_in_tupleOfIdentifiers13417;
   public static final BitSet FOLLOW_194_in_singleColumnInValues13447;
   public static final BitSet FOLLOW_term_in_singleColumnInValues13455;
   public static final BitSet FOLLOW_198_in_singleColumnInValues13460;
   public static final BitSet FOLLOW_term_in_singleColumnInValues13464;
   public static final BitSet FOLLOW_195_in_singleColumnInValues13473;
   public static final BitSet FOLLOW_194_in_tupleOfTupleLiterals13503;
   public static final BitSet FOLLOW_tupleLiteral_in_tupleOfTupleLiterals13507;
   public static final BitSet FOLLOW_198_in_tupleOfTupleLiterals13512;
   public static final BitSet FOLLOW_tupleLiteral_in_tupleOfTupleLiterals13516;
   public static final BitSet FOLLOW_195_in_tupleOfTupleLiterals13522;
   public static final BitSet FOLLOW_QMARK_in_markerForTuple13543;
   public static final BitSet FOLLOW_203_in_markerForTuple13553;
   public static final BitSet FOLLOW_noncol_ident_in_markerForTuple13557;
   public static final BitSet FOLLOW_194_in_tupleOfMarkersForTuples13589;
   public static final BitSet FOLLOW_markerForTuple_in_tupleOfMarkersForTuples13593;
   public static final BitSet FOLLOW_198_in_tupleOfMarkersForTuples13598;
   public static final BitSet FOLLOW_markerForTuple_in_tupleOfMarkersForTuples13602;
   public static final BitSet FOLLOW_195_in_tupleOfMarkersForTuples13608;
   public static final BitSet FOLLOW_QMARK_in_inMarkerForTuple13629;
   public static final BitSet FOLLOW_203_in_inMarkerForTuple13639;
   public static final BitSet FOLLOW_noncol_ident_in_inMarkerForTuple13643;
   public static final BitSet FOLLOW_native_type_in_comparatorTypeWithoutTuples13668;
   public static final BitSet FOLLOW_collection_type_in_comparatorTypeWithoutTuples13684;
   public static final BitSet FOLLOW_userTypeName_in_comparatorTypeWithoutTuples13696;
   public static final BitSet FOLLOW_K_FROZEN_in_comparatorTypeWithoutTuples13708;
   public static final BitSet FOLLOW_205_in_comparatorTypeWithoutTuples13710;
   public static final BitSet FOLLOW_comparatorType_in_comparatorTypeWithoutTuples13714;
   public static final BitSet FOLLOW_208_in_comparatorTypeWithoutTuples13716;
   public static final BitSet FOLLOW_STRING_LITERAL_in_comparatorTypeWithoutTuples13734;
   public static final BitSet FOLLOW_comparatorTypeWithoutTuples_in_comparatorType13766;
   public static final BitSet FOLLOW_tuple_types_in_comparatorType13782;
   public static final BitSet FOLLOW_comparatorTypeWithoutTuples_in_comparatorTypeWithMultiCellTuple13827;
   public static final BitSet FOLLOW_tuple_types_in_comparatorTypeWithMultiCellTuple13843;
   public static final BitSet FOLLOW_K_ASCII_in_native_type13886;
   public static final BitSet FOLLOW_K_BIGINT_in_native_type13900;
   public static final BitSet FOLLOW_K_BLOB_in_native_type13913;
   public static final BitSet FOLLOW_K_BOOLEAN_in_native_type13928;
   public static final BitSet FOLLOW_K_COUNTER_in_native_type13940;
   public static final BitSet FOLLOW_K_DECIMAL_in_native_type13952;
   public static final BitSet FOLLOW_K_DOUBLE_in_native_type13964;
   public static final BitSet FOLLOW_K_DURATION_in_native_type13977;
   public static final BitSet FOLLOW_K_FLOAT_in_native_type13990;
   public static final BitSet FOLLOW_K_INET_in_native_type14004;
   public static final BitSet FOLLOW_K_INT_in_native_type14019;
   public static final BitSet FOLLOW_K_SMALLINT_in_native_type14035;
   public static final BitSet FOLLOW_K_TEXT_in_native_type14046;
   public static final BitSet FOLLOW_K_TIMESTAMP_in_native_type14061;
   public static final BitSet FOLLOW_K_TINYINT_in_native_type14071;
   public static final BitSet FOLLOW_K_UUID_in_native_type14083;
   public static final BitSet FOLLOW_K_VARCHAR_in_native_type14098;
   public static final BitSet FOLLOW_K_VARINT_in_native_type14110;
   public static final BitSet FOLLOW_K_TIMEUUID_in_native_type14123;
   public static final BitSet FOLLOW_K_DATE_in_native_type14134;
   public static final BitSet FOLLOW_K_TIME_in_native_type14149;
   public static final BitSet FOLLOW_K_MAP_in_collection_type14177;
   public static final BitSet FOLLOW_205_in_collection_type14180;
   public static final BitSet FOLLOW_comparatorType_in_collection_type14184;
   public static final BitSet FOLLOW_198_in_collection_type14186;
   public static final BitSet FOLLOW_comparatorType_in_collection_type14190;
   public static final BitSet FOLLOW_208_in_collection_type14192;
   public static final BitSet FOLLOW_K_LIST_in_collection_type14210;
   public static final BitSet FOLLOW_205_in_collection_type14212;
   public static final BitSet FOLLOW_comparatorType_in_collection_type14216;
   public static final BitSet FOLLOW_208_in_collection_type14218;
   public static final BitSet FOLLOW_K_SET_in_collection_type14236;
   public static final BitSet FOLLOW_205_in_collection_type14239;
   public static final BitSet FOLLOW_comparatorType_in_collection_type14243;
   public static final BitSet FOLLOW_208_in_collection_type14245;
   public static final BitSet FOLLOW_K_TUPLE_in_tuple_types14276;
   public static final BitSet FOLLOW_205_in_tuple_types14278;
   public static final BitSet FOLLOW_comparatorType_in_tuple_types14282;
   public static final BitSet FOLLOW_198_in_tuple_types14287;
   public static final BitSet FOLLOW_comparatorType_in_tuple_types14291;
   public static final BitSet FOLLOW_208_in_tuple_types14297;
   public static final BitSet FOLLOW_IDENT_in_username14314;
   public static final BitSet FOLLOW_STRING_LITERAL_in_username14322;
   public static final BitSet FOLLOW_QUOTED_NAME_in_username14330;
   public static final BitSet FOLLOW_STRING_LITERAL_in_mbean14349;
   public static final BitSet FOLLOW_IDENT_in_non_type_ident14374;
   public static final BitSet FOLLOW_QUOTED_NAME_in_non_type_ident14405;
   public static final BitSet FOLLOW_basic_unreserved_keyword_in_non_type_ident14430;
   public static final BitSet FOLLOW_K_KEY_in_non_type_ident14442;
   public static final BitSet FOLLOW_unreserved_function_keyword_in_unreserved_keyword14485;
   public static final BitSet FOLLOW_set_in_unreserved_keyword14501;
   public static final BitSet FOLLOW_basic_unreserved_keyword_in_unreserved_function_keyword14552;
   public static final BitSet FOLLOW_native_type_in_unreserved_function_keyword14564;
   public static final BitSet FOLLOW_set_in_basic_unreserved_keyword14602;
   public static final BitSet FOLLOW_K_JSON_in_synpred1_Parser1090;
   public static final BitSet FOLLOW_selectClause_in_synpred1_Parser1092;
   public static final BitSet FOLLOW_K_DISTINCT_in_synpred2_Parser1293;
   public static final BitSet FOLLOW_selectors_in_synpred2_Parser1295;
   public static final BitSet FOLLOW_selectionGroupWithField_in_synpred3_Parser1624;
   public static final BitSet FOLLOW_selectionTypeHint_in_synpred4_Parser1911;

   public Cql_Parser(TokenStream input, CqlParser gCql) {
      this(input, new RecognizerSharedState(), gCql);
   }

   public Cql_Parser(TokenStream input, RecognizerSharedState state, CqlParser gCql) {
      super(input, state);
      this.listeners = new ArrayList();
      this.bindVariables = new ArrayList();
      this.dfa1 = new Cql_Parser.DFA1(this);
      this.dfa2 = new Cql_Parser.DFA2(this);
      this.dfa11 = new Cql_Parser.DFA11(this);
      this.dfa17 = new Cql_Parser.DFA17(this);
      this.dfa22 = new Cql_Parser.DFA22(this);
      this.dfa30 = new Cql_Parser.DFA30(this);
      this.dfa31 = new Cql_Parser.DFA31(this);
      this.dfa61 = new Cql_Parser.DFA61(this);
      this.dfa185 = new Cql_Parser.DFA185(this);
      this.dfa186 = new Cql_Parser.DFA186(this);
      this.dfa204 = new Cql_Parser.DFA204(this);
      this.dfa206 = new Cql_Parser.DFA206(this);
      this.dfa208 = new Cql_Parser.DFA208(this);
      this.dfa210 = new Cql_Parser.DFA210(this);
      this.dfa213 = new Cql_Parser.DFA213(this);
      this.dfa216 = new Cql_Parser.DFA216(this);
      this.dfa224 = new Cql_Parser.DFA224(this);
      this.dfa229 = new Cql_Parser.DFA229(this);
      this.dfa228 = new Cql_Parser.DFA228(this);
      this.dfa239 = new Cql_Parser.DFA239(this);
      this.gCql = gCql;
      this.gParent = gCql;
   }

   public void addErrorListener(ErrorListener listener) {
      this.listeners.add(listener);
   }

   public void addRawUpdate(List<Pair<ColumnMetadata.Raw, Operation.RawUpdate>> operations, ColumnMetadata.Raw key, Operation.RawUpdate update) {
      Iterator var4 = operations.iterator();

      while(var4.hasNext()) {
         Pair<ColumnMetadata.Raw, Operation.RawUpdate> p = (Pair)var4.next();
         if(((ColumnMetadata.Raw)p.left).equals(key) && !((Operation.RawUpdate)p.right).isCompatibleWith(update)) {
            this.addRecognitionError("Multiple incompatible setting of column " + key);
         }
      }

      operations.add(Pair.create(key, update));
   }

   protected void addRecognitionError(String msg) {
      int i = 0;

      for(int m = this.listeners.size(); i < m; ++i) {
         ((ErrorListener)this.listeners.get(i)).syntaxError(this, msg);
      }

   }

   public final String allowedFunctionName() throws RecognitionException {
      String s = null;
      Token f = null;
      String u = null;

      try {
         try {
            int alt207 = true;
            byte alt207;
            switch(this.input.LA(1)) {
            case 23:
               alt207 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 45:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 61:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 89:
            case 90:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 149:
            case 150:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return s;
               }

               NoViableAltException nvae = new NoViableAltException("", 207, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 46:
            case 48:
            case 49:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
               alt207 = 3;
               break;
            case 50:
               alt207 = 5;
               break;
            case 147:
               alt207 = 4;
               break;
            case 178:
               alt207 = 2;
            }

            switch(alt207) {
            case 1:
               f = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_allowedFunctionName11350);
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  s = (f != null?f.getText():null).toLowerCase();
               }
               break;
            case 2:
               f = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_allowedFunctionName11384);
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  s = f != null?f.getText():null;
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_unreserved_function_keyword_in_allowedFunctionName11412);
               u = this.unreserved_function_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  s = u;
               }
               break;
            case 4:
               this.match(this.input, 147, FOLLOW_K_TOKEN_in_allowedFunctionName11422);
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  s = "token";
               }
               break;
            case 5:
               this.match(this.input, 50, FOLLOW_K_COUNT_in_allowedFunctionName11454);
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  s = "count";
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return s;
      } finally {
         ;
      }
   }

   public final AlterKeyspaceStatement alterKeyspaceStatement() throws RecognitionException {
      AlterKeyspaceStatement expr = null;
      String ks = null;
      KeyspaceAttributes attrs = new KeyspaceAttributes();

      try {
         try {
            this.match(this.input, 31, FOLLOW_K_ALTER_in_alterKeyspaceStatement6240);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 92, FOLLOW_K_KEYSPACE_in_alterKeyspaceStatement6242);
            if(this.state.failed) {
               return expr;
            }

            this.pushFollow(FOLLOW_keyspaceName_in_alterKeyspaceStatement6246);
            ks = this.keyspaceName();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 167, FOLLOW_K_WITH_in_alterKeyspaceStatement6256);
            if(this.state.failed) {
               return expr;
            }

            this.pushFollow(FOLLOW_properties_in_alterKeyspaceStatement6258);
            this.properties(attrs);
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            if(this.state.backtracking == 0) {
               expr = new AlterKeyspaceStatement(ks, attrs);
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final AlterViewStatement alterMaterializedViewStatement() throws RecognitionException {
      AlterViewStatement expr = null;
      CFName name = null;
      TableAttributes attrs = new TableAttributes();

      try {
         try {
            this.match(this.input, 31, FOLLOW_K_ALTER_in_alterMaterializedViewStatement6846);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 100, FOLLOW_K_MATERIALIZED_in_alterMaterializedViewStatement6848);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 165, FOLLOW_K_VIEW_in_alterMaterializedViewStatement6850);
            if(this.state.failed) {
               return expr;
            }

            this.pushFollow(FOLLOW_columnFamilyName_in_alterMaterializedViewStatement6854);
            name = this.columnFamilyName();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 167, FOLLOW_K_WITH_in_alterMaterializedViewStatement6866);
            if(this.state.failed) {
               return expr;
            }

            this.pushFollow(FOLLOW_properties_in_alterMaterializedViewStatement6868);
            this.properties(attrs);
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            if(this.state.backtracking == 0) {
               expr = new AlterViewStatement(name, attrs);
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final AlterRoleStatement alterRoleStatement() throws RecognitionException {
      AlterRoleStatement stmt = null;
      RoleName name = null;
      RoleOptions opts = new RoleOptions();

      try {
         try {
            this.match(this.input, 31, FOLLOW_K_ALTER_in_alterRoleStatement9222);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 131, FOLLOW_K_ROLE_in_alterRoleStatement9224);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_userOrRoleName_in_alterRoleStatement9228);
            name = this.userOrRoleName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            int alt174 = 2;
            int LA174_0 = this.input.LA(1);
            if(LA174_0 == 167) {
               alt174 = 1;
            }

            switch(alt174) {
            case 1:
               this.match(this.input, 167, FOLLOW_K_WITH_in_alterRoleStatement9238);
               if(this.state.failed) {
                  return stmt;
               }

               this.pushFollow(FOLLOW_roleOptions_in_alterRoleStatement9240);
               this.roleOptions(opts);
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }
            default:
               if(this.state.backtracking == 0) {
                  stmt = new AlterRoleStatement(name, opts);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final AlterTableStatement alterTableStatement() throws RecognitionException {
      AlterTableStatement expr = null;
      Token t = null;
      CFName cf = null;
      ColumnMetadata.Raw id = null;
      CQL3Type.Raw v = null;
      ColumnMetadata.Raw aid = null;
      boolean b1 = false;
      ColumnMetadata.Raw id1 = null;
      CQL3Type.Raw v1 = null;
      ColumnMetadata.Raw idn = null;
      CQL3Type.Raw vn = null;
      boolean bn = false;
      ColumnMetadata.Raw toId1 = null;
      ColumnMetadata.Raw toIdn = null;
      AlterTableStatement.Type type = null;
      TableAttributes attrs = new TableAttributes();
      Map<ColumnMetadata.Raw, ColumnMetadata.Raw> renames = new HashMap();
      List<AlterTableStatementColumn> colNameList = new ArrayList();
      Long deleteTimestamp = null;

      try {
         try {
            this.match(this.input, 31, FOLLOW_K_ALTER_in_alterTableStatement6293);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 47, FOLLOW_K_COLUMNFAMILY_in_alterTableStatement6295);
            if(this.state.failed) {
               return expr;
            }

            this.pushFollow(FOLLOW_columnFamilyName_in_alterTableStatement6299);
            cf = this.columnFamilyName();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            int alt131 = true;
            byte alt131;
            switch(this.input.LA(1)) {
            case 27:
               alt131 = 2;
               break;
            case 31:
               alt131 = 1;
               break;
            case 63:
               alt131 = 3;
               break;
            case 125:
               alt131 = 5;
               break;
            case 167:
               alt131 = 4;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return expr;
               }

               NoViableAltException nvae = new NoViableAltException("", 131, 0, this.input);
               throw nvae;
            }

            byte alt130;
            int LA130_0;
            byte alt125;
            int LA125_0;
            boolean alt128;
            NoViableAltException nvae;
            label1349:
            switch(alt131) {
            case 1:
               this.match(this.input, 31, FOLLOW_K_ALTER_in_alterTableStatement6313);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6317);
               id = this.schema_cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 152, FOLLOW_K_TYPE_in_alterTableStatement6320);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_comparatorType_in_alterTableStatement6324);
               v = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  type = AlterTableStatement.Type.ALTER;
               }

               if(this.state.backtracking == 0) {
                  colNameList.add(new AlterTableStatementColumn(id, v));
               }
               break;
            case 2:
               this.match(this.input, 27, FOLLOW_K_ADD_in_alterTableStatement6343);
               if(this.state.failed) {
                  return expr;
               }

               alt128 = true;
               LA130_0 = this.input.LA(1);
               if(LA130_0 != 23 && (LA130_0 < 28 || LA130_0 > 29) && LA130_0 != 34 && LA130_0 != 36 && (LA130_0 < 40 || LA130_0 > 42) && (LA130_0 < 44 || LA130_0 > 46) && (LA130_0 < 48 || LA130_0 > 51) && (LA130_0 < 53 || LA130_0 > 55) && (LA130_0 < 60 || LA130_0 > 62) && LA130_0 != 64 && (LA130_0 < 67 || LA130_0 > 70) && LA130_0 != 73 && (LA130_0 < 75 || LA130_0 > 76) && LA130_0 != 78 && (LA130_0 < 82 || LA130_0 > 84) && LA130_0 != 86 && (LA130_0 < 89 || LA130_0 > 91) && (LA130_0 < 93 || LA130_0 > 95) && (LA130_0 < 97 || LA130_0 > 99) && LA130_0 != 104 && LA130_0 != 107 && LA130_0 != 109 && LA130_0 != 114 && (LA130_0 < 117 || LA130_0 > 121) && LA130_0 != 127 && LA130_0 != 129 && (LA130_0 < 131 || LA130_0 > 132) && (LA130_0 < 135 || LA130_0 > 145) && LA130_0 != 148 && (LA130_0 < 150 || LA130_0 > 152) && (LA130_0 < 158 || LA130_0 > 159) && (LA130_0 < 161 || LA130_0 > 164) && LA130_0 != 168 && LA130_0 != 178) {
                  if(LA130_0 != 194) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return expr;
                     }

                     nvae = new NoViableAltException("", 126, 0, this.input);
                     throw nvae;
                  }

                  alt130 = 2;
               } else {
                  alt130 = 1;
               }

               switch(alt130) {
               case 1:
                  this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6358);
                  aid = this.schema_cident();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_comparatorType_in_alterTableStatement6363);
                  v = this.comparatorType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_cfisStatic_in_alterTableStatement6369);
                  b1 = this.cfisStatic();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     colNameList.add(new AlterTableStatementColumn(aid, v, b1));
                  }
                  break;
               case 2:
                  this.match(this.input, 194, FOLLOW_194_in_alterTableStatement6398);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6403);
                  id1 = this.schema_cident();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_comparatorType_in_alterTableStatement6408);
                  v1 = this.comparatorType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_cfisStatic_in_alterTableStatement6413);
                  b1 = this.cfisStatic();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     colNameList.add(new AlterTableStatementColumn(id1, v1, b1));
                  }

                  label1250:
                  while(true) {
                     alt125 = 2;
                     LA125_0 = this.input.LA(1);
                     if(LA125_0 == 198) {
                        alt125 = 1;
                     }

                     switch(alt125) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_alterTableStatement6442);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6446);
                        idn = this.schema_cident();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_comparatorType_in_alterTableStatement6451);
                        vn = this.comparatorType();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_cfisStatic_in_alterTableStatement6456);
                        bn = this.cfisStatic();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }

                        if(this.state.backtracking == 0) {
                           colNameList.add(new AlterTableStatementColumn(idn, vn, bn));
                        }
                        break;
                     default:
                        this.match(this.input, 195, FOLLOW_195_in_alterTableStatement6463);
                        if(this.state.failed) {
                           return expr;
                        }
                        break label1250;
                     }
                  }
               }

               if(this.state.backtracking == 0) {
                  type = AlterTableStatement.Type.ADD;
               }
               break;
            case 3:
               this.match(this.input, 63, FOLLOW_K_DROP_in_alterTableStatement6483);
               if(this.state.failed) {
                  return expr;
               }

               alt128 = true;
               LA130_0 = this.input.LA(1);
               if(LA130_0 != 23 && (LA130_0 < 28 || LA130_0 > 29) && LA130_0 != 34 && LA130_0 != 36 && (LA130_0 < 40 || LA130_0 > 42) && (LA130_0 < 44 || LA130_0 > 46) && (LA130_0 < 48 || LA130_0 > 51) && (LA130_0 < 53 || LA130_0 > 55) && (LA130_0 < 60 || LA130_0 > 62) && LA130_0 != 64 && (LA130_0 < 67 || LA130_0 > 70) && LA130_0 != 73 && (LA130_0 < 75 || LA130_0 > 76) && LA130_0 != 78 && (LA130_0 < 82 || LA130_0 > 84) && LA130_0 != 86 && (LA130_0 < 89 || LA130_0 > 91) && (LA130_0 < 93 || LA130_0 > 95) && (LA130_0 < 97 || LA130_0 > 99) && LA130_0 != 104 && LA130_0 != 107 && LA130_0 != 109 && LA130_0 != 114 && (LA130_0 < 117 || LA130_0 > 121) && LA130_0 != 127 && LA130_0 != 129 && (LA130_0 < 131 || LA130_0 > 132) && (LA130_0 < 135 || LA130_0 > 145) && LA130_0 != 148 && (LA130_0 < 150 || LA130_0 > 152) && (LA130_0 < 158 || LA130_0 > 159) && (LA130_0 < 161 || LA130_0 > 164) && LA130_0 != 168 && LA130_0 != 178) {
                  if(LA130_0 != 194) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return expr;
                     }

                     nvae = new NoViableAltException("", 128, 0, this.input);
                     throw nvae;
                  }

                  alt130 = 2;
               } else {
                  alt130 = 1;
               }

               switch(alt130) {
               case 1:
                  this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6498);
                  id = this.schema_cident();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     colNameList.add(new AlterTableStatementColumn(id));
                  }
                  break;
               case 2:
                  this.match(this.input, 194, FOLLOW_194_in_alterTableStatement6528);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6533);
                  id1 = this.schema_cident();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     colNameList.add(new AlterTableStatementColumn(id1));
                  }

                  label1146:
                  while(true) {
                     alt125 = 2;
                     LA125_0 = this.input.LA(1);
                     if(LA125_0 == 198) {
                        alt125 = 1;
                     }

                     switch(alt125) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_alterTableStatement6563);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6567);
                        idn = this.schema_cident();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }

                        if(this.state.backtracking == 0) {
                           colNameList.add(new AlterTableStatementColumn(idn));
                        }
                        break;
                     default:
                        this.match(this.input, 195, FOLLOW_195_in_alterTableStatement6574);
                        if(this.state.failed) {
                           return expr;
                        }
                        break label1146;
                     }
                  }
               }

               alt125 = 2;
               LA125_0 = this.input.LA(1);
               if(LA125_0 == 160) {
                  alt125 = 1;
               }

               switch(alt125) {
               case 1:
                  this.match(this.input, 160, FOLLOW_K_USING_in_alterTableStatement6602);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 143, FOLLOW_K_TIMESTAMP_in_alterTableStatement6604);
                  if(this.state.failed) {
                     return expr;
                  }

                  t = (Token)this.match(this.input, 24, FOLLOW_INTEGER_in_alterTableStatement6608);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     deleteTimestamp = Long.valueOf(Long.parseLong(Constants.Literal.integer(t != null?t.getText():null).getText()));
                  }
               default:
                  if(this.state.backtracking == 0) {
                     type = AlterTableStatement.Type.DROP;
                  }
                  break label1349;
               }
            case 4:
               this.match(this.input, 167, FOLLOW_K_WITH_in_alterTableStatement6630);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_properties_in_alterTableStatement6633);
               this.properties(attrs);
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  type = AlterTableStatement.Type.OPTS;
               }
               break;
            case 5:
               this.match(this.input, 125, FOLLOW_K_RENAME_in_alterTableStatement6666);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  type = AlterTableStatement.Type.RENAME;
               }

               this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6720);
               id1 = this.schema_cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 146, FOLLOW_K_TO_in_alterTableStatement6722);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6726);
               toId1 = this.schema_cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  renames.put(id1, toId1);
               }

               label1139:
               while(true) {
                  alt130 = 2;
                  LA130_0 = this.input.LA(1);
                  if(LA130_0 == 32) {
                     alt130 = 1;
                  }

                  switch(alt130) {
                  case 1:
                     this.match(this.input, 32, FOLLOW_K_AND_in_alterTableStatement6747);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6751);
                     idn = this.schema_cident();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     this.match(this.input, 146, FOLLOW_K_TO_in_alterTableStatement6753);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_schema_cident_in_alterTableStatement6757);
                     toIdn = this.schema_cident();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        renames.put(idn, toIdn);
                     }
                     break;
                  default:
                     break label1139;
                  }
               }
            }

            if(this.state.backtracking == 0) {
               expr = new AlterTableStatement(cf, type, colNameList, attrs, renames, deleteTimestamp);
            }
         } catch (RecognitionException var29) {
            this.reportError(var29);
            this.recover(this.input, var29);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final AlterTypeStatement alterTypeStatement() throws RecognitionException {
      AlterTypeStatement expr = null;
      UTName name = null;
      FieldIdentifier f = null;
      CQL3Type.Raw v = null;
      Map r = null;

      try {
         try {
            this.match(this.input, 31, FOLLOW_K_ALTER_in_alterTypeStatement6899);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 152, FOLLOW_K_TYPE_in_alterTypeStatement6901);
            if(this.state.failed) {
               return expr;
            }

            this.pushFollow(FOLLOW_userTypeName_in_alterTypeStatement6905);
            name = this.userTypeName();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            int alt133 = true;
            byte alt133;
            switch(this.input.LA(1)) {
            case 27:
               alt133 = 2;
               break;
            case 31:
               alt133 = 1;
               break;
            case 125:
               alt133 = 3;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return expr;
               }

               NoViableAltException nvae = new NoViableAltException("", 133, 0, this.input);
               throw nvae;
            }

            switch(alt133) {
            case 1:
               this.match(this.input, 31, FOLLOW_K_ALTER_in_alterTypeStatement6919);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_fident_in_alterTypeStatement6923);
               f = this.fident();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 152, FOLLOW_K_TYPE_in_alterTypeStatement6925);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_comparatorType_in_alterTypeStatement6929);
               v = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  expr = AlterTypeStatement.alter(name, f, v);
               }
               break;
            case 2:
               this.match(this.input, 27, FOLLOW_K_ADD_in_alterTypeStatement6945);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_fident_in_alterTypeStatement6951);
               f = this.fident();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_comparatorType_in_alterTypeStatement6955);
               v = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  expr = AlterTypeStatement.addition(name, f, v);
               }
               break;
            case 3:
               this.match(this.input, 125, FOLLOW_K_RENAME_in_alterTypeStatement6978);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_renamedColumns_in_alterTypeStatement6982);
               r = this.renamedColumns();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  expr = AlterTypeStatement.renames(name, r);
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final AlterRoleStatement alterUserStatement() throws RecognitionException {
      AlterRoleStatement stmt = null;
      ParserRuleReturnScope u = null;
      RoleOptions opts = new RoleOptions();
      RoleName name = new RoleName();

      try {
         try {
            this.match(this.input, 31, FOLLOW_K_ALTER_in_alterUserStatement8979);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 158, FOLLOW_K_USER_in_alterUserStatement8981);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_username_in_alterUserStatement8985);
            u = this.username();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            if(this.state.backtracking == 0) {
               name.setName(u != null?this.input.toString(u.start, u.stop):null, true);
            }

            int alt169 = 2;
            int LA169_0 = this.input.LA(1);
            if(LA169_0 == 167) {
               alt169 = 1;
            }

            switch(alt169) {
            case 1:
               this.match(this.input, 167, FOLLOW_K_WITH_in_alterUserStatement8997);
               if(this.state.failed) {
                  return stmt;
               }

               this.pushFollow(FOLLOW_userPassword_in_alterUserStatement8999);
               this.userPassword(opts);
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }
            default:
               int alt170 = 3;
               int LA170_0 = this.input.LA(1);
               if(LA170_0 == 140) {
                  alt170 = 1;
               } else if(LA170_0 == 109) {
                  alt170 = 2;
               }

               switch(alt170) {
               case 1:
                  this.match(this.input, 140, FOLLOW_K_SUPERUSER_in_alterUserStatement9013);
                  if(this.state.failed) {
                     return stmt;
                  }

                  if(this.state.backtracking == 0) {
                     opts.setOption(IRoleManager.Option.SUPERUSER, Boolean.valueOf(true));
                  }
                  break;
               case 2:
                  this.match(this.input, 109, FOLLOW_K_NOSUPERUSER_in_alterUserStatement9027);
                  if(this.state.failed) {
                     return stmt;
                  }

                  if(this.state.backtracking == 0) {
                     opts.setOption(IRoleManager.Option.SUPERUSER, Boolean.valueOf(false));
                  }
               }

               if(this.state.backtracking == 0) {
                  stmt = new AlterRoleStatement(name, opts);
               }
            }
         } catch (RecognitionException var13) {
            this.reportError(var13);
            this.recover(this.input, var13);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final String basic_unreserved_keyword() throws RecognitionException {
      String str = null;
      Token k = null;

      try {
         try {
            k = this.input.LT(1);
            if((this.input.LA(1) < 28 || this.input.LA(1) > 29) && this.input.LA(1) != 34 && this.input.LA(1) != 44 && this.input.LA(1) != 46 && (this.input.LA(1) < 48 || this.input.LA(1) > 49) && this.input.LA(1) != 53 && this.input.LA(1) != 60 && (this.input.LA(1) < 67 || this.input.LA(1) > 69) && this.input.LA(1) != 73 && (this.input.LA(1) < 75 || this.input.LA(1) > 76) && this.input.LA(1) != 78 && (this.input.LA(1) < 83 || this.input.LA(1) > 84) && this.input.LA(1) != 91 && (this.input.LA(1) < 93 || this.input.LA(1) > 95) && (this.input.LA(1) < 97 || this.input.LA(1) > 99) && this.input.LA(1) != 104 && this.input.LA(1) != 107 && this.input.LA(1) != 109 && this.input.LA(1) != 114 && (this.input.LA(1) < 117 || this.input.LA(1) > 121) && this.input.LA(1) != 127 && this.input.LA(1) != 129 && (this.input.LA(1) < 131 || this.input.LA(1) > 132) && this.input.LA(1) != 135 && (this.input.LA(1) < 137 || this.input.LA(1) > 140) && this.input.LA(1) != 148 && (this.input.LA(1) < 151 || this.input.LA(1) > 152) && (this.input.LA(1) < 158 || this.input.LA(1) > 159) && this.input.LA(1) != 162) {
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return str;
               }

               MismatchedSetException mse = new MismatchedSetException((BitSet)null, this.input);
               throw mse;
            }

            this.input.consume();
            this.state.errorRecovery = false;
            this.state.failed = false;
            if(this.state.backtracking == 0) {
               str = k != null?k.getText():null;
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return str;
      } finally {
         ;
      }
   }

   public final BatchStatement.Parsed batchStatement() throws RecognitionException {
      BatchStatement.Parsed expr = null;
      ModificationStatement.Parsed s = null;
      BatchStatement.Type type = BatchStatement.Type.LOGGED;
      List<ModificationStatement.Parsed> statements = new ArrayList();
      Attributes.Raw attrs = new Attributes.Raw();

      try {
         this.match(this.input, 39, FOLLOW_K_BEGIN_in_batchStatement3958);
         if(this.state.failed) {
            return expr;
         } else {
            int alt62 = 3;
            int LA62_0 = this.input.LA(1);
            if(LA62_0 == 153) {
               alt62 = 1;
            } else if(LA62_0 == 51) {
               alt62 = 2;
            }

            switch(alt62) {
            case 1:
               this.match(this.input, 153, FOLLOW_K_UNLOGGED_in_batchStatement3968);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  type = BatchStatement.Type.UNLOGGED;
               }
               break;
            case 2:
               this.match(this.input, 51, FOLLOW_K_COUNTER_in_batchStatement3974);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  type = BatchStatement.Type.COUNTER;
               }
            }

            this.match(this.input, 38, FOLLOW_K_BATCH_in_batchStatement3987);
            if(this.state.failed) {
               return expr;
            } else {
               int alt63 = 2;
               int LA63_0 = this.input.LA(1);
               if(LA63_0 == 160) {
                  alt63 = 1;
               }

               switch(alt63) {
               case 1:
                  this.pushFollow(FOLLOW_usingClause_in_batchStatement3991);
                  this.usingClause(attrs);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }
               }

               while(true) {
                  int alt65 = 2;
                  int LA65_0 = this.input.LA(1);
                  if(LA65_0 == 57 || LA65_0 == 85 || LA65_0 == 156) {
                     alt65 = 1;
                  }

                  switch(alt65) {
                  case 1:
                     this.pushFollow(FOLLOW_batchStatementObjective_in_batchStatement4011);
                     s = this.batchStatementObjective();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     int alt64 = 2;
                     int LA64_0 = this.input.LA(1);
                     if(LA64_0 == 204) {
                        alt64 = 1;
                     }

                     switch(alt64) {
                     case 1:
                        this.match(this.input, 204, FOLLOW_204_in_batchStatement4013);
                        if(this.state.failed) {
                           return expr;
                        }
                     default:
                        if(this.state.backtracking == 0) {
                           statements.add(s);
                        }
                        continue;
                     }
                  default:
                     this.match(this.input, 33, FOLLOW_K_APPLY_in_batchStatement4027);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.match(this.input, 38, FOLLOW_K_BATCH_in_batchStatement4029);
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        expr = new BatchStatement.Parsed(type, attrs, statements);
                     }

                     return expr;
                  }
               }
            }
         }
      } catch (RecognitionException var18) {
         this.reportError(var18);
         this.recover(this.input, var18);
         return expr;
      } finally {
         ;
      }
   }

   public final ModificationStatement.Parsed batchStatementObjective() throws RecognitionException {
      ModificationStatement.Parsed statement = null;
      ModificationStatement.Parsed i = null;
      UpdateStatement.ParsedUpdate u = null;
      DeleteStatement.Parsed d = null;

      try {
         try {
            int alt66 = true;
            byte alt66;
            switch(this.input.LA(1)) {
            case 57:
               alt66 = 3;
               break;
            case 85:
               alt66 = 1;
               break;
            case 156:
               alt66 = 2;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return (ModificationStatement.Parsed)statement;
               }

               NoViableAltException nvae = new NoViableAltException("", 66, 0, this.input);
               throw nvae;
            }

            switch(alt66) {
            case 1:
               this.pushFollow(FOLLOW_insertStatement_in_batchStatementObjective4060);
               i = this.insertStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ModificationStatement.Parsed)statement;
               }

               if(this.state.backtracking == 0) {
                  statement = i;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_updateStatement_in_batchStatementObjective4073);
               u = this.updateStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ModificationStatement.Parsed)statement;
               }

               if(this.state.backtracking == 0) {
                  statement = u;
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_deleteStatement_in_batchStatementObjective4086);
               d = this.deleteStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ModificationStatement.Parsed)statement;
               }

               if(this.state.backtracking == 0) {
                  statement = d;
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return (ModificationStatement.Parsed)statement;
      } finally {
         ;
      }
   }

   public String canonicalizeObjectName(String s, boolean enforcePattern) {
      if("".equals(s)) {
         this.addRecognitionError("Empty JMX object name supplied");
      }

      if("*:*".equals(s)) {
         this.addRecognitionError("Please use ALL MBEANS instead of wildcard pattern");
      }

      try {
         ObjectName objectName = ObjectName.getInstance(s);
         if(enforcePattern && !objectName.isPattern()) {
            this.addRecognitionError("Plural form used, but non-pattern JMX object name specified (" + s + ")");
         }

         return objectName.getCanonicalName();
      } catch (MalformedObjectNameException var4) {
         this.addRecognitionError(s + " is not a valid JMX object name");
         return s;
      }
   }

   public final IResource cassandraResource() throws RecognitionException {
      IResource res = null;
      DataResource d = null;
      RoleResource r = null;
      FunctionResource f = null;
      JMXResource j = null;

      try {
         try {
            byte alt158;
            int alt158 = true;
            int nvaeMark;
            int nvaeMark;
            NoViableAltException nvae;
            label2059:
            switch(this.input.LA(1)) {
            case 23:
            case 28:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
            case 177:
            case 178:
               alt158 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 96:
            case 100:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return (IResource)res;
               }

               NoViableAltException nvae = new NoViableAltException("", 158, 0, this.input);
               throw nvae;
            case 29:
               switch(this.input.LA(2)) {
               case -1:
               case 72:
               case 93:
               case 108:
               case 112:
               case 146:
               case 201:
               case 204:
                  alt158 = 1;
                  break label2059;
               case 76:
                  alt158 = 3;
                  break label2059;
               case 102:
                  alt158 = 4;
                  break label2059;
               case 132:
                  alt158 = 2;
                  break label2059;
               default:
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return (IResource)res;
                  }

                  nvaeMark = this.input.mark();

                  try {
                     this.input.consume();
                     NoViableAltException nvae = new NoViableAltException("", 158, 1, this.input);
                     throw nvae;
                  } finally {
                     this.input.rewind(nvaeMark);
                  }
               }
            case 75:
               nvaeMark = this.input.LA(2);
               if(nvaeMark != -1 && nvaeMark != 72 && nvaeMark != 108 && nvaeMark != 112 && nvaeMark != 146 && nvaeMark != 201 && nvaeMark != 204) {
                  if(nvaeMark != 23 && (nvaeMark < 28 || nvaeMark > 29) && nvaeMark != 34 && nvaeMark != 36 && (nvaeMark < 40 || nvaeMark > 42) && (nvaeMark < 44 || nvaeMark > 46) && (nvaeMark < 48 || nvaeMark > 51) && (nvaeMark < 53 || nvaeMark > 55) && (nvaeMark < 60 || nvaeMark > 62) && nvaeMark != 64 && (nvaeMark < 67 || nvaeMark > 70) && nvaeMark != 73 && (nvaeMark < 75 || nvaeMark > 76) && nvaeMark != 78 && (nvaeMark < 82 || nvaeMark > 84) && nvaeMark != 86 && (nvaeMark < 89 || nvaeMark > 91) && (nvaeMark < 93 || nvaeMark > 95) && (nvaeMark < 97 || nvaeMark > 99) && nvaeMark != 104 && nvaeMark != 107 && nvaeMark != 109 && nvaeMark != 114 && (nvaeMark < 117 || nvaeMark > 121) && nvaeMark != 127 && nvaeMark != 129 && (nvaeMark < 131 || nvaeMark > 132) && (nvaeMark < 135 || nvaeMark > 145) && (nvaeMark < 147 || nvaeMark > 148) && (nvaeMark < 150 || nvaeMark > 152) && (nvaeMark < 158 || nvaeMark > 159) && (nvaeMark < 161 || nvaeMark > 164) && nvaeMark != 168 && (nvaeMark < 177 || nvaeMark > 178)) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return (IResource)res;
                     }

                     nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        nvae = new NoViableAltException("", 158, 4, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt158 = 3;
               } else {
                  alt158 = 1;
               }
               break;
            case 101:
            case 102:
               alt158 = 4;
               break;
            case 131:
               nvaeMark = this.input.LA(2);
               if(nvaeMark != -1 && nvaeMark != 72 && nvaeMark != 108 && nvaeMark != 112 && nvaeMark != 146 && nvaeMark != 201 && nvaeMark != 204) {
                  if(nvaeMark != 23 && (nvaeMark < 28 || nvaeMark > 29) && nvaeMark != 34 && nvaeMark != 36 && (nvaeMark < 40 || nvaeMark > 42) && (nvaeMark < 44 || nvaeMark > 46) && (nvaeMark < 48 || nvaeMark > 51) && (nvaeMark < 53 || nvaeMark > 55) && (nvaeMark < 60 || nvaeMark > 62) && nvaeMark != 64 && (nvaeMark < 67 || nvaeMark > 70) && nvaeMark != 73 && (nvaeMark < 75 || nvaeMark > 76) && nvaeMark != 78 && (nvaeMark < 82 || nvaeMark > 84) && nvaeMark != 86 && (nvaeMark < 89 || nvaeMark > 91) && (nvaeMark < 93 || nvaeMark > 95) && (nvaeMark < 97 || nvaeMark > 99) && nvaeMark != 104 && nvaeMark != 107 && nvaeMark != 109 && nvaeMark != 114 && (nvaeMark < 117 || nvaeMark > 121) && nvaeMark != 127 && nvaeMark != 129 && (nvaeMark < 131 || nvaeMark > 132) && (nvaeMark < 135 || nvaeMark > 145) && nvaeMark != 148 && (nvaeMark < 150 || nvaeMark > 152) && (nvaeMark < 158 || nvaeMark > 159) && (nvaeMark < 161 || nvaeMark > 164) && nvaeMark != 168 && (nvaeMark < 177 || nvaeMark > 178) && nvaeMark != 182) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return (IResource)res;
                     }

                     nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        nvae = new NoViableAltException("", 158, 3, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt158 = 2;
               } else {
                  alt158 = 1;
               }
            }

            switch(alt158) {
            case 1:
               this.pushFollow(FOLLOW_dataResource_in_cassandraResource8460);
               d = this.dataResource();
               --this.state._fsp;
               if(this.state.failed) {
                  return (IResource)res;
               }

               if(this.state.backtracking == 0) {
                  res = d;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_roleResource_in_cassandraResource8472);
               r = this.roleResource();
               --this.state._fsp;
               if(this.state.failed) {
                  return (IResource)res;
               }

               if(this.state.backtracking == 0) {
                  res = r;
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_functionResource_in_cassandraResource8484);
               f = this.functionResource();
               --this.state._fsp;
               if(this.state.failed) {
                  return (IResource)res;
               }

               if(this.state.backtracking == 0) {
                  res = f;
               }
               break;
            case 4:
               this.pushFollow(FOLLOW_jmxResource_in_cassandraResource8496);
               j = this.jmxResource();
               --this.state._fsp;
               if(this.state.failed) {
                  return (IResource)res;
               }

               if(this.state.backtracking == 0) {
                  res = j;
               }
            }
         } catch (RecognitionException var36) {
            this.reportError(var36);
            this.recover(this.input, var36);
         }

         return (IResource)res;
      } finally {
         ;
      }
   }

   public final void cfName(CFName name) throws RecognitionException {
      Token t = null;
      String k = null;

      try {
         try {
            int alt189 = true;
            byte alt189;
            switch(this.input.LA(1)) {
            case 23:
               alt189 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               NoViableAltException nvae = new NoViableAltException("", 189, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt189 = 3;
               break;
            case 177:
               alt189 = 4;
               break;
            case 178:
               alt189 = 2;
            }

            switch(alt189) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_cfName10154);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setColumnFamily(t != null?t.getText():null, false);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_cfName10179);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setColumnFamily(t != null?t.getText():null, true);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_unreserved_keyword_in_cfName10198);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setColumnFamily(k, false);
               }
               break;
            case 4:
               this.match(this.input, 177, FOLLOW_QMARK_in_cfName10208);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  this.addRecognitionError("Bind variables cannot be used for table names");
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

      } finally {
         ;
      }
   }

   public final void cfamColumns(CreateTableStatement.RawStatement expr) throws RecognitionException {
      ColumnIdentifier k = null;
      CQL3Type.Raw v = null;
      ColumnIdentifier c = null;
      boolean isStatic = false;

      try {
         try {
            int alt98 = true;
            int LA98_0 = this.input.LA(1);
            byte alt98;
            if(LA98_0 != 23 && (LA98_0 < 28 || LA98_0 > 29) && LA98_0 != 34 && LA98_0 != 36 && (LA98_0 < 40 || LA98_0 > 42) && (LA98_0 < 44 || LA98_0 > 46) && (LA98_0 < 48 || LA98_0 > 51) && (LA98_0 < 53 || LA98_0 > 55) && (LA98_0 < 60 || LA98_0 > 62) && LA98_0 != 64 && (LA98_0 < 67 || LA98_0 > 70) && LA98_0 != 73 && (LA98_0 < 75 || LA98_0 > 76) && LA98_0 != 78 && (LA98_0 < 82 || LA98_0 > 84) && LA98_0 != 86 && (LA98_0 < 89 || LA98_0 > 91) && (LA98_0 < 93 || LA98_0 > 95) && (LA98_0 < 97 || LA98_0 > 99) && LA98_0 != 104 && LA98_0 != 107 && LA98_0 != 109 && LA98_0 != 114 && (LA98_0 < 117 || LA98_0 > 121) && LA98_0 != 127 && LA98_0 != 129 && (LA98_0 < 131 || LA98_0 > 132) && (LA98_0 < 135 || LA98_0 > 145) && LA98_0 != 148 && (LA98_0 < 150 || LA98_0 > 152) && (LA98_0 < 158 || LA98_0 > 159) && (LA98_0 < 161 || LA98_0 > 164) && LA98_0 != 168 && LA98_0 != 178) {
               if(LA98_0 != 124) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 98, 0, this.input);
                  throw nvae;
               }

               alt98 = 2;
            } else {
               alt98 = 1;
            }

            byte alt97;
            int LA97_0;
            switch(alt98) {
            case 1:
               this.pushFollow(FOLLOW_ident_in_cfamColumns5237);
               k = this.ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_comparatorType_in_cfamColumns5241);
               v = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               alt97 = 2;
               LA97_0 = this.input.LA(1);
               if(LA97_0 == 137) {
                  alt97 = 1;
               }

               switch(alt97) {
               case 1:
                  this.match(this.input, 137, FOLLOW_K_STATIC_in_cfamColumns5244);
                  if(this.state.failed) {
                     return;
                  }

                  if(this.state.backtracking == 0) {
                     isStatic = true;
                  }
               default:
                  if(this.state.backtracking == 0) {
                     expr.addDefinition(k, v, isStatic);
                  }

                  int alt96 = 2;
                  int LA96_0 = this.input.LA(1);
                  if(LA96_0 == 124) {
                     alt96 = 1;
                  }

                  switch(alt96) {
                  case 1:
                     this.match(this.input, 124, FOLLOW_K_PRIMARY_in_cfamColumns5261);
                     if(this.state.failed) {
                        return;
                     }

                     this.match(this.input, 90, FOLLOW_K_KEY_in_cfamColumns5263);
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        expr.addKeyAliases(Collections.singletonList(k));
                     }

                     return;
                  default:
                     return;
                  }
               }
            case 2:
               this.match(this.input, 124, FOLLOW_K_PRIMARY_in_cfamColumns5275);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 90, FOLLOW_K_KEY_in_cfamColumns5277);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 194, FOLLOW_194_in_cfamColumns5279);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_pkDef_in_cfamColumns5281);
               this.pkDef(expr);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               while(true) {
                  alt97 = 2;
                  LA97_0 = this.input.LA(1);
                  if(LA97_0 == 198) {
                     alt97 = 1;
                  }

                  switch(alt97) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_cfamColumns5285);
                     if(this.state.failed) {
                        return;
                     }

                     this.pushFollow(FOLLOW_ident_in_cfamColumns5289);
                     c = this.ident();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        expr.addColumnAlias(c);
                     }
                     break;
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_cfamColumns5296);
                     if(this.state.failed) {
                        return;
                     }

                     return;
                  }
               }
            }
         } catch (RecognitionException var15) {
            this.reportError(var15);
            this.recover(this.input, var15);
         }

      } finally {
         ;
      }
   }

   public final void cfamDefinition(CreateTableStatement.RawStatement expr) throws RecognitionException {
      try {
         this.match(this.input, 194, FOLLOW_194_in_cfamDefinition5167);
         if(!this.state.failed) {
            this.pushFollow(FOLLOW_cfamColumns_in_cfamDefinition5169);
            this.cfamColumns(expr);
            --this.state._fsp;
            if(!this.state.failed) {
               while(true) {
                  int alt94 = 2;
                  int LA94_0 = this.input.LA(1);
                  if(LA94_0 == 198) {
                     alt94 = 1;
                  }

                  byte alt93;
                  int LA93_0;
                  switch(alt94) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_cfamDefinition5174);
                     if(this.state.failed) {
                        return;
                     }

                     alt93 = 2;
                     LA93_0 = this.input.LA(1);
                     if(LA93_0 == 23 || LA93_0 >= 28 && LA93_0 <= 29 || LA93_0 == 34 || LA93_0 == 36 || LA93_0 >= 40 && LA93_0 <= 42 || LA93_0 >= 44 && LA93_0 <= 46 || LA93_0 >= 48 && LA93_0 <= 51 || LA93_0 >= 53 && LA93_0 <= 55 || LA93_0 >= 60 && LA93_0 <= 62 || LA93_0 == 64 || LA93_0 >= 67 && LA93_0 <= 70 || LA93_0 == 73 || LA93_0 >= 75 && LA93_0 <= 76 || LA93_0 == 78 || LA93_0 >= 82 && LA93_0 <= 84 || LA93_0 == 86 || LA93_0 >= 89 && LA93_0 <= 91 || LA93_0 >= 93 && LA93_0 <= 95 || LA93_0 >= 97 && LA93_0 <= 99 || LA93_0 == 104 || LA93_0 == 107 || LA93_0 == 109 || LA93_0 == 114 || LA93_0 >= 117 && LA93_0 <= 121 || LA93_0 == 124 || LA93_0 == 127 || LA93_0 == 129 || LA93_0 >= 131 && LA93_0 <= 132 || LA93_0 >= 135 && LA93_0 <= 145 || LA93_0 == 148 || LA93_0 >= 150 && LA93_0 <= 152 || LA93_0 >= 158 && LA93_0 <= 159 || LA93_0 >= 161 && LA93_0 <= 164 || LA93_0 == 168 || LA93_0 == 178) {
                        alt93 = 1;
                     }

                     switch(alt93) {
                     case 1:
                        this.pushFollow(FOLLOW_cfamColumns_in_cfamDefinition5176);
                        this.cfamColumns(expr);
                        --this.state._fsp;
                        if(this.state.failed) {
                           return;
                        }
                        continue;
                     }
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_cfamDefinition5183);
                     if(this.state.failed) {
                        return;
                     }

                     alt94 = 2;
                     LA94_0 = this.input.LA(1);
                     if(LA94_0 == 167) {
                        alt94 = 1;
                     }

                     switch(alt94) {
                     case 1:
                        this.match(this.input, 167, FOLLOW_K_WITH_in_cfamDefinition5193);
                        if(this.state.failed) {
                           return;
                        }

                        this.pushFollow(FOLLOW_cfamProperty_in_cfamDefinition5195);
                        this.cfamProperty(expr.properties);
                        --this.state._fsp;
                        if(this.state.failed) {
                           return;
                        }

                        while(true) {
                           alt93 = 2;
                           LA93_0 = this.input.LA(1);
                           if(LA93_0 == 32) {
                              alt93 = 1;
                           }

                           switch(alt93) {
                           case 1:
                              this.match(this.input, 32, FOLLOW_K_AND_in_cfamDefinition5200);
                              if(this.state.failed) {
                                 return;
                              }

                              this.pushFollow(FOLLOW_cfamProperty_in_cfamDefinition5202);
                              this.cfamProperty(expr.properties);
                              --this.state._fsp;
                              if(this.state.failed) {
                                 return;
                              }
                              break;
                           default:
                              return;
                           }
                        }
                     }
                  }
               }
            }
         }
      } catch (RecognitionException var9) {
         this.reportError(var9);
         this.recover(this.input, var9);
      } finally {
         ;
      }
   }

   public final void cfamOrdering(CFProperties props) throws RecognitionException {
      ColumnIdentifier k = null;
      boolean reversed = false;

      try {
         try {
            this.pushFollow(FOLLOW_ident_in_cfamOrdering5450);
            k = this.ident();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            int alt103 = true;
            int LA103_0 = this.input.LA(1);
            byte alt103;
            if(LA103_0 == 35) {
               alt103 = 1;
            } else {
               if(LA103_0 != 58) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 103, 0, this.input);
                  throw nvae;
               }

               alt103 = 2;
            }

            switch(alt103) {
            case 1:
               this.match(this.input, 35, FOLLOW_K_ASC_in_cfamOrdering5453);
               if(this.state.failed) {
                  return;
               }
               break;
            case 2:
               this.match(this.input, 58, FOLLOW_K_DESC_in_cfamOrdering5457);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  reversed = true;
               }
            }

            if(this.state.backtracking == 0) {
               props.setOrdering(k, reversed);
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

      } finally {
         ;
      }
   }

   public final void cfamProperty(CFProperties props) throws RecognitionException {
      try {
         try {
            int alt102 = true;
            int LA102_2;
            int LA101_0;
            NoViableAltException nvae;
            byte alt102;
            switch(this.input.LA(1)) {
            case 23:
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
            case 178:
               alt102 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               NoViableAltException nvae = new NoViableAltException("", 102, 0, this.input);
               throw nvae;
            case 46:
               LA102_2 = this.input.LA(2);
               if(LA102_2 == 116) {
                  alt102 = 3;
               } else {
                  if(LA102_2 != 207) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return;
                     }

                     LA101_0 = this.input.mark();

                     try {
                        this.input.consume();
                        nvae = new NoViableAltException("", 102, 3, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(LA101_0);
                     }
                  }

                  alt102 = 1;
               }
               break;
            case 48:
               LA102_2 = this.input.LA(2);
               if(LA102_2 == 138) {
                  alt102 = 2;
               } else {
                  if(LA102_2 != 207) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return;
                     }

                     LA101_0 = this.input.mark();

                     try {
                        this.input.consume();
                        nvae = new NoViableAltException("", 102, 2, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(LA101_0);
                     }
                  }

                  alt102 = 1;
               }
            }

            switch(alt102) {
            case 1:
               this.pushFollow(FOLLOW_property_in_cfamProperty5382);
               this.property(props.properties);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }
               break;
            case 2:
               this.match(this.input, 48, FOLLOW_K_COMPACT_in_cfamProperty5391);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 138, FOLLOW_K_STORAGE_in_cfamProperty5393);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  throw new SyntaxException("Compact tables are not allowed in Cassandra starting with 4.0 version.");
               }
               break;
            case 3:
               this.match(this.input, 46, FOLLOW_K_CLUSTERING_in_cfamProperty5403);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 116, FOLLOW_K_ORDER_in_cfamProperty5405);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 43, FOLLOW_K_BY_in_cfamProperty5407);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 194, FOLLOW_194_in_cfamProperty5409);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_cfamOrdering_in_cfamProperty5411);
               this.cfamOrdering(props);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               while(true) {
                  int alt101 = 2;
                  LA101_0 = this.input.LA(1);
                  if(LA101_0 == 198) {
                     alt101 = 1;
                  }

                  switch(alt101) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_cfamProperty5415);
                     if(this.state.failed) {
                        return;
                     }

                     this.pushFollow(FOLLOW_cfamOrdering_in_cfamProperty5417);
                     this.cfamOrdering(props);
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }
                     break;
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_cfamProperty5422);
                     if(this.state.failed) {
                        return;
                     }

                     return;
                  }
               }
            }
         } catch (RecognitionException var23) {
            this.reportError(var23);
            this.recover(this.input, var23);
         }

      } finally {
         ;
      }
   }

   public final boolean cfisStatic() throws RecognitionException {
      boolean isStaticColumn = false;
      boolean isStatic = false;

      try {
         try {
            int alt132 = 2;
            int LA132_0 = this.input.LA(1);
            if(LA132_0 == 137) {
               alt132 = 1;
            }

            switch(alt132) {
            case 1:
               this.match(this.input, 137, FOLLOW_K_STATIC_in_cfisStatic6810);
               if(this.state.failed) {
                  return isStaticColumn;
               }

               if(this.state.backtracking == 0) {
                  isStatic = true;
               }
            default:
               if(this.state.backtracking == 0) {
                  isStaticColumn = isStatic;
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return isStaticColumn;
      } finally {
         ;
      }
   }

   public final ColumnMetadata.Raw cident() throws RecognitionException {
      ColumnMetadata.Raw id = null;
      Token t = null;
      String k = null;

      try {
         try {
            int alt180 = true;
            byte alt180;
            switch(this.input.LA(1)) {
            case 14:
               alt180 = 1;
               break;
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return id;
               }

               NoViableAltException nvae = new NoViableAltException("", 180, 0, this.input);
               throw nvae;
            case 23:
               alt180 = 2;
               break;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt180 = 4;
               break;
            case 178:
               alt180 = 3;
            }

            switch(alt180) {
            case 1:
               this.match(this.input, 14, FOLLOW_EMPTY_QUOTED_NAME_in_cident9540);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnMetadata.Raw.forQuoted("");
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_cident9555);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnMetadata.Raw.forUnquoted(t != null?t.getText():null);
               }
               break;
            case 3:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_cident9580);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnMetadata.Raw.forQuoted(t != null?t.getText():null);
               }
               break;
            case 4:
               this.pushFollow(FOLLOW_unreserved_keyword_in_cident9599);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnMetadata.Raw.forUnquoted(k);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return id;
      } finally {
         ;
      }
   }

   public final void collectionColumnOperation(List<Pair<ColumnMetadata.Raw, Operation.RawUpdate>> operations, ColumnMetadata.Raw key, Term.Raw k) throws RecognitionException {
      Term.Raw t = null;

      try {
         try {
            this.match(this.input, 207, FOLLOW_207_in_collectionColumnOperation12225);
            if(this.state.failed) {
               return;
            }

            this.pushFollow(FOLLOW_term_in_collectionColumnOperation12229);
            t = this.term();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            if(this.state.backtracking == 0) {
               this.addRawUpdate(operations, key, new Operation.SetElement(k, t));
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

      } finally {
         ;
      }
   }

   public final Term.Raw collectionLiteral() throws RecognitionException {
      Term.Raw value = null;
      Term.Raw l = null;
      Term.Raw t = null;
      Term.Raw v = null;

      try {
         try {
            int alt199 = true;
            int LA199_0 = this.input.LA(1);
            byte alt199;
            if(LA199_0 == 210) {
               alt199 = 1;
            } else {
               if(LA199_0 != 214) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return (Term.Raw)value;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 199, 0, this.input);
                  throw nvae;
               }

               int LA199_2 = this.input.LA(2);
               if(LA199_2 == 215) {
                  alt199 = 3;
               } else {
                  if(LA199_2 != 6 && LA199_2 != 11 && LA199_2 != 17 && LA199_2 != 21 && (LA199_2 < 23 || LA199_2 > 24) && (LA199_2 < 28 || LA199_2 > 29) && LA199_2 != 34 && LA199_2 != 36 && (LA199_2 < 40 || LA199_2 > 42) && (LA199_2 < 44 || LA199_2 > 46) && (LA199_2 < 48 || LA199_2 > 51) && (LA199_2 < 53 || LA199_2 > 55) && (LA199_2 < 60 || LA199_2 > 62) && LA199_2 != 64 && (LA199_2 < 67 || LA199_2 > 70) && LA199_2 != 73 && (LA199_2 < 75 || LA199_2 > 76) && LA199_2 != 78 && (LA199_2 < 82 || LA199_2 > 84) && LA199_2 != 86 && (LA199_2 < 89 || LA199_2 > 91) && (LA199_2 < 93 || LA199_2 > 95) && (LA199_2 < 97 || LA199_2 > 99) && (LA199_2 < 104 || LA199_2 > 107) && LA199_2 != 109 && LA199_2 != 111 && LA199_2 != 114 && (LA199_2 < 117 || LA199_2 > 123) && LA199_2 != 127 && LA199_2 != 129 && (LA199_2 < 131 || LA199_2 > 132) && (LA199_2 < 135 || LA199_2 > 145) && (LA199_2 < 147 || LA199_2 > 148) && (LA199_2 < 150 || LA199_2 > 152) && (LA199_2 < 158 || LA199_2 > 159) && (LA199_2 < 161 || LA199_2 > 164) && LA199_2 != 168 && (LA199_2 < 177 || LA199_2 > 178) && LA199_2 != 182 && LA199_2 != 185 && LA199_2 != 194 && LA199_2 != 199 && LA199_2 != 203 && LA199_2 != 210 && LA199_2 != 214) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return (Term.Raw)value;
                     }

                     int nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 199, 2, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt199 = 2;
               }
            }

            switch(alt199) {
            case 1:
               this.pushFollow(FOLLOW_listLiteral_in_collectionLiteral10827);
               l = this.listLiteral();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = l;
               }
               break;
            case 2:
               this.match(this.input, 214, FOLLOW_214_in_collectionLiteral10837);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               this.pushFollow(FOLLOW_term_in_collectionLiteral10841);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               this.pushFollow(FOLLOW_setOrMapLiteral_in_collectionLiteral10845);
               v = this.setOrMapLiteral(t);
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = v;
               }

               this.match(this.input, 215, FOLLOW_215_in_collectionLiteral10850);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }
               break;
            case 3:
               this.match(this.input, 214, FOLLOW_214_in_collectionLiteral10868);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               this.match(this.input, 215, FOLLOW_215_in_collectionLiteral10870);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = new Sets.Literal(Collections.emptyList());
               }
            }
         } catch (RecognitionException var19) {
            this.reportError(var19);
            this.recover(this.input, var19);
         }

         return (Term.Raw)value;
      } finally {
         ;
      }
   }

   public final Selectable.Raw collectionSubSelection(Selectable.Raw receiver) throws RecognitionException {
      Selectable.Raw s = null;
      Term.Raw t1 = null;
      Term.Raw t2 = null;
      boolean isSlice = false;

      try {
         try {
            int alt21 = true;
            int LA21_0 = this.input.LA(1);
            byte alt21;
            if(LA21_0 != 6 && LA21_0 != 11 && LA21_0 != 17 && LA21_0 != 21 && (LA21_0 < 23 || LA21_0 > 24) && (LA21_0 < 28 || LA21_0 > 29) && LA21_0 != 34 && LA21_0 != 36 && (LA21_0 < 40 || LA21_0 > 42) && (LA21_0 < 44 || LA21_0 > 46) && (LA21_0 < 48 || LA21_0 > 51) && (LA21_0 < 53 || LA21_0 > 55) && (LA21_0 < 60 || LA21_0 > 62) && LA21_0 != 64 && (LA21_0 < 67 || LA21_0 > 70) && LA21_0 != 73 && (LA21_0 < 75 || LA21_0 > 76) && LA21_0 != 78 && (LA21_0 < 82 || LA21_0 > 84) && LA21_0 != 86 && (LA21_0 < 89 || LA21_0 > 91) && (LA21_0 < 93 || LA21_0 > 95) && (LA21_0 < 97 || LA21_0 > 99) && (LA21_0 < 104 || LA21_0 > 107) && LA21_0 != 109 && LA21_0 != 111 && LA21_0 != 114 && (LA21_0 < 117 || LA21_0 > 123) && LA21_0 != 127 && LA21_0 != 129 && (LA21_0 < 131 || LA21_0 > 132) && (LA21_0 < 135 || LA21_0 > 145) && (LA21_0 < 147 || LA21_0 > 148) && (LA21_0 < 150 || LA21_0 > 152) && (LA21_0 < 158 || LA21_0 > 159) && (LA21_0 < 161 || LA21_0 > 164) && LA21_0 != 168 && (LA21_0 < 177 || LA21_0 > 178) && LA21_0 != 182 && LA21_0 != 185 && LA21_0 != 194 && LA21_0 != 199 && LA21_0 != 203 && LA21_0 != 210 && LA21_0 != 214) {
               if(LA21_0 != 180) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return (Selectable.Raw)s;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 21, 0, this.input);
                  throw nvae;
               }

               alt21 = 2;
            } else {
               alt21 = 1;
            }

            label906:
            switch(alt21) {
            case 1:
               this.pushFollow(FOLLOW_term_in_collectionSubSelection1815);
               t1 = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               int alt20 = 2;
               int LA20_0 = this.input.LA(1);
               if(LA20_0 == 180) {
                  alt20 = 1;
               }

               switch(alt20) {
               case 1:
                  if(this.state.backtracking == 0) {
                     isSlice = true;
                  }

                  this.match(this.input, 180, FOLLOW_RANGE_in_collectionSubSelection1821);
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  int alt19 = 2;
                  int LA19_0 = this.input.LA(1);
                  if(LA19_0 == 6 || LA19_0 == 11 || LA19_0 == 17 || LA19_0 == 21 || LA19_0 >= 23 && LA19_0 <= 24 || LA19_0 >= 28 && LA19_0 <= 29 || LA19_0 == 34 || LA19_0 == 36 || LA19_0 >= 40 && LA19_0 <= 42 || LA19_0 >= 44 && LA19_0 <= 46 || LA19_0 >= 48 && LA19_0 <= 51 || LA19_0 >= 53 && LA19_0 <= 55 || LA19_0 >= 60 && LA19_0 <= 62 || LA19_0 == 64 || LA19_0 >= 67 && LA19_0 <= 70 || LA19_0 == 73 || LA19_0 >= 75 && LA19_0 <= 76 || LA19_0 == 78 || LA19_0 >= 82 && LA19_0 <= 84 || LA19_0 == 86 || LA19_0 >= 89 && LA19_0 <= 91 || LA19_0 >= 93 && LA19_0 <= 95 || LA19_0 >= 97 && LA19_0 <= 99 || LA19_0 >= 104 && LA19_0 <= 107 || LA19_0 == 109 || LA19_0 == 111 || LA19_0 == 114 || LA19_0 >= 117 && LA19_0 <= 123 || LA19_0 == 127 || LA19_0 == 129 || LA19_0 >= 131 && LA19_0 <= 132 || LA19_0 >= 135 && LA19_0 <= 145 || LA19_0 >= 147 && LA19_0 <= 148 || LA19_0 >= 150 && LA19_0 <= 152 || LA19_0 >= 158 && LA19_0 <= 159 || LA19_0 >= 161 && LA19_0 <= 164 || LA19_0 == 168 || LA19_0 >= 177 && LA19_0 <= 178 || LA19_0 == 182 || LA19_0 == 185 || LA19_0 == 194 || LA19_0 == 199 || LA19_0 == 203 || LA19_0 == 210 || LA19_0 == 214) {
                     alt19 = 1;
                  }

                  switch(alt19) {
                  case 1:
                     this.pushFollow(FOLLOW_term_in_collectionSubSelection1826);
                     t2 = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return (Selectable.Raw)s;
                     }
                  }
               default:
                  break label906;
               }
            case 2:
               this.match(this.input, 180, FOLLOW_RANGE_in_collectionSubSelection1841);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  isSlice = true;
               }

               this.pushFollow(FOLLOW_term_in_collectionSubSelection1847);
               t2 = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }
            }

            if(this.state.backtracking == 0) {
               s = isSlice?new Selectable.WithSliceSelection.Raw(receiver, t1, t2):new Selectable.WithElementSelection.Raw(receiver, t1);
            }
         } catch (RecognitionException var16) {
            this.reportError(var16);
            this.recover(this.input, var16);
         }

         return (Selectable.Raw)s;
      } finally {
         ;
      }
   }

   public final CQL3Type.Raw collection_type() throws RecognitionException {
      CQL3Type.Raw pt = null;
      CQL3Type.Raw t1 = null;
      CQL3Type.Raw t2 = null;
      CQL3Type.Raw t = null;

      try {
         try {
            int alt243 = true;
            byte alt243;
            switch(this.input.LA(1)) {
            case 97:
               alt243 = 2;
               break;
            case 99:
               alt243 = 1;
               break;
            case 134:
               alt243 = 3;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return pt;
               }

               NoViableAltException nvae = new NoViableAltException("", 243, 0, this.input);
               throw nvae;
            }

            switch(alt243) {
            case 1:
               this.match(this.input, 99, FOLLOW_K_MAP_in_collection_type14177);
               if(this.state.failed) {
                  return pt;
               }

               this.match(this.input, 205, FOLLOW_205_in_collection_type14180);
               if(this.state.failed) {
                  return pt;
               }

               this.pushFollow(FOLLOW_comparatorType_in_collection_type14184);
               t1 = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return pt;
               }

               this.match(this.input, 198, FOLLOW_198_in_collection_type14186);
               if(this.state.failed) {
                  return pt;
               }

               this.pushFollow(FOLLOW_comparatorType_in_collection_type14190);
               t2 = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return pt;
               }

               this.match(this.input, 208, FOLLOW_208_in_collection_type14192);
               if(this.state.failed) {
                  return pt;
               }

               if(this.state.backtracking == 0 && t1 != null && t2 != null) {
                  pt = CQL3Type.Raw.map(t1, t2);
               }
               break;
            case 2:
               this.match(this.input, 97, FOLLOW_K_LIST_in_collection_type14210);
               if(this.state.failed) {
                  return pt;
               }

               this.match(this.input, 205, FOLLOW_205_in_collection_type14212);
               if(this.state.failed) {
                  return pt;
               }

               this.pushFollow(FOLLOW_comparatorType_in_collection_type14216);
               t = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return pt;
               }

               this.match(this.input, 208, FOLLOW_208_in_collection_type14218);
               if(this.state.failed) {
                  return pt;
               }

               if(this.state.backtracking == 0 && t != null) {
                  pt = CQL3Type.Raw.list(t);
               }
               break;
            case 3:
               this.match(this.input, 134, FOLLOW_K_SET_in_collection_type14236);
               if(this.state.failed) {
                  return pt;
               }

               this.match(this.input, 205, FOLLOW_205_in_collection_type14239);
               if(this.state.failed) {
                  return pt;
               }

               this.pushFollow(FOLLOW_comparatorType_in_collection_type14243);
               t = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return pt;
               }

               this.match(this.input, 208, FOLLOW_208_in_collection_type14245);
               if(this.state.failed) {
                  return pt;
               }

               if(this.state.backtracking == 0 && t != null) {
                  pt = CQL3Type.Raw.set(t);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return pt;
      } finally {
         ;
      }
   }

   public final void columnCondition(List<Pair<ColumnMetadata.Raw, ColumnCondition.Raw>> conditions) throws RecognitionException {
      ColumnMetadata.Raw key = null;
      Operator op = null;
      Term.Raw t = null;
      List<Term.Raw> values = null;
      AbstractMarker.INRaw marker = null;
      Term.Raw element = null;
      FieldIdentifier field = null;

      try {
         try {
            this.pushFollow(FOLLOW_cident_in_columnCondition12292);
            key = this.cident();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            int alt222 = true;
            byte alt222;
            switch(this.input.LA(1)) {
            case 80:
               alt222 = 2;
               break;
            case 192:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
               alt222 = 1;
               break;
            case 201:
               alt222 = 4;
               break;
            case 210:
               alt222 = 3;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               NoViableAltException nvae = new NoViableAltException("", 222, 0, this.input);
               throw nvae;
            }

            boolean alt219;
            int LA219_0;
            NoViableAltException nvae;
            int LA218_0;
            NoViableAltException nvae;
            byte alt219;
            boolean alt218;
            byte alt218;
            switch(alt222) {
            case 1:
               this.pushFollow(FOLLOW_relationType_in_columnCondition12306);
               op = this.relationType();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_term_in_columnCondition12310);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  conditions.add(Pair.create(key, ColumnCondition.Raw.simpleCondition(t, op)));
               }
               break;
            case 2:
               this.match(this.input, 80, FOLLOW_K_IN_in_columnCondition12324);
               if(this.state.failed) {
                  return;
               }

               alt219 = true;
               LA219_0 = this.input.LA(1);
               if(LA219_0 == 194) {
                  alt219 = 1;
               } else {
                  if(LA219_0 != 177 && LA219_0 != 203) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return;
                     }

                     nvae = new NoViableAltException("", 217, 0, this.input);
                     throw nvae;
                  }

                  alt219 = 2;
               }

               switch(alt219) {
               case 1:
                  this.pushFollow(FOLLOW_singleColumnInValues_in_columnCondition12342);
                  values = this.singleColumnInValues();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  if(this.state.backtracking == 0) {
                     conditions.add(Pair.create(key, ColumnCondition.Raw.simpleInCondition(values)));
                  }

                  return;
               case 2:
                  this.pushFollow(FOLLOW_inMarker_in_columnCondition12362);
                  marker = this.inMarker();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  if(this.state.backtracking == 0) {
                     conditions.add(Pair.create(key, ColumnCondition.Raw.simpleInCondition(marker)));
                  }

                  return;
               default:
                  return;
               }
            case 3:
               this.match(this.input, 210, FOLLOW_210_in_columnCondition12390);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_term_in_columnCondition12394);
               element = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 212, FOLLOW_212_in_columnCondition12396);
               if(this.state.failed) {
                  return;
               }

               alt219 = true;
               LA219_0 = this.input.LA(1);
               if(LA219_0 == 192 || LA219_0 >= 205 && LA219_0 <= 209) {
                  alt219 = 1;
               } else {
                  if(LA219_0 != 80) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return;
                     }

                     nvae = new NoViableAltException("", 219, 0, this.input);
                     throw nvae;
                  }

                  alt219 = 2;
               }

               switch(alt219) {
               case 1:
                  this.pushFollow(FOLLOW_relationType_in_columnCondition12414);
                  op = this.relationType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  this.pushFollow(FOLLOW_term_in_columnCondition12418);
                  t = this.term();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  if(this.state.backtracking == 0) {
                     conditions.add(Pair.create(key, ColumnCondition.Raw.collectionCondition(t, element, op)));
                  }

                  return;
               case 2:
                  this.match(this.input, 80, FOLLOW_K_IN_in_columnCondition12436);
                  if(this.state.failed) {
                     return;
                  }

                  alt218 = true;
                  LA218_0 = this.input.LA(1);
                  if(LA218_0 == 194) {
                     alt218 = 1;
                  } else {
                     if(LA218_0 != 177 && LA218_0 != 203) {
                        if(this.state.backtracking > 0) {
                           this.state.failed = true;
                           return;
                        }

                        nvae = new NoViableAltException("", 218, 0, this.input);
                        throw nvae;
                     }

                     alt218 = 2;
                  }

                  switch(alt218) {
                  case 1:
                     this.pushFollow(FOLLOW_singleColumnInValues_in_columnCondition12458);
                     values = this.singleColumnInValues();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        conditions.add(Pair.create(key, ColumnCondition.Raw.collectionInCondition(element, values)));
                     }

                     return;
                  case 2:
                     this.pushFollow(FOLLOW_inMarker_in_columnCondition12482);
                     marker = this.inMarker();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        conditions.add(Pair.create(key, ColumnCondition.Raw.collectionInCondition(element, marker)));
                     }

                     return;
                  }
               default:
                  return;
               }
            case 4:
               this.match(this.input, 201, FOLLOW_201_in_columnCondition12528);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_fident_in_columnCondition12532);
               field = this.fident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               alt219 = true;
               LA219_0 = this.input.LA(1);
               if(LA219_0 == 192 || LA219_0 >= 205 && LA219_0 <= 209) {
                  alt219 = 1;
               } else {
                  if(LA219_0 != 80) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return;
                     }

                     nvae = new NoViableAltException("", 221, 0, this.input);
                     throw nvae;
                  }

                  alt219 = 2;
               }

               switch(alt219) {
               case 1:
                  this.pushFollow(FOLLOW_relationType_in_columnCondition12550);
                  op = this.relationType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  this.pushFollow(FOLLOW_term_in_columnCondition12554);
                  t = this.term();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  if(this.state.backtracking == 0) {
                     conditions.add(Pair.create(key, ColumnCondition.Raw.udtFieldCondition(t, field, op)));
                  }
                  break;
               case 2:
                  this.match(this.input, 80, FOLLOW_K_IN_in_columnCondition12572);
                  if(this.state.failed) {
                     return;
                  }

                  alt218 = true;
                  LA218_0 = this.input.LA(1);
                  if(LA218_0 == 194) {
                     alt218 = 1;
                  } else {
                     if(LA218_0 != 177 && LA218_0 != 203) {
                        if(this.state.backtracking > 0) {
                           this.state.failed = true;
                           return;
                        }

                        nvae = new NoViableAltException("", 220, 0, this.input);
                        throw nvae;
                     }

                     alt218 = 2;
                  }

                  switch(alt218) {
                  case 1:
                     this.pushFollow(FOLLOW_singleColumnInValues_in_columnCondition12594);
                     values = this.singleColumnInValues();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        conditions.add(Pair.create(key, ColumnCondition.Raw.udtFieldInCondition(field, values)));
                     }
                     break;
                  case 2:
                     this.pushFollow(FOLLOW_inMarker_in_columnCondition12618);
                     marker = this.inMarker();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        conditions.add(Pair.create(key, ColumnCondition.Raw.udtFieldInCondition(field, marker)));
                     }
                  }
               }
            }
         } catch (RecognitionException var18) {
            this.reportError(var18);
            this.recover(this.input, var18);
         }

      } finally {
         ;
      }
   }

   public final CFName columnFamilyName() throws RecognitionException {
      CFName name = null;
      name = new CFName();

      try {
         try {
            int alt186 = true;
            int alt186 = this.dfa186.predict(this.input);
            switch(alt186) {
            case 1:
               this.pushFollow(FOLLOW_ksName_in_columnFamilyName9983);
               this.ksName(name);
               --this.state._fsp;
               if(this.state.failed) {
                  return name;
               }

               this.match(this.input, 201, FOLLOW_201_in_columnFamilyName9986);
               if(this.state.failed) {
                  return name;
               }
            default:
               this.pushFollow(FOLLOW_cfName_in_columnFamilyName9990);
               this.cfName(name);
               --this.state._fsp;
               if(this.state.failed) {
                  return name;
               }
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return name;
      } finally {
         ;
      }
   }

   public final void columnOperation(List<Pair<ColumnMetadata.Raw, Operation.RawUpdate>> operations) throws RecognitionException {
      ColumnMetadata.Raw key = null;

      try {
         try {
            this.pushFollow(FOLLOW_cident_in_columnOperation12012);
            key = this.cident();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            this.pushFollow(FOLLOW_columnOperationDifferentiator_in_columnOperation12014);
            this.columnOperationDifferentiator(operations, key);
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

      } finally {
         ;
      }
   }

   public final void columnOperationDifferentiator(List<Pair<ColumnMetadata.Raw, Operation.RawUpdate>> operations, ColumnMetadata.Raw key) throws RecognitionException {
      Term.Raw k = null;
      FieldIdentifier field = null;

      try {
         try {
            int alt214 = true;
            byte alt214;
            switch(this.input.LA(1)) {
            case 197:
            case 200:
               alt214 = 2;
               break;
            case 198:
            case 199:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 208:
            case 209:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               NoViableAltException nvae = new NoViableAltException("", 214, 0, this.input);
               throw nvae;
            case 201:
               alt214 = 4;
               break;
            case 207:
               alt214 = 1;
               break;
            case 210:
               alt214 = 3;
            }

            switch(alt214) {
            case 1:
               this.match(this.input, 207, FOLLOW_207_in_columnOperationDifferentiator12033);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_normalColumnOperation_in_columnOperationDifferentiator12035);
               this.normalColumnOperation(operations, key);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_shorthandColumnOperation_in_columnOperationDifferentiator12044);
               this.shorthandColumnOperation(operations, key);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }
               break;
            case 3:
               this.match(this.input, 210, FOLLOW_210_in_columnOperationDifferentiator12053);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_term_in_columnOperationDifferentiator12057);
               k = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 212, FOLLOW_212_in_columnOperationDifferentiator12059);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_collectionColumnOperation_in_columnOperationDifferentiator12061);
               this.collectionColumnOperation(operations, key, k);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }
               break;
            case 4:
               this.match(this.input, 201, FOLLOW_201_in_columnOperationDifferentiator12070);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_fident_in_columnOperationDifferentiator12074);
               field = this.fident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_udtColumnOperation_in_columnOperationDifferentiator12076);
               this.udtColumnOperation(operations, key, field);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

      } finally {
         ;
      }
   }

   public final CQL3Type.Raw comparatorType() throws RecognitionException {
      CQL3Type.Raw t = null;
      CQL3Type.Raw ct = null;
      List tt = null;

      try {
         try {
            int alt240 = true;
            int LA240_0 = this.input.LA(1);
            byte alt240;
            if(LA240_0 != 23 && (LA240_0 < 28 || LA240_0 > 29) && LA240_0 != 34 && LA240_0 != 36 && (LA240_0 < 40 || LA240_0 > 42) && (LA240_0 < 44 || LA240_0 > 46) && (LA240_0 < 48 || LA240_0 > 51) && (LA240_0 < 53 || LA240_0 > 55) && (LA240_0 < 60 || LA240_0 > 62) && LA240_0 != 64 && (LA240_0 < 67 || LA240_0 > 70) && LA240_0 != 73 && (LA240_0 < 75 || LA240_0 > 76) && LA240_0 != 78 && (LA240_0 < 82 || LA240_0 > 84) && LA240_0 != 86 && (LA240_0 < 89 || LA240_0 > 91) && (LA240_0 < 93 || LA240_0 > 95) && (LA240_0 < 97 || LA240_0 > 99) && LA240_0 != 104 && LA240_0 != 107 && LA240_0 != 109 && LA240_0 != 114 && (LA240_0 < 117 || LA240_0 > 121) && LA240_0 != 127 && LA240_0 != 129 && (LA240_0 < 131 || LA240_0 > 132) && (LA240_0 < 134 || LA240_0 > 145) && LA240_0 != 148 && LA240_0 != 150 && LA240_0 != 152 && (LA240_0 < 158 || LA240_0 > 159) && (LA240_0 < 161 || LA240_0 > 164) && LA240_0 != 168 && LA240_0 != 178 && LA240_0 != 182) {
               if(LA240_0 != 151) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return t;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 240, 0, this.input);
                  throw nvae;
               }

               int LA240_2 = this.input.LA(2);
               if(LA240_2 == 205) {
                  alt240 = 2;
               } else {
                  if(LA240_2 != -1 && LA240_2 != 60 && LA240_2 != 69 && LA240_2 != 83 && LA240_2 != 94 && LA240_2 != 104 && LA240_2 != 124 && LA240_2 != 137 && LA240_2 != 195 && LA240_2 != 198 && LA240_2 != 201 && LA240_2 != 204 && LA240_2 != 208) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return t;
                     }

                     int nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 240, 2, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt240 = 1;
               }
            } else {
               alt240 = 1;
            }

            switch(alt240) {
            case 1:
               this.pushFollow(FOLLOW_comparatorTypeWithoutTuples_in_comparatorType13766);
               ct = this.comparatorTypeWithoutTuples();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = ct;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_tuple_types_in_comparatorType13782);
               tt = this.tuple_types();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Raw.tuple(tt, true);
               }
            }
         } catch (RecognitionException var18) {
            this.reportError(var18);
            this.recover(this.input, var18);
         }

         return t;
      } finally {
         ;
      }
   }

   public final CQL3Type.Raw comparatorTypeWithMultiCellTuple() throws RecognitionException {
      CQL3Type.Raw t = null;
      CQL3Type.Raw ct = null;
      List tt = null;

      try {
         try {
            int alt241 = true;
            int LA241_0 = this.input.LA(1);
            byte alt241;
            if(LA241_0 != 23 && (LA241_0 < 28 || LA241_0 > 29) && LA241_0 != 34 && LA241_0 != 36 && (LA241_0 < 40 || LA241_0 > 42) && (LA241_0 < 44 || LA241_0 > 46) && (LA241_0 < 48 || LA241_0 > 51) && (LA241_0 < 53 || LA241_0 > 55) && (LA241_0 < 60 || LA241_0 > 62) && LA241_0 != 64 && (LA241_0 < 67 || LA241_0 > 70) && LA241_0 != 73 && (LA241_0 < 75 || LA241_0 > 76) && LA241_0 != 78 && (LA241_0 < 82 || LA241_0 > 84) && LA241_0 != 86 && (LA241_0 < 89 || LA241_0 > 91) && (LA241_0 < 93 || LA241_0 > 95) && (LA241_0 < 97 || LA241_0 > 99) && LA241_0 != 104 && LA241_0 != 107 && LA241_0 != 109 && LA241_0 != 114 && (LA241_0 < 117 || LA241_0 > 121) && LA241_0 != 127 && LA241_0 != 129 && (LA241_0 < 131 || LA241_0 > 132) && (LA241_0 < 134 || LA241_0 > 145) && LA241_0 != 148 && LA241_0 != 150 && LA241_0 != 152 && (LA241_0 < 158 || LA241_0 > 159) && (LA241_0 < 161 || LA241_0 > 164) && LA241_0 != 168 && LA241_0 != 178 && LA241_0 != 182) {
               if(LA241_0 != 151) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return t;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 241, 0, this.input);
                  throw nvae;
               }

               int LA241_2 = this.input.LA(2);
               if(LA241_2 == 205) {
                  alt241 = 2;
               } else {
                  if(LA241_2 != -1 && LA241_2 != 201) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return t;
                     }

                     int nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 241, 2, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt241 = 1;
               }
            } else {
               alt241 = 1;
            }

            switch(alt241) {
            case 1:
               this.pushFollow(FOLLOW_comparatorTypeWithoutTuples_in_comparatorTypeWithMultiCellTuple13827);
               ct = this.comparatorTypeWithoutTuples();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = ct;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_tuple_types_in_comparatorTypeWithMultiCellTuple13843);
               tt = this.tuple_types();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Raw.tuple(tt, false);
               }
            }
         } catch (RecognitionException var18) {
            this.reportError(var18);
            this.recover(this.input, var18);
         }

         return t;
      } finally {
         ;
      }
   }

   public final CQL3Type.Raw comparatorTypeWithoutTuples() throws RecognitionException {
      CQL3Type.Raw t = null;
      Token s = null;
      CQL3Type n = null;
      CQL3Type.Raw c = null;
      UTName id = null;
      CQL3Type.Raw f = null;

      try {
         try {
            int alt239 = true;
            int alt239 = this.dfa239.predict(this.input);
            switch(alt239) {
            case 1:
               this.pushFollow(FOLLOW_native_type_in_comparatorTypeWithoutTuples13668);
               n = this.native_type();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Raw.from(n);
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_collection_type_in_comparatorTypeWithoutTuples13684);
               c = this.collection_type();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = c;
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_userTypeName_in_comparatorTypeWithoutTuples13696);
               id = this.userTypeName();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Raw.userType(id);
               }
               break;
            case 4:
               this.match(this.input, 73, FOLLOW_K_FROZEN_in_comparatorTypeWithoutTuples13708);
               if(this.state.failed) {
                  return t;
               }

               this.match(this.input, 205, FOLLOW_205_in_comparatorTypeWithoutTuples13710);
               if(this.state.failed) {
                  return t;
               }

               this.pushFollow(FOLLOW_comparatorType_in_comparatorTypeWithoutTuples13714);
               f = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               this.match(this.input, 208, FOLLOW_208_in_comparatorTypeWithoutTuples13716);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  try {
                     t = CQL3Type.Raw.frozen(f);
                  } catch (InvalidRequestException var15) {
                     this.addRecognitionError(var15.getMessage());
                  }
               }
               break;
            case 5:
               s = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_comparatorTypeWithoutTuples13734);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  try {
                     t = CQL3Type.Raw.from(new CQL3Type.Custom(s != null?s.getText():null));
                  } catch (SyntaxException var16) {
                     this.addRecognitionError("Cannot parse type " + (s != null?s.getText():null) + ": " + var16.getMessage());
                  } catch (ConfigurationException var17) {
                     this.addRecognitionError("Error setting type " + (s != null?s.getText():null) + ": " + var17.getMessage());
                  }
               }
            }
         } catch (RecognitionException var18) {
            this.reportError(var18);
            this.recover(this.input, var18);
         }

         return t;
      } finally {
         ;
      }
   }

   public final Constants.Literal constant() throws RecognitionException {
      Constants.Literal constant = null;
      Token t = null;

      try {
         try {
            int alt193 = true;
            byte alt193;
            switch(this.input.LA(1)) {
            case 6:
               alt193 = 4;
               break;
            case 11:
               alt193 = 5;
               break;
            case 17:
               alt193 = 3;
               break;
            case 21:
               alt193 = 7;
               break;
            case 24:
               alt193 = 2;
               break;
            case 105:
            case 106:
            case 122:
            case 123:
               alt193 = 8;
               break;
            case 182:
               alt193 = 1;
               break;
            case 185:
               alt193 = 6;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return constant;
               }

               NoViableAltException nvae = new NoViableAltException("", 193, 0, this.input);
               throw nvae;
            }

            switch(alt193) {
            case 1:
               t = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_constant10401);
               if(this.state.failed) {
                  return constant;
               }

               if(this.state.backtracking == 0) {
                  constant = Constants.Literal.string(t != null?t.getText():null);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 24, FOLLOW_INTEGER_in_constant10413);
               if(this.state.failed) {
                  return constant;
               }

               if(this.state.backtracking == 0) {
                  constant = Constants.Literal.integer(t != null?t.getText():null);
               }
               break;
            case 3:
               t = (Token)this.match(this.input, 17, FOLLOW_FLOAT_in_constant10432);
               if(this.state.failed) {
                  return constant;
               }

               if(this.state.backtracking == 0) {
                  constant = Constants.Literal.floatingPoint(t != null?t.getText():null);
               }
               break;
            case 4:
               t = (Token)this.match(this.input, 6, FOLLOW_BOOLEAN_in_constant10453);
               if(this.state.failed) {
                  return constant;
               }

               if(this.state.backtracking == 0) {
                  constant = Constants.Literal.bool(t != null?t.getText():null);
               }
               break;
            case 5:
               t = (Token)this.match(this.input, 11, FOLLOW_DURATION_in_constant10472);
               if(this.state.failed) {
                  return constant;
               }

               if(this.state.backtracking == 0) {
                  constant = Constants.Literal.duration(t != null?t.getText():null);
               }
               break;
            case 6:
               t = (Token)this.match(this.input, 185, FOLLOW_UUID_in_constant10490);
               if(this.state.failed) {
                  return constant;
               }

               if(this.state.backtracking == 0) {
                  constant = Constants.Literal.uuid(t != null?t.getText():null);
               }
               break;
            case 7:
               t = (Token)this.match(this.input, 21, FOLLOW_HEXNUMBER_in_constant10512);
               if(this.state.failed) {
                  return constant;
               }

               if(this.state.backtracking == 0) {
                  constant = Constants.Literal.hex(t != null?t.getText():null);
               }
               break;
            case 8:
               int alt192 = true;
               byte alt192;
               switch(this.input.LA(1)) {
               case 105:
                  alt192 = 3;
                  break;
               case 106:
               case 123:
                  alt192 = 1;
                  break;
               case 122:
                  alt192 = 2;
                  break;
               default:
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return constant;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 192, 0, this.input);
                  throw nvae;
               }

               switch(alt192) {
               case 1:
                  if(this.input.LA(1) != 106 && this.input.LA(1) != 123) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return constant;
                     }

                     MismatchedSetException mse = new MismatchedSetException((BitSet)null, this.input);
                     throw mse;
                  }

                  this.input.consume();
                  this.state.errorRecovery = false;
                  this.state.failed = false;
                  if(this.state.backtracking == 0) {
                     constant = Constants.Literal.floatingPoint("NaN");
                  }
                  break;
               case 2:
                  this.match(this.input, 122, FOLLOW_K_POSITIVE_INFINITY_in_constant10548);
                  if(this.state.failed) {
                     return constant;
                  }

                  if(this.state.backtracking == 0) {
                     constant = Constants.Literal.floatingPoint("Infinity");
                  }
                  break;
               case 3:
                  this.match(this.input, 105, FOLLOW_K_NEGATIVE_INFINITY_in_constant10563);
                  if(this.state.failed) {
                     return constant;
                  }

                  if(this.state.backtracking == 0) {
                     constant = Constants.Literal.floatingPoint("-Infinity");
                  }
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return constant;
      } finally {
         ;
      }
   }

   public final Operator containsOperator() throws RecognitionException {
      Operator o = null;

      try {
         try {
            this.match(this.input, 49, FOLLOW_K_CONTAINS_in_containsOperator13322);
            if(this.state.failed) {
               return o;
            }

            if(this.state.backtracking == 0) {
               o = Operator.CONTAINS;
            }

            int alt230 = 2;
            int LA230_0 = this.input.LA(1);
            if(LA230_0 == 90) {
               int LA230_1 = this.input.LA(2);
               if(LA230_1 == 6 || LA230_1 == 11 || LA230_1 == 17 || LA230_1 == 21 || LA230_1 >= 23 && LA230_1 <= 24 || LA230_1 >= 28 && LA230_1 <= 29 || LA230_1 == 34 || LA230_1 == 36 || LA230_1 >= 40 && LA230_1 <= 42 || LA230_1 >= 44 && LA230_1 <= 46 || LA230_1 >= 48 && LA230_1 <= 51 || LA230_1 >= 53 && LA230_1 <= 55 || LA230_1 >= 60 && LA230_1 <= 62 || LA230_1 == 64 || LA230_1 >= 67 && LA230_1 <= 70 || LA230_1 == 73 || LA230_1 >= 75 && LA230_1 <= 76 || LA230_1 == 78 || LA230_1 >= 82 && LA230_1 <= 84 || LA230_1 == 86 || LA230_1 >= 89 && LA230_1 <= 91 || LA230_1 >= 93 && LA230_1 <= 95 || LA230_1 >= 97 && LA230_1 <= 99 || LA230_1 >= 104 && LA230_1 <= 107 || LA230_1 == 109 || LA230_1 == 111 || LA230_1 == 114 || LA230_1 >= 117 && LA230_1 <= 123 || LA230_1 == 127 || LA230_1 == 129 || LA230_1 >= 131 && LA230_1 <= 132 || LA230_1 >= 135 && LA230_1 <= 145 || LA230_1 >= 147 && LA230_1 <= 148 || LA230_1 >= 150 && LA230_1 <= 152 || LA230_1 >= 158 && LA230_1 <= 159 || LA230_1 >= 161 && LA230_1 <= 164 || LA230_1 == 168 || LA230_1 >= 177 && LA230_1 <= 178 || LA230_1 == 182 || LA230_1 == 185 || LA230_1 == 194 || LA230_1 == 199 || LA230_1 == 203 || LA230_1 == 210 || LA230_1 == 214) {
                  alt230 = 1;
               }
            }

            switch(alt230) {
            case 1:
               this.match(this.input, 90, FOLLOW_K_KEY_in_containsOperator13327);
               if(this.state.failed) {
                  return o;
               }

               if(this.state.backtracking == 0) {
                  o = Operator.CONTAINS_KEY;
               }
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

         return o;
      } finally {
         ;
      }
   }

   public Map<String, String> convertPropertyMap(Maps.Literal map) {
      if(map != null && map.entries != null && !map.entries.isEmpty()) {
         Map<String, String> res = new HashMap(map.entries.size());
         Iterator var3 = map.entries.iterator();

         while(var3.hasNext()) {
            Pair<Term.Raw, Term.Raw> entry = (Pair)var3.next();
            if(entry.left == null || entry.right == null) {
               break;
            }

            String msg;
            if(!(entry.left instanceof Constants.Literal)) {
               msg = "Invalid property name: " + entry.left;
               if(entry.left instanceof AbstractMarker.Raw) {
                  msg = msg + " (bind variables are not supported in DDL queries)";
               }

               this.addRecognitionError(msg);
               break;
            }

            if(!(entry.right instanceof Constants.Literal)) {
               msg = "Invalid property value: " + entry.right + " for property: " + entry.left;
               if(entry.right instanceof AbstractMarker.Raw) {
                  msg = msg + " (bind variables are not supported in DDL queries)";
               }

               this.addRecognitionError(msg);
               break;
            }

            if(res.put(((Constants.Literal)entry.left).getRawText(), ((Constants.Literal)entry.right).getRawText()) != null) {
               this.addRecognitionError(String.format("Multiple definition for property " + ((Constants.Literal)entry.left).getRawText(), new Object[0]));
            }
         }

         return res;
      } else {
         return Collections.emptyMap();
      }
   }

   public final Cql_Parser.corePermissionName_return corePermissionName() throws RecognitionException {
      Cql_Parser.corePermissionName_return retval = new Cql_Parser.corePermissionName_return();
      retval.start = this.input.LT(1);

      try {
         try {
            if(this.input.LA(1) != 31 && this.input.LA(1) != 37 && this.input.LA(1) != 52 && this.input.LA(1) != 59 && this.input.LA(1) != 63 && this.input.LA(1) != 66 && this.input.LA(1) != 103 && this.input.LA(1) != 133) {
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return retval;
               }

               MismatchedSetException mse = new MismatchedSetException((BitSet)null, this.input);
               throw mse;
            }

            this.input.consume();
            this.state.errorRecovery = false;
            this.state.failed = false;
            retval.stop = this.input.LT(-1);
         } catch (RecognitionException var6) {
            this.reportError(var6);
            this.recover(this.input, var6);
         }

         return retval;
      } finally {
         ;
      }
   }

   public final ParsedStatement cqlStatement() throws RecognitionException {
      ParsedStatement stmt = null;
      SelectStatement.RawStatement st1 = null;
      ModificationStatement.Parsed st2 = null;
      UpdateStatement.ParsedUpdate st3 = null;
      BatchStatement.Parsed st4 = null;
      DeleteStatement.Parsed st5 = null;
      UseStatement st6 = null;
      TruncateStatement st7 = null;
      CreateKeyspaceStatement st8 = null;
      CreateTableStatement.RawStatement st9 = null;
      CreateIndexStatement st10 = null;
      DropKeyspaceStatement st11 = null;
      DropTableStatement st12 = null;
      DropIndexStatement st13 = null;
      AlterTableStatement st14 = null;
      AlterKeyspaceStatement st15 = null;
      GrantPermissionsStatement st16 = null;
      RevokePermissionsStatement st17 = null;
      ListPermissionsStatement st18 = null;
      CreateRoleStatement st19 = null;
      AlterRoleStatement st20 = null;
      DropRoleStatement st21 = null;
      ListRolesStatement st22 = null;
      CreateTriggerStatement st23 = null;
      DropTriggerStatement st24 = null;
      CreateTypeStatement st25 = null;
      AlterTypeStatement st26 = null;
      DropTypeStatement st27 = null;
      CreateFunctionStatement st28 = null;
      DropFunctionStatement st29 = null;
      CreateAggregateStatement st30 = null;
      DropAggregateStatement st31 = null;
      CreateRoleStatement st32 = null;
      AlterRoleStatement st33 = null;
      DropRoleStatement st34 = null;
      ListRolesStatement st35 = null;
      GrantRoleStatement st36 = null;
      RevokeRoleStatement st37 = null;
      CreateViewStatement st38 = null;
      DropViewStatement st39 = null;
      AlterViewStatement st40 = null;
      GrantPermissionsStatement st41 = null;
      RevokePermissionsStatement st42 = null;

      try {
         try {
            int alt1 = true;
            int alt1 = this.dfa1.predict(this.input);
            switch(alt1) {
            case 1:
               this.pushFollow(FOLLOW_selectStatement_in_cqlStatement59);
               st1 = this.selectStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st1;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_insertStatement_in_cqlStatement88);
               st2 = this.insertStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st2;
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_updateStatement_in_cqlStatement117);
               st3 = this.updateStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st3;
               }
               break;
            case 4:
               this.pushFollow(FOLLOW_batchStatement_in_cqlStatement146);
               st4 = this.batchStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st4;
               }
               break;
            case 5:
               this.pushFollow(FOLLOW_deleteStatement_in_cqlStatement176);
               st5 = this.deleteStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st5;
               }
               break;
            case 6:
               this.pushFollow(FOLLOW_useStatement_in_cqlStatement205);
               st6 = this.useStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st6;
               }
               break;
            case 7:
               this.pushFollow(FOLLOW_truncateStatement_in_cqlStatement237);
               st7 = this.truncateStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st7;
               }
               break;
            case 8:
               this.pushFollow(FOLLOW_createKeyspaceStatement_in_cqlStatement264);
               st8 = this.createKeyspaceStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st8;
               }
               break;
            case 9:
               this.pushFollow(FOLLOW_createTableStatement_in_cqlStatement285);
               st9 = this.createTableStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st9;
               }
               break;
            case 10:
               this.pushFollow(FOLLOW_createIndexStatement_in_cqlStatement308);
               st10 = this.createIndexStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st10;
               }
               break;
            case 11:
               this.pushFollow(FOLLOW_dropKeyspaceStatement_in_cqlStatement331);
               st11 = this.dropKeyspaceStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st11;
               }
               break;
            case 12:
               this.pushFollow(FOLLOW_dropTableStatement_in_cqlStatement353);
               st12 = this.dropTableStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st12;
               }
               break;
            case 13:
               this.pushFollow(FOLLOW_dropIndexStatement_in_cqlStatement378);
               st13 = this.dropIndexStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st13;
               }
               break;
            case 14:
               this.pushFollow(FOLLOW_alterTableStatement_in_cqlStatement403);
               st14 = this.alterTableStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st14;
               }
               break;
            case 15:
               this.pushFollow(FOLLOW_alterKeyspaceStatement_in_cqlStatement427);
               st15 = this.alterKeyspaceStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st15;
               }
               break;
            case 16:
               this.pushFollow(FOLLOW_grantPermissionsStatement_in_cqlStatement448);
               st16 = this.grantPermissionsStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st16;
               }
               break;
            case 17:
               this.pushFollow(FOLLOW_revokePermissionsStatement_in_cqlStatement466);
               st17 = this.revokePermissionsStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st17;
               }
               break;
            case 18:
               this.pushFollow(FOLLOW_listPermissionsStatement_in_cqlStatement483);
               st18 = this.listPermissionsStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st18;
               }
               break;
            case 19:
               this.pushFollow(FOLLOW_createUserStatement_in_cqlStatement502);
               st19 = this.createUserStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st19;
               }
               break;
            case 20:
               this.pushFollow(FOLLOW_alterUserStatement_in_cqlStatement526);
               st20 = this.alterUserStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st20;
               }
               break;
            case 21:
               this.pushFollow(FOLLOW_dropUserStatement_in_cqlStatement551);
               st21 = this.dropUserStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st21;
               }
               break;
            case 22:
               this.pushFollow(FOLLOW_listUsersStatement_in_cqlStatement577);
               st22 = this.listUsersStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st22;
               }
               break;
            case 23:
               this.pushFollow(FOLLOW_createTriggerStatement_in_cqlStatement602);
               st23 = this.createTriggerStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st23;
               }
               break;
            case 24:
               this.pushFollow(FOLLOW_dropTriggerStatement_in_cqlStatement623);
               st24 = this.dropTriggerStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st24;
               }
               break;
            case 25:
               this.pushFollow(FOLLOW_createTypeStatement_in_cqlStatement646);
               st25 = this.createTypeStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st25;
               }
               break;
            case 26:
               this.pushFollow(FOLLOW_alterTypeStatement_in_cqlStatement670);
               st26 = this.alterTypeStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st26;
               }
               break;
            case 27:
               this.pushFollow(FOLLOW_dropTypeStatement_in_cqlStatement695);
               st27 = this.dropTypeStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st27;
               }
               break;
            case 28:
               this.pushFollow(FOLLOW_createFunctionStatement_in_cqlStatement721);
               st28 = this.createFunctionStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st28;
               }
               break;
            case 29:
               this.pushFollow(FOLLOW_dropFunctionStatement_in_cqlStatement741);
               st29 = this.dropFunctionStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st29;
               }
               break;
            case 30:
               this.pushFollow(FOLLOW_createAggregateStatement_in_cqlStatement763);
               st30 = this.createAggregateStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st30;
               }
               break;
            case 31:
               this.pushFollow(FOLLOW_dropAggregateStatement_in_cqlStatement782);
               st31 = this.dropAggregateStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st31;
               }
               break;
            case 32:
               this.pushFollow(FOLLOW_createRoleStatement_in_cqlStatement803);
               st32 = this.createRoleStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st32;
               }
               break;
            case 33:
               this.pushFollow(FOLLOW_alterRoleStatement_in_cqlStatement827);
               st33 = this.alterRoleStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st33;
               }
               break;
            case 34:
               this.pushFollow(FOLLOW_dropRoleStatement_in_cqlStatement852);
               st34 = this.dropRoleStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st34;
               }
               break;
            case 35:
               this.pushFollow(FOLLOW_listRolesStatement_in_cqlStatement878);
               st35 = this.listRolesStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st35;
               }
               break;
            case 36:
               this.pushFollow(FOLLOW_grantRoleStatement_in_cqlStatement903);
               st36 = this.grantRoleStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st36;
               }
               break;
            case 37:
               this.pushFollow(FOLLOW_revokeRoleStatement_in_cqlStatement928);
               st37 = this.revokeRoleStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st37;
               }
               break;
            case 38:
               this.pushFollow(FOLLOW_createMaterializedViewStatement_in_cqlStatement952);
               st38 = this.createMaterializedViewStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st38;
               }
               break;
            case 39:
               this.pushFollow(FOLLOW_dropMaterializedViewStatement_in_cqlStatement964);
               st39 = this.dropMaterializedViewStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st39;
               }
               break;
            case 40:
               this.pushFollow(FOLLOW_alterMaterializedViewStatement_in_cqlStatement978);
               st40 = this.alterMaterializedViewStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st40;
               }
               break;
            case 41:
               this.pushFollow(FOLLOW_restrictPermissionsStatement_in_cqlStatement991);
               st41 = this.restrictPermissionsStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st41;
               }
               break;
            case 42:
               this.pushFollow(FOLLOW_unrestrictPermissionsStatement_in_cqlStatement1006);
               st42 = this.unrestrictPermissionsStatement();
               --this.state._fsp;
               if(this.state.failed) {
                  return (ParsedStatement)stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = st42;
               }
            }

            if(this.state.backtracking == 0 && stmt != null) {
               ((ParsedStatement)stmt).setBoundVariables(this.bindVariables);
            }
         } catch (RecognitionException var49) {
            this.reportError(var49);
            this.recover(this.input, var49);
         }

         return (ParsedStatement)stmt;
      } finally {
         ;
      }
   }

   public final CreateAggregateStatement createAggregateStatement() throws RecognitionException {
      CreateAggregateStatement expr = null;
      FunctionName fn = null;
      CQL3Type.Raw v = null;
      String sfunc = null;
      CQL3Type.Raw stype = null;
      String ffunc = null;
      Term.Raw ival = null;
      boolean orReplace = false;
      boolean deterministic = false;
      boolean ifNotExists = false;
      ArrayList argsTypes = new ArrayList();

      try {
         try {
            this.match(this.input, 52, FOLLOW_K_CREATE_in_createAggregateStatement4119);
            if(this.state.failed) {
               return expr;
            }

            int alt67 = 2;
            int LA67_0 = this.input.LA(1);
            if(LA67_0 == 115) {
               alt67 = 1;
            }

            switch(alt67) {
            case 1:
               this.match(this.input, 115, FOLLOW_K_OR_in_createAggregateStatement4122);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 126, FOLLOW_K_REPLACE_in_createAggregateStatement4124);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  orReplace = true;
               }
            default:
               this.match(this.input, 28, FOLLOW_K_AGGREGATE_in_createAggregateStatement4136);
               if(this.state.failed) {
                  return expr;
               }

               int alt68 = 2;
               int LA68_0 = this.input.LA(1);
               if(LA68_0 == 79) {
                  alt68 = 1;
               }

               switch(alt68) {
               case 1:
                  this.match(this.input, 79, FOLLOW_K_IF_in_createAggregateStatement4145);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 110, FOLLOW_K_NOT_in_createAggregateStatement4147);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 67, FOLLOW_K_EXISTS_in_createAggregateStatement4149);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     ifNotExists = true;
                  }
               }

               this.pushFollow(FOLLOW_functionName_in_createAggregateStatement4163);
               fn = this.functionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 194, FOLLOW_194_in_createAggregateStatement4171);
               if(this.state.failed) {
                  return expr;
               }

               int alt70 = 2;
               int LA70_0 = this.input.LA(1);
               if(LA70_0 == 23 || LA70_0 >= 28 && LA70_0 <= 29 || LA70_0 == 34 || LA70_0 == 36 || LA70_0 >= 40 && LA70_0 <= 42 || LA70_0 >= 44 && LA70_0 <= 46 || LA70_0 >= 48 && LA70_0 <= 51 || LA70_0 >= 53 && LA70_0 <= 55 || LA70_0 >= 60 && LA70_0 <= 62 || LA70_0 == 64 || LA70_0 >= 67 && LA70_0 <= 70 || LA70_0 == 73 || LA70_0 >= 75 && LA70_0 <= 76 || LA70_0 == 78 || LA70_0 >= 82 && LA70_0 <= 84 || LA70_0 == 86 || LA70_0 >= 89 && LA70_0 <= 91 || LA70_0 >= 93 && LA70_0 <= 95 || LA70_0 >= 97 && LA70_0 <= 99 || LA70_0 == 104 || LA70_0 == 107 || LA70_0 == 109 || LA70_0 == 114 || LA70_0 >= 117 && LA70_0 <= 121 || LA70_0 == 127 || LA70_0 == 129 || LA70_0 >= 131 && LA70_0 <= 132 || LA70_0 >= 134 && LA70_0 <= 145 || LA70_0 == 148 || LA70_0 >= 150 && LA70_0 <= 152 || LA70_0 >= 158 && LA70_0 <= 159 || LA70_0 >= 161 && LA70_0 <= 164 || LA70_0 == 168 || LA70_0 == 178 || LA70_0 == 182) {
                  alt70 = 1;
               }

               byte alt71;
               int LA71_0;
               switch(alt70) {
               case 1:
                  this.pushFollow(FOLLOW_comparatorType_in_createAggregateStatement4195);
                  v = this.comparatorType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     argsTypes.add(v);
                  }

                  label593:
                  while(true) {
                     alt71 = 2;
                     LA71_0 = this.input.LA(1);
                     if(LA71_0 == 198) {
                        alt71 = 1;
                     }

                     switch(alt71) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_createAggregateStatement4211);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_comparatorType_in_createAggregateStatement4215);
                        v = this.comparatorType();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }

                        if(this.state.backtracking == 0) {
                           argsTypes.add(v);
                        }
                        break;
                     default:
                        break label593;
                     }
                  }
               }

               this.match(this.input, 195, FOLLOW_195_in_createAggregateStatement4239);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 135, FOLLOW_K_SFUNC_in_createAggregateStatement4247);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_allowedFunctionName_in_createAggregateStatement4253);
               sfunc = this.allowedFunctionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 139, FOLLOW_K_STYPE_in_createAggregateStatement4261);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_comparatorType_in_createAggregateStatement4267);
               stype = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               alt71 = 2;
               LA71_0 = this.input.LA(1);
               if(LA71_0 == 69) {
                  alt71 = 1;
               }

               switch(alt71) {
               case 1:
                  this.match(this.input, 69, FOLLOW_K_FINALFUNC_in_createAggregateStatement4285);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_allowedFunctionName_in_createAggregateStatement4291);
                  ffunc = this.allowedFunctionName();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }
               default:
                  int alt72 = 2;
                  int LA72_0 = this.input.LA(1);
                  if(LA72_0 == 83) {
                     alt72 = 1;
                  }

                  switch(alt72) {
                  case 1:
                     this.match(this.input, 83, FOLLOW_K_INITCOND_in_createAggregateStatement4318);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_term_in_createAggregateStatement4324);
                     ival = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }
                  default:
                     int alt73 = 2;
                     int LA73_0 = this.input.LA(1);
                     if(LA73_0 == 60) {
                        alt73 = 1;
                     }

                     switch(alt73) {
                     case 1:
                        this.match(this.input, 60, FOLLOW_K_DETERMINISTIC_in_createAggregateStatement4343);
                        if(this.state.failed) {
                           return expr;
                        }

                        if(this.state.backtracking == 0) {
                           deterministic = true;
                        }
                     default:
                        if(this.state.backtracking == 0) {
                           expr = new CreateAggregateStatement(fn, argsTypes, sfunc, stype, ffunc, ival, orReplace, ifNotExists, deterministic);
                        }
                     }
                  }
               }
            }
         } catch (RecognitionException var28) {
            this.reportError(var28);
            this.recover(this.input, var28);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final CreateFunctionStatement createFunctionStatement() throws RecognitionException {
      CreateFunctionStatement expr = null;
      Token language = null;
      Token body = null;
      FunctionName fn = null;
      ColumnIdentifier k = null;
      CQL3Type.Raw v = null;
      CQL3Type.Raw rt = null;
      boolean orReplace = false;
      boolean ifNotExists = false;
      List<ColumnIdentifier> argsNames = new ArrayList();
      List<CQL3Type.Raw> argsTypes = new ArrayList();
      boolean calledOnNullInput = false;
      boolean deterministic = false;
      boolean monotonic = false;
      ArrayList monotonicOn = new ArrayList();

      try {
         try {
            this.match(this.input, 52, FOLLOW_K_CREATE_in_createFunctionStatement4567);
            if(this.state.failed) {
               return expr;
            }

            int alt78 = 2;
            int LA78_0 = this.input.LA(1);
            if(LA78_0 == 115) {
               alt78 = 1;
            }

            switch(alt78) {
            case 1:
               this.match(this.input, 115, FOLLOW_K_OR_in_createFunctionStatement4570);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 126, FOLLOW_K_REPLACE_in_createFunctionStatement4572);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  orReplace = true;
               }
            default:
               this.match(this.input, 75, FOLLOW_K_FUNCTION_in_createFunctionStatement4584);
               if(this.state.failed) {
                  return expr;
               }

               int alt79 = 2;
               int LA79_0 = this.input.LA(1);
               if(LA79_0 == 79) {
                  alt79 = 1;
               }

               switch(alt79) {
               case 1:
                  this.match(this.input, 79, FOLLOW_K_IF_in_createFunctionStatement4593);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 110, FOLLOW_K_NOT_in_createFunctionStatement4595);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 67, FOLLOW_K_EXISTS_in_createFunctionStatement4597);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     ifNotExists = true;
                  }
               }

               this.pushFollow(FOLLOW_functionName_in_createFunctionStatement4611);
               fn = this.functionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 194, FOLLOW_194_in_createFunctionStatement4619);
               if(this.state.failed) {
                  return expr;
               }

               int alt81 = 2;
               int LA81_0 = this.input.LA(1);
               if(LA81_0 == 23 || LA81_0 >= 28 && LA81_0 <= 29 || LA81_0 == 34 || LA81_0 == 36 || LA81_0 >= 40 && LA81_0 <= 42 || LA81_0 >= 44 && LA81_0 <= 46 || LA81_0 >= 48 && LA81_0 <= 51 || LA81_0 >= 53 && LA81_0 <= 55 || LA81_0 >= 60 && LA81_0 <= 62 || LA81_0 == 64 || LA81_0 >= 67 && LA81_0 <= 70 || LA81_0 == 73 || LA81_0 >= 75 && LA81_0 <= 76 || LA81_0 == 78 || LA81_0 >= 82 && LA81_0 <= 84 || LA81_0 == 86 || LA81_0 >= 89 && LA81_0 <= 91 || LA81_0 >= 93 && LA81_0 <= 95 || LA81_0 >= 97 && LA81_0 <= 99 || LA81_0 == 104 || LA81_0 == 107 || LA81_0 == 109 || LA81_0 == 114 || LA81_0 >= 117 && LA81_0 <= 121 || LA81_0 == 127 || LA81_0 == 129 || LA81_0 >= 131 && LA81_0 <= 132 || LA81_0 >= 135 && LA81_0 <= 145 || LA81_0 == 148 || LA81_0 >= 150 && LA81_0 <= 152 || LA81_0 >= 158 && LA81_0 <= 159 || LA81_0 >= 161 && LA81_0 <= 164 || LA81_0 == 168 || LA81_0 == 178) {
                  alt81 = 1;
               }

               byte alt80;
               int LA80_0;
               switch(alt81) {
               case 1:
                  this.pushFollow(FOLLOW_noncol_ident_in_createFunctionStatement4643);
                  k = this.noncol_ident();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_comparatorType_in_createFunctionStatement4647);
                  v = this.comparatorType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     argsNames.add(k);
                     argsTypes.add(v);
                  }

                  label786:
                  while(true) {
                     alt80 = 2;
                     LA80_0 = this.input.LA(1);
                     if(LA80_0 == 198) {
                        alt80 = 1;
                     }

                     switch(alt80) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_createFunctionStatement4663);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_noncol_ident_in_createFunctionStatement4667);
                        k = this.noncol_ident();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_comparatorType_in_createFunctionStatement4671);
                        v = this.comparatorType();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }

                        if(this.state.backtracking == 0) {
                           argsNames.add(k);
                           argsTypes.add(v);
                        }
                        break;
                     default:
                        break label786;
                     }
                  }
               }

               this.match(this.input, 195, FOLLOW_195_in_createFunctionStatement4695);
               if(this.state.failed) {
                  return expr;
               }

               int alt82 = true;
               LA80_0 = this.input.LA(1);
               if(LA80_0 == 129) {
                  alt80 = 1;
               } else {
                  if(LA80_0 != 44) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return expr;
                     }

                     NoViableAltException nvae = new NoViableAltException("", 82, 0, this.input);
                     throw nvae;
                  }

                  alt80 = 2;
               }

               switch(alt80) {
               case 1:
                  this.match(this.input, 129, FOLLOW_K_RETURNS_in_createFunctionStatement4706);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 111, FOLLOW_K_NULL_in_createFunctionStatement4708);
                  if(this.state.failed) {
                     return expr;
                  }
                  break;
               case 2:
                  this.match(this.input, 44, FOLLOW_K_CALLED_in_createFunctionStatement4714);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     calledOnNullInput = true;
                  }
               }

               this.match(this.input, 113, FOLLOW_K_ON_in_createFunctionStatement4720);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 111, FOLLOW_K_NULL_in_createFunctionStatement4722);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 84, FOLLOW_K_INPUT_in_createFunctionStatement4724);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 129, FOLLOW_K_RETURNS_in_createFunctionStatement4732);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_comparatorType_in_createFunctionStatement4738);
               rt = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               int alt83 = 2;
               int LA83_0 = this.input.LA(1);
               if(LA83_0 == 60) {
                  alt83 = 1;
               }

               switch(alt83) {
               case 1:
                  this.match(this.input, 60, FOLLOW_K_DETERMINISTIC_in_createFunctionStatement4748);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     deterministic = true;
                  }
               default:
                  int alt84 = 3;
                  int LA84_0 = this.input.LA(1);
                  if(LA84_0 == 104) {
                     int LA84_1 = this.input.LA(2);
                     if(LA84_1 == 113) {
                        alt84 = 2;
                     } else if(LA84_1 == 94) {
                        alt84 = 1;
                     }
                  }

                  switch(alt84) {
                  case 1:
                     this.match(this.input, 104, FOLLOW_K_MONOTONIC_in_createFunctionStatement4771);
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        monotonic = true;
                        monotonicOn.addAll(argsNames);
                     }
                     break;
                  case 2:
                     this.match(this.input, 104, FOLLOW_K_MONOTONIC_in_createFunctionStatement4785);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.match(this.input, 113, FOLLOW_K_ON_in_createFunctionStatement4787);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_noncol_ident_in_createFunctionStatement4791);
                     k = this.noncol_ident();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        monotonicOn.add(k);
                        monotonic = monotonicOn.containsAll(argsNames);
                     }
                  }

                  this.match(this.input, 94, FOLLOW_K_LANGUAGE_in_createFunctionStatement4810);
                  if(this.state.failed) {
                     return expr;
                  }

                  language = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_createFunctionStatement4816);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 34, FOLLOW_K_AS_in_createFunctionStatement4824);
                  if(this.state.failed) {
                     return expr;
                  }

                  body = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_createFunctionStatement4830);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     expr = new CreateFunctionStatement(fn, (language != null?language.getText():null).toLowerCase(), body != null?body.getText():null, argsNames, argsTypes, rt, calledOnNullInput, orReplace, ifNotExists, deterministic, monotonic, monotonicOn);
                  }
               }
            }
         } catch (RecognitionException var32) {
            this.reportError(var32);
            this.recover(this.input, var32);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final CreateIndexStatement createIndexStatement() throws RecognitionException {
      CreateIndexStatement expr = null;
      Token cls = null;
      CFName cf = null;
      IndexPropDefs props = new IndexPropDefs();
      boolean ifNotExists = false;
      IndexName name = new IndexName();
      ArrayList targets = new ArrayList();

      try {
         try {
            this.match(this.input, 52, FOLLOW_K_CREATE_in_createIndexStatement5611);
            if(this.state.failed) {
               return expr;
            }

            int alt107 = 2;
            int LA107_0 = this.input.LA(1);
            if(LA107_0 == 53) {
               alt107 = 1;
            }

            switch(alt107) {
            case 1:
               this.match(this.input, 53, FOLLOW_K_CUSTOM_in_createIndexStatement5614);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  props.isCustom = true;
               }
            default:
               this.match(this.input, 81, FOLLOW_K_INDEX_in_createIndexStatement5620);
               if(this.state.failed) {
                  return expr;
               }

               int alt108 = 2;
               int LA108_0 = this.input.LA(1);
               if(LA108_0 == 79) {
                  alt108 = 1;
               }

               switch(alt108) {
               case 1:
                  this.match(this.input, 79, FOLLOW_K_IF_in_createIndexStatement5623);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 110, FOLLOW_K_NOT_in_createIndexStatement5625);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 67, FOLLOW_K_EXISTS_in_createIndexStatement5627);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     ifNotExists = true;
                  }
               }

               int alt109 = 2;
               int LA109_0 = this.input.LA(1);
               if(LA109_0 == 23 || LA109_0 >= 28 && LA109_0 <= 29 || LA109_0 == 34 || LA109_0 == 36 || LA109_0 >= 40 && LA109_0 <= 42 || LA109_0 >= 44 && LA109_0 <= 46 || LA109_0 >= 48 && LA109_0 <= 51 || LA109_0 >= 53 && LA109_0 <= 55 || LA109_0 >= 60 && LA109_0 <= 62 || LA109_0 == 64 || LA109_0 >= 67 && LA109_0 <= 70 || LA109_0 == 73 || LA109_0 >= 75 && LA109_0 <= 76 || LA109_0 == 78 || LA109_0 >= 82 && LA109_0 <= 84 || LA109_0 == 86 || LA109_0 >= 89 && LA109_0 <= 91 || LA109_0 >= 93 && LA109_0 <= 95 || LA109_0 >= 97 && LA109_0 <= 99 || LA109_0 == 104 || LA109_0 == 107 || LA109_0 == 109 || LA109_0 == 114 || LA109_0 >= 117 && LA109_0 <= 121 || LA109_0 == 127 || LA109_0 == 129 || LA109_0 >= 131 && LA109_0 <= 132 || LA109_0 >= 135 && LA109_0 <= 145 || LA109_0 == 148 || LA109_0 >= 150 && LA109_0 <= 152 || LA109_0 >= 158 && LA109_0 <= 159 || LA109_0 >= 161 && LA109_0 <= 164 || LA109_0 == 168 || LA109_0 >= 177 && LA109_0 <= 178) {
                  alt109 = 1;
               }

               switch(alt109) {
               case 1:
                  this.pushFollow(FOLLOW_idxName_in_createIndexStatement5643);
                  this.idxName(name);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }
               default:
                  this.match(this.input, 113, FOLLOW_K_ON_in_createIndexStatement5648);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_columnFamilyName_in_createIndexStatement5652);
                  cf = this.columnFamilyName();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 194, FOLLOW_194_in_createIndexStatement5654);
                  if(this.state.failed) {
                     return expr;
                  }

                  int alt111 = 2;
                  int LA111_0 = this.input.LA(1);
                  if(LA111_0 == 14 || LA111_0 == 23 || LA111_0 >= 28 && LA111_0 <= 29 || LA111_0 == 34 || LA111_0 == 36 || LA111_0 >= 40 && LA111_0 <= 42 || LA111_0 >= 44 && LA111_0 <= 46 || LA111_0 >= 48 && LA111_0 <= 51 || LA111_0 >= 53 && LA111_0 <= 55 || LA111_0 >= 60 && LA111_0 <= 62 || LA111_0 >= 64 && LA111_0 <= 65 || LA111_0 >= 67 && LA111_0 <= 70 || LA111_0 >= 73 && LA111_0 <= 76 || LA111_0 == 78 || LA111_0 >= 82 && LA111_0 <= 84 || LA111_0 == 86 || LA111_0 >= 89 && LA111_0 <= 91 || LA111_0 >= 93 && LA111_0 <= 95 || LA111_0 >= 97 && LA111_0 <= 99 || LA111_0 == 104 || LA111_0 == 107 || LA111_0 == 109 || LA111_0 == 114 || LA111_0 >= 117 && LA111_0 <= 121 || LA111_0 == 127 || LA111_0 == 129 || LA111_0 >= 131 && LA111_0 <= 132 || LA111_0 >= 135 && LA111_0 <= 145 || LA111_0 == 148 || LA111_0 >= 150 && LA111_0 <= 152 || LA111_0 >= 158 && LA111_0 <= 159 || LA111_0 >= 161 && LA111_0 <= 164 || LA111_0 == 168 || LA111_0 == 178) {
                     alt111 = 1;
                  }

                  byte alt112;
                  int LA112_0;
                  switch(alt111) {
                  case 1:
                     this.pushFollow(FOLLOW_indexIdent_in_createIndexStatement5657);
                     this.indexIdent(targets);
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     label739:
                     while(true) {
                        alt112 = 2;
                        LA112_0 = this.input.LA(1);
                        if(LA112_0 == 198) {
                           alt112 = 1;
                        }

                        switch(alt112) {
                        case 1:
                           this.match(this.input, 198, FOLLOW_198_in_createIndexStatement5661);
                           if(this.state.failed) {
                              return expr;
                           }

                           this.pushFollow(FOLLOW_indexIdent_in_createIndexStatement5663);
                           this.indexIdent(targets);
                           --this.state._fsp;
                           if(this.state.failed) {
                              return expr;
                           }
                           break;
                        default:
                           break label739;
                        }
                     }
                  }

                  this.match(this.input, 195, FOLLOW_195_in_createIndexStatement5670);
                  if(this.state.failed) {
                     return expr;
                  }

                  alt112 = 2;
                  LA112_0 = this.input.LA(1);
                  if(LA112_0 == 160) {
                     alt112 = 1;
                  }

                  switch(alt112) {
                  case 1:
                     this.match(this.input, 160, FOLLOW_K_USING_in_createIndexStatement5681);
                     if(this.state.failed) {
                        return expr;
                     }

                     cls = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_createIndexStatement5685);
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        props.customClass = cls != null?cls.getText():null;
                     }
                  default:
                     int alt113 = 2;
                     int LA113_0 = this.input.LA(1);
                     if(LA113_0 == 167) {
                        alt113 = 1;
                     }

                     switch(alt113) {
                     case 1:
                        this.match(this.input, 167, FOLLOW_K_WITH_in_createIndexStatement5700);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_properties_in_createIndexStatement5702);
                        this.properties(props);
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }
                     default:
                        if(this.state.backtracking == 0) {
                           expr = new CreateIndexStatement(cf, name, targets, props, ifNotExists);
                        }
                     }
                  }
               }
            }
         } catch (RecognitionException var24) {
            this.reportError(var24);
            this.recover(this.input, var24);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final CreateKeyspaceStatement createKeyspaceStatement() throws RecognitionException {
      CreateKeyspaceStatement expr = null;
      String ks = null;
      KeyspaceAttributes attrs = new KeyspaceAttributes();
      boolean ifNotExists = false;

      try {
         try {
            this.match(this.input, 52, FOLLOW_K_CREATE_in_createKeyspaceStatement5051);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 92, FOLLOW_K_KEYSPACE_in_createKeyspaceStatement5053);
            if(this.state.failed) {
               return expr;
            }

            int alt89 = 2;
            int LA89_0 = this.input.LA(1);
            if(LA89_0 == 79) {
               alt89 = 1;
            }

            switch(alt89) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_createKeyspaceStatement5056);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 110, FOLLOW_K_NOT_in_createKeyspaceStatement5058);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_createKeyspaceStatement5060);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  ifNotExists = true;
               }
            default:
               this.pushFollow(FOLLOW_keyspaceName_in_createKeyspaceStatement5069);
               ks = this.keyspaceName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 167, FOLLOW_K_WITH_in_createKeyspaceStatement5077);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_properties_in_createKeyspaceStatement5079);
               this.properties(attrs);
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  expr = new CreateKeyspaceStatement(ks, attrs, ifNotExists);
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final CreateViewStatement createMaterializedViewStatement() throws RecognitionException {
      CreateViewStatement expr = null;
      CFName cf = null;
      List<RawSelector> sclause = null;
      CFName basecf = null;
      WhereClause.Builder wclause = null;
      ColumnMetadata.Raw k1 = null;
      ColumnMetadata.Raw kn = null;
      ColumnMetadata.Raw c1 = null;
      ColumnMetadata.Raw cn = null;
      boolean ifNotExists = false;
      List<ColumnMetadata.Raw> partitionKeys = new ArrayList();
      ArrayList compositeKeys = new ArrayList();

      try {
         try {
            this.match(this.input, 52, FOLLOW_K_CREATE_in_createMaterializedViewStatement5865);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 100, FOLLOW_K_MATERIALIZED_in_createMaterializedViewStatement5867);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 165, FOLLOW_K_VIEW_in_createMaterializedViewStatement5869);
            if(this.state.failed) {
               return expr;
            }

            int alt115 = 2;
            int LA115_0 = this.input.LA(1);
            if(LA115_0 == 79) {
               alt115 = 1;
            }

            switch(alt115) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_createMaterializedViewStatement5872);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 110, FOLLOW_K_NOT_in_createMaterializedViewStatement5874);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_createMaterializedViewStatement5876);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  ifNotExists = true;
               }
            default:
               this.pushFollow(FOLLOW_columnFamilyName_in_createMaterializedViewStatement5884);
               cf = this.columnFamilyName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 34, FOLLOW_K_AS_in_createMaterializedViewStatement5886);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 133, FOLLOW_K_SELECT_in_createMaterializedViewStatement5896);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_selectors_in_createMaterializedViewStatement5900);
               sclause = this.selectors();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 72, FOLLOW_K_FROM_in_createMaterializedViewStatement5902);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_columnFamilyName_in_createMaterializedViewStatement5906);
               basecf = this.columnFamilyName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               int alt116 = 2;
               int LA116_0 = this.input.LA(1);
               if(LA116_0 == 166) {
                  alt116 = 1;
               }

               switch(alt116) {
               case 1:
                  this.match(this.input, 166, FOLLOW_K_WHERE_in_createMaterializedViewStatement5917);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_whereClause_in_createMaterializedViewStatement5921);
                  wclause = this.whereClause();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }
               default:
                  this.match(this.input, 124, FOLLOW_K_PRIMARY_in_createMaterializedViewStatement5933);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 90, FOLLOW_K_KEY_in_createMaterializedViewStatement5935);
                  if(this.state.failed) {
                     return expr;
                  }

                  int alt120 = true;
                  int LA120_0 = this.input.LA(1);
                  if(LA120_0 != 194) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return expr;
                     }

                     NoViableAltException nvae = new NoViableAltException("", 120, 0, this.input);
                     throw nvae;
                  }

                  int LA120_1 = this.input.LA(2);
                  int LA118_0;
                  byte alt120;
                  if(LA120_1 == 194) {
                     alt120 = 1;
                  } else {
                     if(LA120_1 != 14 && LA120_1 != 23 && (LA120_1 < 28 || LA120_1 > 29) && LA120_1 != 34 && LA120_1 != 36 && (LA120_1 < 40 || LA120_1 > 42) && (LA120_1 < 44 || LA120_1 > 46) && (LA120_1 < 48 || LA120_1 > 51) && (LA120_1 < 53 || LA120_1 > 55) && (LA120_1 < 60 || LA120_1 > 62) && LA120_1 != 64 && (LA120_1 < 67 || LA120_1 > 70) && LA120_1 != 73 && (LA120_1 < 75 || LA120_1 > 76) && LA120_1 != 78 && (LA120_1 < 82 || LA120_1 > 84) && LA120_1 != 86 && (LA120_1 < 89 || LA120_1 > 91) && (LA120_1 < 93 || LA120_1 > 95) && (LA120_1 < 97 || LA120_1 > 99) && LA120_1 != 104 && LA120_1 != 107 && LA120_1 != 109 && LA120_1 != 114 && (LA120_1 < 117 || LA120_1 > 121) && LA120_1 != 127 && LA120_1 != 129 && (LA120_1 < 131 || LA120_1 > 132) && (LA120_1 < 135 || LA120_1 > 145) && LA120_1 != 148 && (LA120_1 < 150 || LA120_1 > 152) && (LA120_1 < 158 || LA120_1 > 159) && (LA120_1 < 161 || LA120_1 > 164) && LA120_1 != 168 && LA120_1 != 178) {
                        if(this.state.backtracking > 0) {
                           this.state.failed = true;
                           return expr;
                        }

                        LA118_0 = this.input.mark();

                        try {
                           this.input.consume();
                           NoViableAltException nvae = new NoViableAltException("", 120, 1, this.input);
                           throw nvae;
                        } finally {
                           this.input.rewind(LA118_0);
                        }
                     }

                     alt120 = 2;
                  }

                  byte alt118;
                  label1223:
                  switch(alt120) {
                  case 1:
                     this.match(this.input, 194, FOLLOW_194_in_createMaterializedViewStatement5947);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.match(this.input, 194, FOLLOW_194_in_createMaterializedViewStatement5949);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_cident_in_createMaterializedViewStatement5953);
                     k1 = this.cident();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        partitionKeys.add(k1);
                     }

                     while(true) {
                        alt118 = 2;
                        LA118_0 = this.input.LA(1);
                        if(LA118_0 == 198) {
                           alt118 = 1;
                        }

                        switch(alt118) {
                        case 1:
                           this.match(this.input, 198, FOLLOW_198_in_createMaterializedViewStatement5959);
                           if(this.state.failed) {
                              return expr;
                           }

                           this.pushFollow(FOLLOW_cident_in_createMaterializedViewStatement5963);
                           kn = this.cident();
                           --this.state._fsp;
                           if(this.state.failed) {
                              return expr;
                           }

                           if(this.state.backtracking == 0) {
                              partitionKeys.add(kn);
                           }
                           break;
                        default:
                           this.match(this.input, 195, FOLLOW_195_in_createMaterializedViewStatement5970);
                           if(this.state.failed) {
                              return expr;
                           }

                           while(true) {
                              alt118 = 2;
                              LA118_0 = this.input.LA(1);
                              if(LA118_0 == 198) {
                                 alt118 = 1;
                              }

                              switch(alt118) {
                              case 1:
                                 this.match(this.input, 198, FOLLOW_198_in_createMaterializedViewStatement5974);
                                 if(this.state.failed) {
                                    return expr;
                                 }

                                 this.pushFollow(FOLLOW_cident_in_createMaterializedViewStatement5978);
                                 c1 = this.cident();
                                 --this.state._fsp;
                                 if(this.state.failed) {
                                    return expr;
                                 }

                                 if(this.state.backtracking == 0) {
                                    compositeKeys.add(c1);
                                 }
                                 break;
                              default:
                                 this.match(this.input, 195, FOLLOW_195_in_createMaterializedViewStatement5985);
                                 if(this.state.failed) {
                                    return expr;
                                 }
                                 break label1223;
                              }
                           }
                        }
                     }
                  case 2:
                     this.match(this.input, 194, FOLLOW_194_in_createMaterializedViewStatement5995);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_cident_in_createMaterializedViewStatement5999);
                     k1 = this.cident();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        partitionKeys.add(k1);
                     }

                     label1213:
                     while(true) {
                        alt118 = 2;
                        LA118_0 = this.input.LA(1);
                        if(LA118_0 == 198) {
                           alt118 = 1;
                        }

                        switch(alt118) {
                        case 1:
                           this.match(this.input, 198, FOLLOW_198_in_createMaterializedViewStatement6005);
                           if(this.state.failed) {
                              return expr;
                           }

                           this.pushFollow(FOLLOW_cident_in_createMaterializedViewStatement6009);
                           cn = this.cident();
                           --this.state._fsp;
                           if(this.state.failed) {
                              return expr;
                           }

                           if(this.state.backtracking == 0) {
                              compositeKeys.add(cn);
                           }
                           break;
                        default:
                           this.match(this.input, 195, FOLLOW_195_in_createMaterializedViewStatement6016);
                           if(this.state.failed) {
                              return expr;
                           }
                           break label1213;
                        }
                     }
                  }

                  if(this.state.backtracking == 0) {
                     WhereClause where = wclause == null?WhereClause.empty():wclause.build();
                     expr = new CreateViewStatement(cf, basecf, sclause, where, partitionKeys, compositeKeys, ifNotExists);
                  }

                  alt118 = 2;
                  LA118_0 = this.input.LA(1);
                  if(LA118_0 == 167) {
                     alt118 = 1;
                  }

                  switch(alt118) {
                  case 1:
                     this.match(this.input, 167, FOLLOW_K_WITH_in_createMaterializedViewStatement6048);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_cfamProperty_in_createMaterializedViewStatement6050);
                     this.cfamProperty(expr.properties);
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     while(true) {
                        int alt121 = 2;
                        int LA121_0 = this.input.LA(1);
                        if(LA121_0 == 32) {
                           alt121 = 1;
                        }

                        switch(alt121) {
                        case 1:
                           this.match(this.input, 32, FOLLOW_K_AND_in_createMaterializedViewStatement6055);
                           if(this.state.failed) {
                              return expr;
                           }

                           this.pushFollow(FOLLOW_cfamProperty_in_createMaterializedViewStatement6057);
                           this.cfamProperty(expr.properties);
                           --this.state._fsp;
                           if(this.state.failed) {
                              return expr;
                           }
                           break;
                        default:
                           return expr;
                        }
                     }
                  }
               }
            }
         } catch (RecognitionException var32) {
            this.reportError(var32);
            this.recover(this.input, var32);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final CreateRoleStatement createRoleStatement() throws RecognitionException {
      CreateRoleStatement stmt = null;
      RoleName name = null;
      RoleOptions opts = new RoleOptions();
      boolean ifNotExists = false;

      try {
         try {
            this.match(this.input, 52, FOLLOW_K_CREATE_in_createRoleStatement9149);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 131, FOLLOW_K_ROLE_in_createRoleStatement9151);
            if(this.state.failed) {
               return stmt;
            }

            int alt172 = 2;
            int LA172_0 = this.input.LA(1);
            if(LA172_0 == 79) {
               alt172 = 1;
            }

            switch(alt172) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_createRoleStatement9154);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 110, FOLLOW_K_NOT_in_createRoleStatement9156);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_createRoleStatement9158);
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  ifNotExists = true;
               }
            default:
               this.pushFollow(FOLLOW_userOrRoleName_in_createRoleStatement9166);
               name = this.userOrRoleName();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               int alt173 = 2;
               int LA173_0 = this.input.LA(1);
               if(LA173_0 == 167) {
                  alt173 = 1;
               }

               switch(alt173) {
               case 1:
                  this.match(this.input, 167, FOLLOW_K_WITH_in_createRoleStatement9176);
                  if(this.state.failed) {
                     return stmt;
                  }

                  this.pushFollow(FOLLOW_roleOptions_in_createRoleStatement9178);
                  this.roleOptions(opts);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return stmt;
                  }
               default:
                  if(this.state.backtracking == 0) {
                     if(!opts.getLogin().isPresent()) {
                        opts.setOption(IRoleManager.Option.LOGIN, Boolean.valueOf(false));
                     }

                     if(!opts.getSuperuser().isPresent()) {
                        opts.setOption(IRoleManager.Option.SUPERUSER, Boolean.valueOf(false));
                     }

                     stmt = new CreateRoleStatement(name, opts, ifNotExists);
                  }
               }
            }
         } catch (RecognitionException var13) {
            this.reportError(var13);
            this.recover(this.input, var13);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final CreateTableStatement.RawStatement createTableStatement() throws RecognitionException {
      CreateTableStatement.RawStatement expr = null;
      CFName cf = null;
      boolean ifNotExists = false;

      try {
         try {
            this.match(this.input, 52, FOLLOW_K_CREATE_in_createTableStatement5114);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 47, FOLLOW_K_COLUMNFAMILY_in_createTableStatement5116);
            if(this.state.failed) {
               return expr;
            }

            int alt90 = 2;
            int LA90_0 = this.input.LA(1);
            if(LA90_0 == 79) {
               alt90 = 1;
            }

            switch(alt90) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_createTableStatement5119);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 110, FOLLOW_K_NOT_in_createTableStatement5121);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_createTableStatement5123);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  ifNotExists = true;
               }
            default:
               this.pushFollow(FOLLOW_columnFamilyName_in_createTableStatement5138);
               cf = this.columnFamilyName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  expr = new CreateTableStatement.RawStatement(cf, ifNotExists);
               }

               this.pushFollow(FOLLOW_cfamDefinition_in_createTableStatement5148);
               this.cfamDefinition(expr);
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final CreateTriggerStatement createTriggerStatement() throws RecognitionException {
      CreateTriggerStatement expr = null;
      Token cls = null;
      ColumnIdentifier name = null;
      CFName cf = null;
      boolean ifNotExists = false;

      try {
         try {
            this.match(this.input, 52, FOLLOW_K_CREATE_in_createTriggerStatement6095);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 148, FOLLOW_K_TRIGGER_in_createTriggerStatement6097);
            if(this.state.failed) {
               return expr;
            }

            int alt123 = 2;
            int LA123_0 = this.input.LA(1);
            if(LA123_0 == 79) {
               alt123 = 1;
            }

            switch(alt123) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_createTriggerStatement6100);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 110, FOLLOW_K_NOT_in_createTriggerStatement6102);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_createTriggerStatement6104);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  ifNotExists = true;
               }
            default:
               this.pushFollow(FOLLOW_ident_in_createTriggerStatement6114);
               name = this.ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 113, FOLLOW_K_ON_in_createTriggerStatement6125);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_columnFamilyName_in_createTriggerStatement6129);
               cf = this.columnFamilyName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 160, FOLLOW_K_USING_in_createTriggerStatement6131);
               if(this.state.failed) {
                  return expr;
               }

               cls = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_createTriggerStatement6135);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  expr = new CreateTriggerStatement(cf, name.toString(), cls != null?cls.getText():null, ifNotExists);
               }
            }
         } catch (RecognitionException var12) {
            this.reportError(var12);
            this.recover(this.input, var12);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final CreateTypeStatement createTypeStatement() throws RecognitionException {
      CreateTypeStatement expr = null;
      UTName tn = null;
      boolean ifNotExists = false;

      try {
         this.match(this.input, 52, FOLLOW_K_CREATE_in_createTypeStatement5496);
         if(this.state.failed) {
            return expr;
         } else {
            this.match(this.input, 152, FOLLOW_K_TYPE_in_createTypeStatement5498);
            if(this.state.failed) {
               return expr;
            } else {
               int alt104 = 2;
               int LA104_0 = this.input.LA(1);
               if(LA104_0 == 79) {
                  alt104 = 1;
               }

               switch(alt104) {
               case 1:
                  this.match(this.input, 79, FOLLOW_K_IF_in_createTypeStatement5501);
                  if(this.state.failed) {
                     return expr;
                  } else {
                     this.match(this.input, 110, FOLLOW_K_NOT_in_createTypeStatement5503);
                     if(this.state.failed) {
                        return expr;
                     } else {
                        this.match(this.input, 67, FOLLOW_K_EXISTS_in_createTypeStatement5505);
                        if(this.state.failed) {
                           return expr;
                        } else if(this.state.backtracking == 0) {
                           ifNotExists = true;
                        }
                     }
                  }
               default:
                  this.pushFollow(FOLLOW_userTypeName_in_createTypeStatement5523);
                  tn = this.userTypeName();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  } else {
                     if(this.state.backtracking == 0) {
                        expr = new CreateTypeStatement(tn, ifNotExists);
                     }

                     this.match(this.input, 194, FOLLOW_194_in_createTypeStatement5536);
                     if(this.state.failed) {
                        return expr;
                     } else {
                        this.pushFollow(FOLLOW_typeColumns_in_createTypeStatement5538);
                        this.typeColumns(expr);
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        } else {
                           while(true) {
                              int alt106 = 2;
                              int LA106_0 = this.input.LA(1);
                              if(LA106_0 == 198) {
                                 alt106 = 1;
                              }

                              switch(alt106) {
                              case 1:
                                 this.match(this.input, 198, FOLLOW_198_in_createTypeStatement5543);
                                 if(this.state.failed) {
                                    return expr;
                                 }

                                 int alt105 = 2;
                                 int LA105_0 = this.input.LA(1);
                                 if(LA105_0 == 23 || LA105_0 >= 28 && LA105_0 <= 29 || LA105_0 == 34 || LA105_0 == 36 || LA105_0 >= 40 && LA105_0 <= 42 || LA105_0 >= 44 && LA105_0 <= 46 || LA105_0 >= 48 && LA105_0 <= 51 || LA105_0 >= 53 && LA105_0 <= 55 || LA105_0 >= 60 && LA105_0 <= 62 || LA105_0 == 64 || LA105_0 >= 67 && LA105_0 <= 70 || LA105_0 == 73 || LA105_0 >= 75 && LA105_0 <= 76 || LA105_0 == 78 || LA105_0 >= 82 && LA105_0 <= 84 || LA105_0 == 86 || LA105_0 >= 89 && LA105_0 <= 91 || LA105_0 >= 93 && LA105_0 <= 95 || LA105_0 >= 97 && LA105_0 <= 99 || LA105_0 == 104 || LA105_0 == 107 || LA105_0 == 109 || LA105_0 == 114 || LA105_0 >= 117 && LA105_0 <= 121 || LA105_0 == 127 || LA105_0 == 129 || LA105_0 >= 131 && LA105_0 <= 132 || LA105_0 >= 135 && LA105_0 <= 145 || LA105_0 == 148 || LA105_0 >= 150 && LA105_0 <= 152 || LA105_0 >= 158 && LA105_0 <= 159 || LA105_0 >= 161 && LA105_0 <= 164 || LA105_0 == 168 || LA105_0 == 178) {
                                    alt105 = 1;
                                 }

                                 switch(alt105) {
                                 case 1:
                                    this.pushFollow(FOLLOW_typeColumns_in_createTypeStatement5545);
                                    this.typeColumns(expr);
                                    --this.state._fsp;
                                    if(this.state.failed) {
                                       return expr;
                                    }
                                    continue;
                                 }
                              default:
                                 this.match(this.input, 195, FOLLOW_195_in_createTypeStatement5552);
                                 if(this.state.failed) {
                                    return expr;
                                 }

                                 return expr;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      } catch (RecognitionException var14) {
         this.reportError(var14);
         this.recover(this.input, var14);
         return expr;
      } finally {
         ;
      }
   }

   public final CreateRoleStatement createUserStatement() throws RecognitionException {
      CreateRoleStatement stmt = null;
      ParserRuleReturnScope u = null;
      RoleOptions opts = new RoleOptions();
      opts.setOption(IRoleManager.Option.LOGIN, Boolean.valueOf(true));
      boolean superuser = false;
      boolean ifNotExists = false;
      RoleName name = new RoleName();

      try {
         try {
            this.match(this.input, 52, FOLLOW_K_CREATE_in_createUserStatement8883);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 158, FOLLOW_K_USER_in_createUserStatement8885);
            if(this.state.failed) {
               return stmt;
            }

            int alt166 = 2;
            int LA166_0 = this.input.LA(1);
            if(LA166_0 == 79) {
               alt166 = 1;
            }

            switch(alt166) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_createUserStatement8888);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 110, FOLLOW_K_NOT_in_createUserStatement8890);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_createUserStatement8892);
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  ifNotExists = true;
               }
            default:
               this.pushFollow(FOLLOW_username_in_createUserStatement8900);
               u = this.username();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  name.setName(u != null?this.input.toString(u.start, u.stop):null, true);
               }

               int alt167 = 2;
               int LA167_0 = this.input.LA(1);
               if(LA167_0 == 167) {
                  alt167 = 1;
               }

               switch(alt167) {
               case 1:
                  this.match(this.input, 167, FOLLOW_K_WITH_in_createUserStatement8912);
                  if(this.state.failed) {
                     return stmt;
                  }

                  this.pushFollow(FOLLOW_userPassword_in_createUserStatement8914);
                  this.userPassword(opts);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return stmt;
                  }
               default:
                  int alt168 = 3;
                  int LA168_0 = this.input.LA(1);
                  if(LA168_0 == 140) {
                     alt168 = 1;
                  } else if(LA168_0 == 109) {
                     alt168 = 2;
                  }

                  switch(alt168) {
                  case 1:
                     this.match(this.input, 140, FOLLOW_K_SUPERUSER_in_createUserStatement8928);
                     if(this.state.failed) {
                        return stmt;
                     }

                     if(this.state.backtracking == 0) {
                        superuser = true;
                     }
                     break;
                  case 2:
                     this.match(this.input, 109, FOLLOW_K_NOSUPERUSER_in_createUserStatement8934);
                     if(this.state.failed) {
                        return stmt;
                     }

                     if(this.state.backtracking == 0) {
                        superuser = false;
                     }
                  }

                  if(this.state.backtracking == 0) {
                     opts.setOption(IRoleManager.Option.SUPERUSER, Boolean.valueOf(superuser));
                     stmt = new CreateRoleStatement(name, opts, ifNotExists);
                  }
               }
            }
         } catch (RecognitionException var17) {
            this.reportError(var17);
            this.recover(this.input, var17);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final void customIndexExpression(WhereClause.Builder clause) throws RecognitionException {
      Term.Raw t = null;
      IndexName name = new IndexName();

      try {
         try {
            this.match(this.input, 213, FOLLOW_213_in_customIndexExpression2982);
            if(this.state.failed) {
               return;
            }

            this.pushFollow(FOLLOW_idxName_in_customIndexExpression2984);
            this.idxName(name);
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            this.match(this.input, 198, FOLLOW_198_in_customIndexExpression2987);
            if(this.state.failed) {
               return;
            }

            this.pushFollow(FOLLOW_term_in_customIndexExpression2991);
            t = this.term();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            this.match(this.input, 195, FOLLOW_195_in_customIndexExpression2993);
            if(this.state.failed) {
               return;
            }

            if(this.state.backtracking == 0) {
               clause.add(new CustomIndexExpression(name, t));
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

      } finally {
         ;
      }
   }

   public final DataResource dataResource() throws RecognitionException {
      DataResource res = null;
      String ks = null;
      CFName cf = null;

      try {
         try {
            int alt160 = true;
            byte alt160;
            int nvaeMark;
            switch(this.input.LA(1)) {
            case 23:
            case 28:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
            case 177:
            case 178:
               alt160 = 3;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return res;
               }

               NoViableAltException nvae = new NoViableAltException("", 160, 0, this.input);
               throw nvae;
            case 29:
               int LA160_1 = this.input.LA(2);
               if(LA160_1 == 93) {
                  alt160 = 1;
               } else {
                  if(LA160_1 != -1 && LA160_1 != 72 && LA160_1 != 108 && LA160_1 != 112 && LA160_1 != 146 && LA160_1 != 201 && LA160_1 != 204) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return res;
                     }

                     nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 160, 1, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt160 = 3;
               }
               break;
            case 92:
               alt160 = 2;
            }

            switch(alt160) {
            case 1:
               this.match(this.input, 29, FOLLOW_K_ALL_in_dataResource8519);
               if(this.state.failed) {
                  return res;
               }

               this.match(this.input, 93, FOLLOW_K_KEYSPACES_in_dataResource8521);
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = DataResource.root();
               }
               break;
            case 2:
               this.match(this.input, 92, FOLLOW_K_KEYSPACE_in_dataResource8531);
               if(this.state.failed) {
                  return res;
               }

               this.pushFollow(FOLLOW_keyspaceName_in_dataResource8537);
               ks = this.keyspaceName();
               --this.state._fsp;
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = DataResource.keyspace(ks);
               }
               break;
            case 3:
               int alt159 = 2;
               nvaeMark = this.input.LA(1);
               if(nvaeMark == 47) {
                  alt159 = 1;
               }

               switch(alt159) {
               case 1:
                  this.match(this.input, 47, FOLLOW_K_COLUMNFAMILY_in_dataResource8549);
                  if(this.state.failed) {
                     return res;
                  }
               default:
                  this.pushFollow(FOLLOW_columnFamilyName_in_dataResource8558);
                  cf = this.columnFamilyName();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return res;
                  }

                  if(this.state.backtracking == 0) {
                     res = DataResource.table(cf.getKeyspace(), cf.getColumnFamily());
                  }
               }
            }
         } catch (RecognitionException var17) {
            this.reportError(var17);
            this.recover(this.input, var17);
         }

         return res;
      } finally {
         ;
      }
   }

   public final Operation.RawDeletion deleteOp() throws RecognitionException {
      Operation.RawDeletion op = null;
      ColumnMetadata.Raw c = null;
      Term.Raw t = null;
      FieldIdentifier field = null;

      try {
         try {
            int alt61 = true;
            int alt61 = this.dfa61.predict(this.input);
            switch(alt61) {
            case 1:
               this.pushFollow(FOLLOW_cident_in_deleteOp3845);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Operation.RawDeletion)op;
               }

               if(this.state.backtracking == 0) {
                  op = new Operation.ColumnDeletion(c);
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_cident_in_deleteOp3872);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Operation.RawDeletion)op;
               }

               this.match(this.input, 210, FOLLOW_210_in_deleteOp3874);
               if(this.state.failed) {
                  return (Operation.RawDeletion)op;
               }

               this.pushFollow(FOLLOW_term_in_deleteOp3878);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Operation.RawDeletion)op;
               }

               this.match(this.input, 212, FOLLOW_212_in_deleteOp3880);
               if(this.state.failed) {
                  return (Operation.RawDeletion)op;
               }

               if(this.state.backtracking == 0) {
                  op = new Operation.ElementDeletion(c, t);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_cident_in_deleteOp3892);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Operation.RawDeletion)op;
               }

               this.match(this.input, 201, FOLLOW_201_in_deleteOp3894);
               if(this.state.failed) {
                  return (Operation.RawDeletion)op;
               }

               this.pushFollow(FOLLOW_fident_in_deleteOp3898);
               field = this.fident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Operation.RawDeletion)op;
               }

               if(this.state.backtracking == 0) {
                  op = new Operation.FieldDeletion(c, field);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return (Operation.RawDeletion)op;
      } finally {
         ;
      }
   }

   public final List<Operation.RawDeletion> deleteSelection() throws RecognitionException {
      List<Operation.RawDeletion> operations = null;
      Operation.RawDeletion t1 = null;
      Operation.RawDeletion tN = null;

      try {
         if(this.state.backtracking == 0) {
            operations = new ArrayList();
         }

         this.pushFollow(FOLLOW_deleteOp_in_deleteSelection3799);
         t1 = this.deleteOp();
         --this.state._fsp;
         if(this.state.failed) {
            return operations;
         } else {
            if(this.state.backtracking == 0) {
               operations.add(t1);
            }

            while(true) {
               int alt60 = 2;
               int LA60_0 = this.input.LA(1);
               if(LA60_0 == 198) {
                  alt60 = 1;
               }

               switch(alt60) {
               case 1:
                  this.match(this.input, 198, FOLLOW_198_in_deleteSelection3814);
                  if(this.state.failed) {
                     return operations;
                  }

                  this.pushFollow(FOLLOW_deleteOp_in_deleteSelection3818);
                  tN = this.deleteOp();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return operations;
                  }

                  if(this.state.backtracking == 0) {
                     operations.add(tN);
                  }
                  break;
               default:
                  return operations;
               }
            }
         }
      } catch (RecognitionException var10) {
         this.reportError(var10);
         this.recover(this.input, var10);
         return operations;
      } finally {
         ;
      }
   }

   public final DeleteStatement.Parsed deleteStatement() throws RecognitionException {
      DeleteStatement.Parsed expr = null;
      List<Operation.RawDeletion> dels = null;
      CFName cf = null;
      WhereClause.Builder wclause = null;
      List<Pair<ColumnMetadata.Raw, ColumnCondition.Raw>> conditions = null;
      Attributes.Raw attrs = new Attributes.Raw();
      List<Operation.RawDeletion> columnDeletions = Collections.emptyList();
      boolean ifExists = false;

      try {
         try {
            this.match(this.input, 57, FOLLOW_K_DELETE_in_deleteStatement3681);
            if(this.state.failed) {
               return expr;
            }

            int alt56 = 2;
            int LA56_0 = this.input.LA(1);
            if(LA56_0 == 14 || LA56_0 == 23 || LA56_0 >= 28 && LA56_0 <= 29 || LA56_0 == 34 || LA56_0 == 36 || LA56_0 >= 40 && LA56_0 <= 42 || LA56_0 >= 44 && LA56_0 <= 46 || LA56_0 >= 48 && LA56_0 <= 51 || LA56_0 >= 53 && LA56_0 <= 55 || LA56_0 >= 60 && LA56_0 <= 62 || LA56_0 == 64 || LA56_0 >= 67 && LA56_0 <= 70 || LA56_0 == 73 || LA56_0 >= 75 && LA56_0 <= 76 || LA56_0 == 78 || LA56_0 >= 82 && LA56_0 <= 84 || LA56_0 == 86 || LA56_0 >= 89 && LA56_0 <= 91 || LA56_0 >= 93 && LA56_0 <= 95 || LA56_0 >= 97 && LA56_0 <= 99 || LA56_0 == 104 || LA56_0 == 107 || LA56_0 == 109 || LA56_0 == 114 || LA56_0 >= 117 && LA56_0 <= 121 || LA56_0 == 127 || LA56_0 == 129 || LA56_0 >= 131 && LA56_0 <= 132 || LA56_0 >= 135 && LA56_0 <= 145 || LA56_0 == 148 || LA56_0 >= 150 && LA56_0 <= 152 || LA56_0 >= 158 && LA56_0 <= 159 || LA56_0 >= 161 && LA56_0 <= 164 || LA56_0 == 168 || LA56_0 == 178) {
               alt56 = 1;
            }

            switch(alt56) {
            case 1:
               this.pushFollow(FOLLOW_deleteSelection_in_deleteStatement3687);
               dels = this.deleteSelection();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  columnDeletions = dels;
               }
            }

            this.match(this.input, 72, FOLLOW_K_FROM_in_deleteStatement3700);
            if(this.state.failed) {
               return expr;
            }

            this.pushFollow(FOLLOW_columnFamilyName_in_deleteStatement3704);
            cf = this.columnFamilyName();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            int alt57 = 2;
            int LA57_0 = this.input.LA(1);
            if(LA57_0 == 160) {
               alt57 = 1;
            }

            switch(alt57) {
            case 1:
               this.pushFollow(FOLLOW_usingClauseDelete_in_deleteStatement3714);
               this.usingClauseDelete(attrs);
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }
            default:
               this.match(this.input, 166, FOLLOW_K_WHERE_in_deleteStatement3726);
               if(this.state.failed) {
                  return expr;
               }
            }

            this.pushFollow(FOLLOW_whereClause_in_deleteStatement3730);
            wclause = this.whereClause();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            int alt59 = 2;
            int LA59_0 = this.input.LA(1);
            if(LA59_0 == 79) {
               alt59 = 1;
            }

            switch(alt59) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_deleteStatement3740);
               if(this.state.failed) {
                  return expr;
               }

               int alt58 = true;
               int LA58_0 = this.input.LA(1);
               byte alt58;
               if(LA58_0 == 67) {
                  int LA58_1 = this.input.LA(2);
                  if(LA58_1 != -1 && LA58_1 != 33 && LA58_1 != 57 && LA58_1 != 85 && LA58_1 != 156 && LA58_1 != 204) {
                     if(LA58_1 != 80 && LA58_1 != 192 && LA58_1 != 201 && (LA58_1 < 205 || LA58_1 > 210)) {
                        if(this.state.backtracking > 0) {
                           this.state.failed = true;
                           return expr;
                        }

                        int nvaeMark = this.input.mark();

                        try {
                           this.input.consume();
                           NoViableAltException nvae = new NoViableAltException("", 58, 1, this.input);
                           throw nvae;
                        } finally {
                           this.input.rewind(nvaeMark);
                        }
                     }

                     alt58 = 2;
                  } else {
                     alt58 = 1;
                  }
               } else {
                  if(LA58_0 != 14 && LA58_0 != 23 && (LA58_0 < 28 || LA58_0 > 29) && LA58_0 != 34 && LA58_0 != 36 && (LA58_0 < 40 || LA58_0 > 42) && (LA58_0 < 44 || LA58_0 > 46) && (LA58_0 < 48 || LA58_0 > 51) && (LA58_0 < 53 || LA58_0 > 55) && (LA58_0 < 60 || LA58_0 > 62) && LA58_0 != 64 && (LA58_0 < 68 || LA58_0 > 70) && LA58_0 != 73 && (LA58_0 < 75 || LA58_0 > 76) && LA58_0 != 78 && (LA58_0 < 82 || LA58_0 > 84) && LA58_0 != 86 && (LA58_0 < 89 || LA58_0 > 91) && (LA58_0 < 93 || LA58_0 > 95) && (LA58_0 < 97 || LA58_0 > 99) && LA58_0 != 104 && LA58_0 != 107 && LA58_0 != 109 && LA58_0 != 114 && (LA58_0 < 117 || LA58_0 > 121) && LA58_0 != 127 && LA58_0 != 129 && (LA58_0 < 131 || LA58_0 > 132) && (LA58_0 < 135 || LA58_0 > 145) && LA58_0 != 148 && (LA58_0 < 150 || LA58_0 > 152) && (LA58_0 < 158 || LA58_0 > 159) && (LA58_0 < 161 || LA58_0 > 164) && LA58_0 != 168 && LA58_0 != 178) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return expr;
                     }

                     NoViableAltException nvae = new NoViableAltException("", 58, 0, this.input);
                     throw nvae;
                  }

                  alt58 = 2;
               }

               switch(alt58) {
               case 1:
                  this.match(this.input, 67, FOLLOW_K_EXISTS_in_deleteStatement3744);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     ifExists = true;
                  }
                  break;
               case 2:
                  this.pushFollow(FOLLOW_updateConditions_in_deleteStatement3752);
                  conditions = this.updateConditions();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }
               }
            }

            if(this.state.backtracking == 0) {
               expr = new DeleteStatement.Parsed(cf, attrs, columnDeletions, wclause.build(), conditions == null?Collections.emptyList():conditions, ifExists);
            }
         } catch (RecognitionException var29) {
            this.reportError(var29);
            this.recover(this.input, var29);
         }

         return expr;
      } finally {
         ;
      }
   }

   public void displayRecognitionError(String[] tokenNames, RecognitionException e) {
      int i = 0;

      for(int m = this.listeners.size(); i < m; ++i) {
         ((ErrorListener)this.listeners.get(i)).syntaxError(this, tokenNames, e);
      }

   }

   public final DropAggregateStatement dropAggregateStatement() throws RecognitionException {
      DropAggregateStatement expr = null;
      FunctionName fn = null;
      CQL3Type.Raw v = null;
      boolean ifExists = false;
      List<CQL3Type.Raw> argsTypes = new ArrayList();
      boolean argsPresent = false;

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropAggregateStatement4386);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 28, FOLLOW_K_AGGREGATE_in_dropAggregateStatement4388);
            if(this.state.failed) {
               return expr;
            }

            int alt74 = 2;
            int LA74_0 = this.input.LA(1);
            if(LA74_0 == 79) {
               alt74 = 1;
            }

            switch(alt74) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropAggregateStatement4397);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropAggregateStatement4399);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            }

            this.pushFollow(FOLLOW_functionName_in_dropAggregateStatement4414);
            fn = this.functionName();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            int alt77 = 2;
            int LA77_0 = this.input.LA(1);
            if(LA77_0 == 194) {
               alt77 = 1;
            }

            switch(alt77) {
            case 1:
               this.match(this.input, 194, FOLLOW_194_in_dropAggregateStatement4432);
               if(this.state.failed) {
                  return expr;
               }

               int alt76 = 2;
               int LA76_0 = this.input.LA(1);
               if(LA76_0 == 23 || LA76_0 >= 28 && LA76_0 <= 29 || LA76_0 == 34 || LA76_0 == 36 || LA76_0 >= 40 && LA76_0 <= 42 || LA76_0 >= 44 && LA76_0 <= 46 || LA76_0 >= 48 && LA76_0 <= 51 || LA76_0 >= 53 && LA76_0 <= 55 || LA76_0 >= 60 && LA76_0 <= 62 || LA76_0 == 64 || LA76_0 >= 67 && LA76_0 <= 70 || LA76_0 == 73 || LA76_0 >= 75 && LA76_0 <= 76 || LA76_0 == 78 || LA76_0 >= 82 && LA76_0 <= 84 || LA76_0 == 86 || LA76_0 >= 89 && LA76_0 <= 91 || LA76_0 >= 93 && LA76_0 <= 95 || LA76_0 >= 97 && LA76_0 <= 99 || LA76_0 == 104 || LA76_0 == 107 || LA76_0 == 109 || LA76_0 == 114 || LA76_0 >= 117 && LA76_0 <= 121 || LA76_0 == 127 || LA76_0 == 129 || LA76_0 >= 131 && LA76_0 <= 132 || LA76_0 >= 134 && LA76_0 <= 145 || LA76_0 == 148 || LA76_0 >= 150 && LA76_0 <= 152 || LA76_0 >= 158 && LA76_0 <= 159 || LA76_0 >= 161 && LA76_0 <= 164 || LA76_0 == 168 || LA76_0 == 178 || LA76_0 == 182) {
                  alt76 = 1;
               }

               switch(alt76) {
               case 1:
                  this.pushFollow(FOLLOW_comparatorType_in_dropAggregateStatement4460);
                  v = this.comparatorType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     argsTypes.add(v);
                  }

                  label424:
                  while(true) {
                     int alt75 = 2;
                     int LA75_0 = this.input.LA(1);
                     if(LA75_0 == 198) {
                        alt75 = 1;
                     }

                     switch(alt75) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_dropAggregateStatement4478);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_comparatorType_in_dropAggregateStatement4482);
                        v = this.comparatorType();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }

                        if(this.state.backtracking == 0) {
                           argsTypes.add(v);
                        }
                        break;
                     default:
                        break label424;
                     }
                  }
               default:
                  this.match(this.input, 195, FOLLOW_195_in_dropAggregateStatement4510);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     argsPresent = true;
                  }
               }
            }

            if(this.state.backtracking == 0) {
               expr = new DropAggregateStatement(fn, argsTypes, argsPresent, ifExists);
            }
         } catch (RecognitionException var19) {
            this.reportError(var19);
            this.recover(this.input, var19);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final DropFunctionStatement dropFunctionStatement() throws RecognitionException {
      DropFunctionStatement expr = null;
      FunctionName fn = null;
      CQL3Type.Raw v = null;
      boolean ifExists = false;
      List<CQL3Type.Raw> argsTypes = new ArrayList();
      boolean argsPresent = false;

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropFunctionStatement4868);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 75, FOLLOW_K_FUNCTION_in_dropFunctionStatement4870);
            if(this.state.failed) {
               return expr;
            }

            int alt85 = 2;
            int LA85_0 = this.input.LA(1);
            if(LA85_0 == 79) {
               alt85 = 1;
            }

            switch(alt85) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropFunctionStatement4879);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropFunctionStatement4881);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            }

            this.pushFollow(FOLLOW_functionName_in_dropFunctionStatement4896);
            fn = this.functionName();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            int alt88 = 2;
            int LA88_0 = this.input.LA(1);
            if(LA88_0 == 194) {
               alt88 = 1;
            }

            switch(alt88) {
            case 1:
               this.match(this.input, 194, FOLLOW_194_in_dropFunctionStatement4914);
               if(this.state.failed) {
                  return expr;
               }

               int alt87 = 2;
               int LA87_0 = this.input.LA(1);
               if(LA87_0 == 23 || LA87_0 >= 28 && LA87_0 <= 29 || LA87_0 == 34 || LA87_0 == 36 || LA87_0 >= 40 && LA87_0 <= 42 || LA87_0 >= 44 && LA87_0 <= 46 || LA87_0 >= 48 && LA87_0 <= 51 || LA87_0 >= 53 && LA87_0 <= 55 || LA87_0 >= 60 && LA87_0 <= 62 || LA87_0 == 64 || LA87_0 >= 67 && LA87_0 <= 70 || LA87_0 == 73 || LA87_0 >= 75 && LA87_0 <= 76 || LA87_0 == 78 || LA87_0 >= 82 && LA87_0 <= 84 || LA87_0 == 86 || LA87_0 >= 89 && LA87_0 <= 91 || LA87_0 >= 93 && LA87_0 <= 95 || LA87_0 >= 97 && LA87_0 <= 99 || LA87_0 == 104 || LA87_0 == 107 || LA87_0 == 109 || LA87_0 == 114 || LA87_0 >= 117 && LA87_0 <= 121 || LA87_0 == 127 || LA87_0 == 129 || LA87_0 >= 131 && LA87_0 <= 132 || LA87_0 >= 134 && LA87_0 <= 145 || LA87_0 == 148 || LA87_0 >= 150 && LA87_0 <= 152 || LA87_0 >= 158 && LA87_0 <= 159 || LA87_0 >= 161 && LA87_0 <= 164 || LA87_0 == 168 || LA87_0 == 178 || LA87_0 == 182) {
                  alt87 = 1;
               }

               switch(alt87) {
               case 1:
                  this.pushFollow(FOLLOW_comparatorType_in_dropFunctionStatement4942);
                  v = this.comparatorType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     argsTypes.add(v);
                  }

                  label424:
                  while(true) {
                     int alt86 = 2;
                     int LA86_0 = this.input.LA(1);
                     if(LA86_0 == 198) {
                        alt86 = 1;
                     }

                     switch(alt86) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_dropFunctionStatement4960);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_comparatorType_in_dropFunctionStatement4964);
                        v = this.comparatorType();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }

                        if(this.state.backtracking == 0) {
                           argsTypes.add(v);
                        }
                        break;
                     default:
                        break label424;
                     }
                  }
               default:
                  this.match(this.input, 195, FOLLOW_195_in_dropFunctionStatement4992);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     argsPresent = true;
                  }
               }
            }

            if(this.state.backtracking == 0) {
               expr = new DropFunctionStatement(fn, argsTypes, argsPresent, ifExists);
            }
         } catch (RecognitionException var19) {
            this.reportError(var19);
            this.recover(this.input, var19);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final DropIndexStatement dropIndexStatement() throws RecognitionException {
      DropIndexStatement expr = null;
      IndexName index = null;
      boolean ifExists = false;

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropIndexStatement7252);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 81, FOLLOW_K_INDEX_in_dropIndexStatement7254);
            if(this.state.failed) {
               return expr;
            }

            int alt138 = 2;
            int LA138_0 = this.input.LA(1);
            if(LA138_0 == 79) {
               alt138 = 1;
            }

            switch(alt138) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropIndexStatement7257);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropIndexStatement7259);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            default:
               this.pushFollow(FOLLOW_indexName_in_dropIndexStatement7268);
               index = this.indexName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  expr = new DropIndexStatement(index, ifExists);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final DropKeyspaceStatement dropKeyspaceStatement() throws RecognitionException {
      DropKeyspaceStatement ksp = null;
      String ks = null;
      boolean ifExists = false;

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropKeyspaceStatement7102);
            if(this.state.failed) {
               return ksp;
            }

            this.match(this.input, 92, FOLLOW_K_KEYSPACE_in_dropKeyspaceStatement7104);
            if(this.state.failed) {
               return ksp;
            }

            int alt135 = 2;
            int LA135_0 = this.input.LA(1);
            if(LA135_0 == 79) {
               alt135 = 1;
            }

            switch(alt135) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropKeyspaceStatement7107);
               if(this.state.failed) {
                  return ksp;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropKeyspaceStatement7109);
               if(this.state.failed) {
                  return ksp;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            default:
               this.pushFollow(FOLLOW_keyspaceName_in_dropKeyspaceStatement7118);
               ks = this.keyspaceName();
               --this.state._fsp;
               if(this.state.failed) {
                  return ksp;
               }

               if(this.state.backtracking == 0) {
                  ksp = new DropKeyspaceStatement(ks, ifExists);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return ksp;
      } finally {
         ;
      }
   }

   public final DropViewStatement dropMaterializedViewStatement() throws RecognitionException {
      DropViewStatement expr = null;
      CFName cf = null;
      boolean ifExists = false;

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropMaterializedViewStatement7308);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 100, FOLLOW_K_MATERIALIZED_in_dropMaterializedViewStatement7310);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 165, FOLLOW_K_VIEW_in_dropMaterializedViewStatement7312);
            if(this.state.failed) {
               return expr;
            }

            int alt139 = 2;
            int LA139_0 = this.input.LA(1);
            if(LA139_0 == 79) {
               alt139 = 1;
            }

            switch(alt139) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropMaterializedViewStatement7315);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropMaterializedViewStatement7317);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            default:
               this.pushFollow(FOLLOW_columnFamilyName_in_dropMaterializedViewStatement7326);
               cf = this.columnFamilyName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  expr = new DropViewStatement(cf, ifExists);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final DropRoleStatement dropRoleStatement() throws RecognitionException {
      DropRoleStatement stmt = null;
      RoleName name = null;
      boolean ifExists = false;

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropRoleStatement9284);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 131, FOLLOW_K_ROLE_in_dropRoleStatement9286);
            if(this.state.failed) {
               return stmt;
            }

            int alt175 = 2;
            int LA175_0 = this.input.LA(1);
            if(LA175_0 == 79) {
               alt175 = 1;
            }

            switch(alt175) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropRoleStatement9289);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropRoleStatement9291);
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            default:
               this.pushFollow(FOLLOW_userOrRoleName_in_dropRoleStatement9299);
               name = this.userOrRoleName();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = new DropRoleStatement(name, ifExists);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final DropTableStatement dropTableStatement() throws RecognitionException {
      DropTableStatement stmt = null;
      CFName cf = null;
      boolean ifExists = false;

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropTableStatement7152);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 47, FOLLOW_K_COLUMNFAMILY_in_dropTableStatement7154);
            if(this.state.failed) {
               return stmt;
            }

            int alt136 = 2;
            int LA136_0 = this.input.LA(1);
            if(LA136_0 == 79) {
               alt136 = 1;
            }

            switch(alt136) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropTableStatement7157);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropTableStatement7159);
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            default:
               this.pushFollow(FOLLOW_columnFamilyName_in_dropTableStatement7168);
               cf = this.columnFamilyName();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = new DropTableStatement(cf, ifExists);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final DropTriggerStatement dropTriggerStatement() throws RecognitionException {
      DropTriggerStatement expr = null;
      ColumnIdentifier name = null;
      CFName cf = null;
      boolean ifExists = false;

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropTriggerStatement6176);
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 148, FOLLOW_K_TRIGGER_in_dropTriggerStatement6178);
            if(this.state.failed) {
               return expr;
            }

            int alt124 = 2;
            int LA124_0 = this.input.LA(1);
            if(LA124_0 == 79) {
               alt124 = 1;
            }

            switch(alt124) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropTriggerStatement6181);
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropTriggerStatement6183);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            default:
               this.pushFollow(FOLLOW_ident_in_dropTriggerStatement6193);
               name = this.ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               this.match(this.input, 113, FOLLOW_K_ON_in_dropTriggerStatement6196);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_columnFamilyName_in_dropTriggerStatement6200);
               cf = this.columnFamilyName();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  expr = new DropTriggerStatement(cf, name.toString(), ifExists);
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final DropTypeStatement dropTypeStatement() throws RecognitionException {
      DropTypeStatement stmt = null;
      UTName name = null;
      boolean ifExists = false;

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropTypeStatement7202);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 152, FOLLOW_K_TYPE_in_dropTypeStatement7204);
            if(this.state.failed) {
               return stmt;
            }

            int alt137 = 2;
            int LA137_0 = this.input.LA(1);
            if(LA137_0 == 79) {
               alt137 = 1;
            }

            switch(alt137) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropTypeStatement7207);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropTypeStatement7209);
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            default:
               this.pushFollow(FOLLOW_userTypeName_in_dropTypeStatement7218);
               name = this.userTypeName();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = new DropTypeStatement(name, ifExists);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final DropRoleStatement dropUserStatement() throws RecognitionException {
      DropRoleStatement stmt = null;
      ParserRuleReturnScope u = null;
      boolean ifExists = false;
      RoleName name = new RoleName();

      try {
         try {
            this.match(this.input, 63, FOLLOW_K_DROP_in_dropUserStatement9073);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 158, FOLLOW_K_USER_in_dropUserStatement9075);
            if(this.state.failed) {
               return stmt;
            }

            int alt171 = 2;
            int LA171_0 = this.input.LA(1);
            if(LA171_0 == 79) {
               alt171 = 1;
            }

            switch(alt171) {
            case 1:
               this.match(this.input, 79, FOLLOW_K_IF_in_dropUserStatement9078);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 67, FOLLOW_K_EXISTS_in_dropUserStatement9080);
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  ifExists = true;
               }
            default:
               this.pushFollow(FOLLOW_username_in_dropUserStatement9088);
               u = this.username();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  name.setName(u != null?this.input.toString(u.start, u.stop):null, true);
                  stmt = new DropRoleStatement(name, ifExists);
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final FieldIdentifier fident() throws RecognitionException {
      FieldIdentifier id = null;
      Token t = null;
      String k = null;

      try {
         try {
            int alt183 = true;
            byte alt183;
            switch(this.input.LA(1)) {
            case 23:
               alt183 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return id;
               }

               NoViableAltException nvae = new NoViableAltException("", 183, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt183 = 3;
               break;
            case 178:
               alt183 = 2;
            }

            switch(alt183) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_fident9763);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = FieldIdentifier.forUnquoted(t != null?t.getText():null);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_fident9788);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = FieldIdentifier.forQuoted(t != null?t.getText():null);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_unreserved_keyword_in_fident9807);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = FieldIdentifier.forUnquoted(k);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return id;
      } finally {
         ;
      }
   }

   public final Selectable.Raw fieldSelectorModifier(Selectable.Raw receiver) throws RecognitionException {
      Selectable.Raw s = null;
      FieldIdentifier fi = null;

      try {
         try {
            this.match(this.input, 201, FOLLOW_201_in_fieldSelectorModifier1773);
            if(this.state.failed) {
               return s;
            }

            this.pushFollow(FOLLOW_fident_in_fieldSelectorModifier1777);
            fi = this.fident();
            --this.state._fsp;
            if(this.state.failed) {
               return s;
            }

            if(this.state.backtracking == 0) {
               s = new Selectable.WithFieldSelection.Raw(receiver, fi);
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

         return s;
      } finally {
         ;
      }
   }

   public Set<Permission> filterPermissions(Set<Permission> permissions, IResource resource) {
      if(resource == null) {
         return Collections.emptySet();
      } else {
         Set<Permission> filtered = new HashSet(permissions);
         filtered.retainAll(DatabaseDescriptor.getAuthorizer().applicablePermissions(resource));
         if(filtered.isEmpty()) {
            this.addRecognitionError("Resource type " + resource.getClass().getSimpleName() + " does not support any of the requested permissions");
         }

         return filtered;
      }
   }

   public final Maps.Literal fullMapLiteral() throws RecognitionException {
      Maps.Literal map = null;
      Term.Raw k1 = null;
      Term.Raw v1 = null;
      Term.Raw kn = null;
      Term.Raw vn = null;
      ArrayList m = new ArrayList();

      try {
         try {
            this.match(this.input, 214, FOLLOW_214_in_fullMapLiteral10604);
            if(this.state.failed) {
               return map;
            }

            int alt195 = 2;
            int LA195_0 = this.input.LA(1);
            if(LA195_0 == 6 || LA195_0 == 11 || LA195_0 == 17 || LA195_0 == 21 || LA195_0 >= 23 && LA195_0 <= 24 || LA195_0 >= 28 && LA195_0 <= 29 || LA195_0 == 34 || LA195_0 == 36 || LA195_0 >= 40 && LA195_0 <= 42 || LA195_0 >= 44 && LA195_0 <= 46 || LA195_0 >= 48 && LA195_0 <= 51 || LA195_0 >= 53 && LA195_0 <= 55 || LA195_0 >= 60 && LA195_0 <= 62 || LA195_0 == 64 || LA195_0 >= 67 && LA195_0 <= 70 || LA195_0 == 73 || LA195_0 >= 75 && LA195_0 <= 76 || LA195_0 == 78 || LA195_0 >= 82 && LA195_0 <= 84 || LA195_0 == 86 || LA195_0 >= 89 && LA195_0 <= 91 || LA195_0 >= 93 && LA195_0 <= 95 || LA195_0 >= 97 && LA195_0 <= 99 || LA195_0 >= 104 && LA195_0 <= 107 || LA195_0 == 109 || LA195_0 == 111 || LA195_0 == 114 || LA195_0 >= 117 && LA195_0 <= 123 || LA195_0 == 127 || LA195_0 == 129 || LA195_0 >= 131 && LA195_0 <= 132 || LA195_0 >= 135 && LA195_0 <= 145 || LA195_0 >= 147 && LA195_0 <= 148 || LA195_0 >= 150 && LA195_0 <= 152 || LA195_0 >= 158 && LA195_0 <= 159 || LA195_0 >= 161 && LA195_0 <= 164 || LA195_0 == 168 || LA195_0 >= 177 && LA195_0 <= 178 || LA195_0 == 182 || LA195_0 == 185 || LA195_0 == 194 || LA195_0 == 199 || LA195_0 == 203 || LA195_0 == 210 || LA195_0 == 214) {
               alt195 = 1;
            }

            switch(alt195) {
            case 1:
               this.pushFollow(FOLLOW_term_in_fullMapLiteral10610);
               k1 = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return map;
               }

               this.match(this.input, 203, FOLLOW_203_in_fullMapLiteral10612);
               if(this.state.failed) {
                  return map;
               }

               this.pushFollow(FOLLOW_term_in_fullMapLiteral10616);
               v1 = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return map;
               }

               if(this.state.backtracking == 0) {
                  m.add(Pair.create(k1, v1));
               }

               label427:
               while(true) {
                  int alt194 = 2;
                  int LA194_0 = this.input.LA(1);
                  if(LA194_0 == 198) {
                     alt194 = 1;
                  }

                  switch(alt194) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_fullMapLiteral10622);
                     if(this.state.failed) {
                        return map;
                     }

                     this.pushFollow(FOLLOW_term_in_fullMapLiteral10626);
                     kn = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return map;
                     }

                     this.match(this.input, 203, FOLLOW_203_in_fullMapLiteral10628);
                     if(this.state.failed) {
                        return map;
                     }

                     this.pushFollow(FOLLOW_term_in_fullMapLiteral10632);
                     vn = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return map;
                     }

                     if(this.state.backtracking == 0) {
                        m.add(Pair.create(kn, vn));
                     }
                     break;
                  default:
                     break label427;
                  }
               }
            }

            this.match(this.input, 215, FOLLOW_215_in_fullMapLiteral10648);
            if(this.state.failed) {
               return map;
            }

            if(this.state.backtracking == 0) {
               map = new Maps.Literal(m);
            }
         } catch (RecognitionException var15) {
            this.reportError(var15);
            this.recover(this.input, var15);
         }

         return map;
      } finally {
         ;
      }
   }

   public final Term.Raw function() throws RecognitionException {
      Term.Raw t = null;
      FunctionName f = null;
      List args = null;

      try {
         try {
            int alt208 = true;
            int alt208 = this.dfa208.predict(this.input);
            switch(alt208) {
            case 1:
               this.pushFollow(FOLLOW_functionName_in_function11501);
               f = this.functionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               this.match(this.input, 194, FOLLOW_194_in_function11503);
               if(this.state.failed) {
                  return t;
               }

               this.match(this.input, 195, FOLLOW_195_in_function11505);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = new FunctionCall.Raw(f, Collections.emptyList());
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_functionName_in_function11535);
               f = this.functionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               this.match(this.input, 194, FOLLOW_194_in_function11537);
               if(this.state.failed) {
                  return t;
               }

               this.pushFollow(FOLLOW_functionArgs_in_function11541);
               args = this.functionArgs();
               --this.state._fsp;
               if(this.state.failed) {
                  return t;
               }

               this.match(this.input, 195, FOLLOW_195_in_function11543);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = new FunctionCall.Raw(f, args);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return t;
      } finally {
         ;
      }
   }

   public final List<Term.Raw> functionArgs() throws RecognitionException {
      List<Term.Raw> args = null;
      Term.Raw t1 = null;
      Term.Raw tn = null;
      args = new ArrayList();

      try {
         this.pushFollow(FOLLOW_term_in_functionArgs11576);
         t1 = this.term();
         --this.state._fsp;
         if(this.state.failed) {
            return args;
         } else {
            if(this.state.backtracking == 0) {
               args.add(t1);
            }

            while(true) {
               int alt209 = 2;
               int LA209_0 = this.input.LA(1);
               if(LA209_0 == 198) {
                  alt209 = 1;
               }

               switch(alt209) {
               case 1:
                  this.match(this.input, 198, FOLLOW_198_in_functionArgs11582);
                  if(this.state.failed) {
                     return args;
                  }

                  this.pushFollow(FOLLOW_term_in_functionArgs11586);
                  tn = this.term();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return args;
                  }

                  if(this.state.backtracking == 0) {
                     args.add(tn);
                  }
                  break;
               default:
                  return args;
               }
            }
         }
      } catch (RecognitionException var10) {
         this.reportError(var10);
         this.recover(this.input, var10);
         return args;
      } finally {
         ;
      }
   }

   public final FunctionName functionName() throws RecognitionException {
      FunctionName s = null;
      String ks = null;
      String f = null;

      try {
         try {
            int alt206 = true;
            int alt206 = this.dfa206.predict(this.input);
            switch(alt206) {
            case 1:
               this.pushFollow(FOLLOW_keyspaceName_in_functionName11315);
               ks = this.keyspaceName();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               this.match(this.input, 201, FOLLOW_201_in_functionName11317);
               if(this.state.failed) {
                  return s;
               }
            default:
               this.pushFollow(FOLLOW_allowedFunctionName_in_functionName11323);
               f = this.allowedFunctionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  s = f == null?null:new FunctionName(ks, f);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return s;
      } finally {
         ;
      }
   }

   public final FunctionResource functionResource() throws RecognitionException {
      FunctionResource res = null;
      String ks = null;
      FunctionName fn = null;
      CQL3Type.Raw v = null;
      ArrayList argsTypes = new ArrayList();

      try {
         try {
            int alt165 = true;
            int LA165_0 = this.input.LA(1);
            int LA164_0;
            int LA163_0;
            byte alt165;
            if(LA165_0 == 29) {
               int LA165_1 = this.input.LA(2);
               if(LA165_1 != 76) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return res;
                  }

                  LA164_0 = this.input.mark();

                  try {
                     this.input.consume();
                     NoViableAltException nvae = new NoViableAltException("", 165, 1, this.input);
                     throw nvae;
                  } finally {
                     this.input.rewind(LA164_0);
                  }
               }

               LA164_0 = this.input.LA(3);
               if(LA164_0 == 80) {
                  alt165 = 2;
               } else {
                  if(LA164_0 != -1 && LA164_0 != 72 && LA164_0 != 108 && LA164_0 != 112 && LA164_0 != 146 && LA164_0 != 204) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return res;
                     }

                     int nvaeMark = this.input.mark();

                     try {
                        for(LA163_0 = 0; LA163_0 < 2; ++LA163_0) {
                           this.input.consume();
                        }

                        NoViableAltException nvae = new NoViableAltException("", 165, 3, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt165 = 1;
               }
            } else {
               if(LA165_0 != 75) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return res;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 165, 0, this.input);
                  throw nvae;
               }

               alt165 = 3;
            }

            switch(alt165) {
            case 1:
               this.match(this.input, 29, FOLLOW_K_ALL_in_functionResource8696);
               if(this.state.failed) {
                  return res;
               }

               this.match(this.input, 76, FOLLOW_K_FUNCTIONS_in_functionResource8698);
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = FunctionResource.root();
               }
               break;
            case 2:
               this.match(this.input, 29, FOLLOW_K_ALL_in_functionResource8708);
               if(this.state.failed) {
                  return res;
               }

               this.match(this.input, 76, FOLLOW_K_FUNCTIONS_in_functionResource8710);
               if(this.state.failed) {
                  return res;
               }

               this.match(this.input, 80, FOLLOW_K_IN_in_functionResource8712);
               if(this.state.failed) {
                  return res;
               }

               this.match(this.input, 92, FOLLOW_K_KEYSPACE_in_functionResource8714);
               if(this.state.failed) {
                  return res;
               }

               this.pushFollow(FOLLOW_keyspaceName_in_functionResource8720);
               ks = this.keyspaceName();
               --this.state._fsp;
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = FunctionResource.keyspace(ks);
               }
               break;
            case 3:
               this.match(this.input, 75, FOLLOW_K_FUNCTION_in_functionResource8735);
               if(this.state.failed) {
                  return res;
               }

               this.pushFollow(FOLLOW_functionName_in_functionResource8739);
               fn = this.functionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return res;
               }

               this.match(this.input, 194, FOLLOW_194_in_functionResource8757);
               if(this.state.failed) {
                  return res;
               }

               int alt164 = 2;
               LA164_0 = this.input.LA(1);
               if(LA164_0 == 23 || LA164_0 >= 28 && LA164_0 <= 29 || LA164_0 == 34 || LA164_0 == 36 || LA164_0 >= 40 && LA164_0 <= 42 || LA164_0 >= 44 && LA164_0 <= 46 || LA164_0 >= 48 && LA164_0 <= 51 || LA164_0 >= 53 && LA164_0 <= 55 || LA164_0 >= 60 && LA164_0 <= 62 || LA164_0 == 64 || LA164_0 >= 67 && LA164_0 <= 70 || LA164_0 == 73 || LA164_0 >= 75 && LA164_0 <= 76 || LA164_0 == 78 || LA164_0 >= 82 && LA164_0 <= 84 || LA164_0 == 86 || LA164_0 >= 89 && LA164_0 <= 91 || LA164_0 >= 93 && LA164_0 <= 95 || LA164_0 >= 97 && LA164_0 <= 99 || LA164_0 == 104 || LA164_0 == 107 || LA164_0 == 109 || LA164_0 == 114 || LA164_0 >= 117 && LA164_0 <= 121 || LA164_0 == 127 || LA164_0 == 129 || LA164_0 >= 131 && LA164_0 <= 132 || LA164_0 >= 134 && LA164_0 <= 145 || LA164_0 == 148 || LA164_0 >= 150 && LA164_0 <= 152 || LA164_0 >= 158 && LA164_0 <= 159 || LA164_0 >= 161 && LA164_0 <= 164 || LA164_0 == 168 || LA164_0 == 178 || LA164_0 == 182) {
                  alt164 = 1;
               }

               switch(alt164) {
               case 1:
                  this.pushFollow(FOLLOW_comparatorType_in_functionResource8785);
                  v = this.comparatorType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return res;
                  }

                  if(this.state.backtracking == 0) {
                     argsTypes.add(v);
                  }

                  label1201:
                  while(true) {
                     int alt163 = 2;
                     LA163_0 = this.input.LA(1);
                     if(LA163_0 == 198) {
                        alt163 = 1;
                     }

                     switch(alt163) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_functionResource8803);
                        if(this.state.failed) {
                           return res;
                        }

                        this.pushFollow(FOLLOW_comparatorType_in_functionResource8807);
                        v = this.comparatorType();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return res;
                        }

                        if(this.state.backtracking == 0) {
                           argsTypes.add(v);
                        }
                        break;
                     default:
                        break label1201;
                     }
                  }
               }

               this.match(this.input, 195, FOLLOW_195_in_functionResource8835);
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = FunctionResource.functionFromCql(fn.keyspace, fn.name, argsTypes);
               }
            }
         } catch (RecognitionException var29) {
            this.reportError(var29);
            this.recover(this.input, var29);
         }

         return res;
      } finally {
         ;
      }
   }

   public Parser[] getDelegates() {
      return new Parser[0];
   }

   public String getGrammarFileName() {
      return "Parser.g";
   }

   public String[] getTokenNames() {
      return CqlParser.tokenNames;
   }

   public final GrantPermissionsStatement grantPermissionsStatement() throws RecognitionException {
      GrantPermissionsStatement stmt = null;
      IResource i = null;
      IResource r = null;
      RoleName grantee = null;
      Set<Permission> permissionOrAll1 = null;
      IResource res = null;
      GrantMode grantOption = GrantMode.GRANT;

      try {
         try {
            this.match(this.input, 77, FOLLOW_K_GRANT_in_grantPermissionsStatement7400);
            if(this.state.failed) {
               return stmt;
            }

            int alt141 = 2;
            int LA141_0 = this.input.LA(1);
            if(LA141_0 == 37) {
               int LA141_1 = this.input.LA(2);
               if(LA141_1 == 71) {
                  alt141 = 1;
               }
            }

            switch(alt141) {
            case 1:
               this.match(this.input, 37, FOLLOW_K_AUTHORIZE_in_grantPermissionsStatement7414);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 71, FOLLOW_K_FOR_in_grantPermissionsStatement7416);
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  grantOption = GrantMode.GRANTABLE;
               }
            }

            this.pushFollow(FOLLOW_permissionOrAll_in_grantPermissionsStatement7433);
            permissionOrAll1 = this.permissionOrAll();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 113, FOLLOW_K_ON_in_grantPermissionsStatement7441);
            if(this.state.failed) {
               return stmt;
            }

            int alt142 = true;
            int LA142_0 = this.input.LA(1);
            byte alt142;
            if(LA142_0 == 127) {
               int LA142_1 = this.input.LA(2);
               if(LA142_1 == 194) {
                  alt142 = 1;
               } else {
                  if(LA142_1 != 146 && LA142_1 != 201) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return stmt;
                     }

                     int nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 142, 1, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt142 = 2;
               }
            } else {
               if(LA142_0 != 23 && (LA142_0 < 28 || LA142_0 > 29) && LA142_0 != 34 && LA142_0 != 36 && (LA142_0 < 40 || LA142_0 > 42) && (LA142_0 < 44 || LA142_0 > 51) && (LA142_0 < 53 || LA142_0 > 55) && (LA142_0 < 60 || LA142_0 > 62) && LA142_0 != 64 && (LA142_0 < 67 || LA142_0 > 70) && LA142_0 != 73 && (LA142_0 < 75 || LA142_0 > 76) && LA142_0 != 78 && (LA142_0 < 82 || LA142_0 > 84) && LA142_0 != 86 && (LA142_0 < 89 || LA142_0 > 95) && (LA142_0 < 97 || LA142_0 > 99) && (LA142_0 < 101 || LA142_0 > 102) && LA142_0 != 104 && LA142_0 != 107 && LA142_0 != 109 && LA142_0 != 114 && (LA142_0 < 117 || LA142_0 > 121) && LA142_0 != 129 && (LA142_0 < 131 || LA142_0 > 132) && (LA142_0 < 135 || LA142_0 > 145) && LA142_0 != 148 && (LA142_0 < 150 || LA142_0 > 152) && (LA142_0 < 158 || LA142_0 > 159) && (LA142_0 < 161 || LA142_0 > 164) && LA142_0 != 168 && (LA142_0 < 177 || LA142_0 > 178)) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return stmt;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 142, 0, this.input);
                  throw nvae;
               }

               alt142 = 2;
            }

            switch(alt142) {
            case 1:
               this.pushFollow(FOLLOW_resourceFromInternalName_in_grantPermissionsStatement7457);
               i = this.resourceFromInternalName();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  res = i;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_resource_in_grantPermissionsStatement7465);
               r = this.gCql.resource();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  res = r;
               }
            }

            this.match(this.input, 146, FOLLOW_K_TO_in_grantPermissionsStatement7477);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_userOrRoleName_in_grantPermissionsStatement7491);
            grantee = this.userOrRoleName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            if(this.state.backtracking == 0) {
               stmt = new GrantPermissionsStatement(this.filterPermissions(permissionOrAll1, res), res, grantee, grantOption);
            }
         } catch (RecognitionException var24) {
            this.reportError(var24);
            this.recover(this.input, var24);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final GrantRoleStatement grantRoleStatement() throws RecognitionException {
      GrantRoleStatement stmt = null;
      RoleName role = null;
      RoleName grantee = null;

      try {
         try {
            this.match(this.input, 77, FOLLOW_K_GRANT_in_grantRoleStatement7873);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_userOrRoleName_in_grantRoleStatement7887);
            role = this.userOrRoleName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 146, FOLLOW_K_TO_in_grantRoleStatement7895);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_userOrRoleName_in_grantRoleStatement7909);
            grantee = this.userOrRoleName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            if(this.state.backtracking == 0) {
               stmt = new GrantRoleStatement(role, grantee);
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final void groupByClause(List<Selectable.Raw> groups) throws RecognitionException {
      Selectable.Raw s = null;

      try {
         try {
            this.pushFollow(FOLLOW_unaliasedSelector_in_groupByClause3056);
            s = this.unaliasedSelector();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            if(this.state.backtracking == 0) {
               groups.add(s);
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

      } finally {
         ;
      }
   }

   public final ColumnIdentifier ident() throws RecognitionException {
      ColumnIdentifier id = null;
      Token t = null;
      String k = null;

      try {
         try {
            int alt182 = true;
            byte alt182;
            switch(this.input.LA(1)) {
            case 23:
               alt182 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return id;
               }

               NoViableAltException nvae = new NoViableAltException("", 182, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt182 = 3;
               break;
            case 178:
               alt182 = 2;
            }

            switch(alt182) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_ident9694);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnIdentifier.getInterned(t != null?t.getText():null, false);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_ident9719);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnIdentifier.getInterned(t != null?t.getText():null, true);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_unreserved_keyword_in_ident9738);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnIdentifier.getInterned(k, false);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return id;
      } finally {
         ;
      }
   }

   public final void idxName(IndexName name) throws RecognitionException {
      Token t = null;
      String k = null;

      try {
         try {
            int alt190 = true;
            byte alt190;
            switch(this.input.LA(1)) {
            case 23:
               alt190 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               NoViableAltException nvae = new NoViableAltException("", 190, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt190 = 3;
               break;
            case 177:
               alt190 = 4;
               break;
            case 178:
               alt190 = 2;
            }

            switch(alt190) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_idxName10230);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setIndex(t != null?t.getText():null, false);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_idxName10255);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setIndex(t != null?t.getText():null, true);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_unreserved_keyword_in_idxName10274);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setIndex(k, false);
               }
               break;
            case 4:
               this.match(this.input, 177, FOLLOW_QMARK_in_idxName10284);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  this.addRecognitionError("Bind variables cannot be used for index names");
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

      } finally {
         ;
      }
   }

   public final AbstractMarker.INRaw inMarker() throws RecognitionException {
      AbstractMarker.INRaw marker = null;
      ColumnIdentifier name = null;

      try {
         try {
            int alt231 = true;
            int LA231_0 = this.input.LA(1);
            byte alt231;
            if(LA231_0 == 177) {
               alt231 = 1;
            } else {
               if(LA231_0 != 203) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return marker;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 231, 0, this.input);
                  throw nvae;
               }

               alt231 = 2;
            }

            switch(alt231) {
            case 1:
               this.match(this.input, 177, FOLLOW_QMARK_in_inMarker13352);
               if(this.state.failed) {
                  return marker;
               }

               if(this.state.backtracking == 0) {
                  marker = this.newINBindVariables((ColumnIdentifier)null);
               }
               break;
            case 2:
               this.match(this.input, 203, FOLLOW_203_in_inMarker13362);
               if(this.state.failed) {
                  return marker;
               }

               this.pushFollow(FOLLOW_noncol_ident_in_inMarker13366);
               name = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return marker;
               }

               if(this.state.backtracking == 0) {
                  marker = this.newINBindVariables(name);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return marker;
      } finally {
         ;
      }
   }

   public final Tuples.INRaw inMarkerForTuple() throws RecognitionException {
      Tuples.INRaw marker = null;
      ColumnIdentifier name = null;

      try {
         try {
            int alt238 = true;
            int LA238_0 = this.input.LA(1);
            byte alt238;
            if(LA238_0 == 177) {
               alt238 = 1;
            } else {
               if(LA238_0 != 203) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return marker;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 238, 0, this.input);
                  throw nvae;
               }

               alt238 = 2;
            }

            switch(alt238) {
            case 1:
               this.match(this.input, 177, FOLLOW_QMARK_in_inMarkerForTuple13629);
               if(this.state.failed) {
                  return marker;
               }

               if(this.state.backtracking == 0) {
                  marker = this.newTupleINBindVariables((ColumnIdentifier)null);
               }
               break;
            case 2:
               this.match(this.input, 203, FOLLOW_203_in_inMarkerForTuple13639);
               if(this.state.failed) {
                  return marker;
               }

               this.pushFollow(FOLLOW_noncol_ident_in_inMarkerForTuple13643);
               name = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return marker;
               }

               if(this.state.backtracking == 0) {
                  marker = this.newTupleINBindVariables(name);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return marker;
      } finally {
         ;
      }
   }

   public final void indexIdent(List<IndexTarget.Raw> targets) throws RecognitionException {
      ColumnMetadata.Raw c = null;

      try {
         try {
            int alt114 = true;
            int LA114_2;
            int nvaeMark;
            NoViableAltException nvae;
            byte alt114;
            switch(this.input.LA(1)) {
            case 14:
            case 23:
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 163:
            case 164:
            case 168:
            case 178:
               alt114 = 1;
               break;
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 66:
            case 71:
            case 72:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               NoViableAltException nvae = new NoViableAltException("", 114, 0, this.input);
               throw nvae;
            case 65:
               alt114 = 4;
               break;
            case 74:
               alt114 = 5;
               break;
            case 91:
               LA114_2 = this.input.LA(2);
               if(LA114_2 == 194) {
                  alt114 = 3;
               } else {
                  if(LA114_2 != 195 && LA114_2 != 198) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return;
                     }

                     nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        nvae = new NoViableAltException("", 114, 3, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt114 = 1;
               }
               break;
            case 162:
               LA114_2 = this.input.LA(2);
               if(LA114_2 == 194) {
                  alt114 = 2;
               } else {
                  if(LA114_2 != 195 && LA114_2 != 198) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return;
                     }

                     nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        nvae = new NoViableAltException("", 114, 2, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt114 = 1;
               }
            }

            switch(alt114) {
            case 1:
               this.pushFollow(FOLLOW_cident_in_indexIdent5734);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  targets.add(IndexTarget.Raw.simpleIndexOn(c));
               }
               break;
            case 2:
               this.match(this.input, 162, FOLLOW_K_VALUES_in_indexIdent5762);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 194, FOLLOW_194_in_indexIdent5764);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_cident_in_indexIdent5768);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 195, FOLLOW_195_in_indexIdent5770);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  targets.add(IndexTarget.Raw.valuesOf(c));
               }
               break;
            case 3:
               this.match(this.input, 91, FOLLOW_K_KEYS_in_indexIdent5781);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 194, FOLLOW_194_in_indexIdent5783);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_cident_in_indexIdent5787);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 195, FOLLOW_195_in_indexIdent5789);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  targets.add(IndexTarget.Raw.keysOf(c));
               }
               break;
            case 4:
               this.match(this.input, 65, FOLLOW_K_ENTRIES_in_indexIdent5802);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 194, FOLLOW_194_in_indexIdent5804);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_cident_in_indexIdent5808);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 195, FOLLOW_195_in_indexIdent5810);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  targets.add(IndexTarget.Raw.keysAndValuesOf(c));
               }
               break;
            case 5:
               this.match(this.input, 74, FOLLOW_K_FULL_in_indexIdent5820);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 194, FOLLOW_194_in_indexIdent5822);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_cident_in_indexIdent5826);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 195, FOLLOW_195_in_indexIdent5828);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  targets.add(IndexTarget.Raw.fullCollection(c));
               }
            }
         } catch (RecognitionException var24) {
            this.reportError(var24);
            this.recover(this.input, var24);
         }

      } finally {
         ;
      }
   }

   public final IndexName indexName() throws RecognitionException {
      IndexName name = null;
      name = new IndexName();

      try {
         try {
            int alt185 = true;
            int alt185 = this.dfa185.predict(this.input);
            switch(alt185) {
            case 1:
               this.pushFollow(FOLLOW_ksName_in_indexName9944);
               this.ksName(name);
               --this.state._fsp;
               if(this.state.failed) {
                  return name;
               }

               this.match(this.input, 201, FOLLOW_201_in_indexName9947);
               if(this.state.failed) {
                  return name;
               }
            default:
               this.pushFollow(FOLLOW_idxName_in_indexName9951);
               this.idxName(name);
               --this.state._fsp;
               if(this.state.failed) {
                  return name;
               }
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return name;
      } finally {
         ;
      }
   }

   public final ModificationStatement.Parsed insertStatement() throws RecognitionException {
      ModificationStatement.Parsed expr = null;
      CFName cf = null;
      UpdateStatement.ParsedInsert st1 = null;
      UpdateStatement.ParsedInsertJson st2 = null;

      try {
         try {
            this.match(this.input, 85, FOLLOW_K_INSERT_in_insertStatement3081);
            if(this.state.failed) {
               return (ModificationStatement.Parsed)expr;
            }

            this.match(this.input, 87, FOLLOW_K_INTO_in_insertStatement3083);
            if(this.state.failed) {
               return (ModificationStatement.Parsed)expr;
            }

            this.pushFollow(FOLLOW_columnFamilyName_in_insertStatement3087);
            cf = this.columnFamilyName();
            --this.state._fsp;
            if(this.state.failed) {
               return (ModificationStatement.Parsed)expr;
            }

            int alt39 = true;
            int LA39_0 = this.input.LA(1);
            byte alt39;
            if(LA39_0 == 194) {
               alt39 = 1;
            } else {
               if(LA39_0 != 89) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return (ModificationStatement.Parsed)expr;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 39, 0, this.input);
                  throw nvae;
               }

               alt39 = 2;
            }

            switch(alt39) {
            case 1:
               this.pushFollow(FOLLOW_normalInsertStatement_in_insertStatement3101);
               st1 = this.normalInsertStatement(cf);
               --this.state._fsp;
               if(this.state.failed) {
                  return (ModificationStatement.Parsed)expr;
               }

               if(this.state.backtracking == 0) {
                  expr = st1;
               }
               break;
            case 2:
               this.match(this.input, 89, FOLLOW_K_JSON_in_insertStatement3116);
               if(this.state.failed) {
                  return (ModificationStatement.Parsed)expr;
               }

               this.pushFollow(FOLLOW_jsonInsertStatement_in_insertStatement3120);
               st2 = this.jsonInsertStatement(cf);
               --this.state._fsp;
               if(this.state.failed) {
                  return (ModificationStatement.Parsed)expr;
               }

               if(this.state.backtracking == 0) {
                  expr = st2;
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return (ModificationStatement.Parsed)expr;
      } finally {
         ;
      }
   }

   public final Term.Raw intValue() throws RecognitionException {
      Term.Raw value = null;
      Token t = null;
      ColumnIdentifier id = null;

      try {
         try {
            int alt205 = true;
            byte alt205;
            switch(this.input.LA(1)) {
            case 24:
               alt205 = 1;
               break;
            case 177:
               alt205 = 3;
               break;
            case 203:
               alt205 = 2;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return (Term.Raw)value;
               }

               NoViableAltException nvae = new NoViableAltException("", 205, 0, this.input);
               throw nvae;
            }

            switch(alt205) {
            case 1:
               t = (Token)this.match(this.input, 24, FOLLOW_INTEGER_in_intValue11240);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = Constants.Literal.integer(t != null?t.getText():null);
               }
               break;
            case 2:
               this.match(this.input, 203, FOLLOW_203_in_intValue11254);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               this.pushFollow(FOLLOW_noncol_ident_in_intValue11258);
               id = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = this.newBindVariables(id);
               }
               break;
            case 3:
               this.match(this.input, 177, FOLLOW_QMARK_in_intValue11269);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = this.newBindVariables((ColumnIdentifier)null);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return (Term.Raw)value;
      } finally {
         ;
      }
   }

   public final JMXResource jmxResource() throws RecognitionException {
      JMXResource res = null;
      ParserRuleReturnScope mbean7 = null;
      Cql_Parser.mbean_return mbean8 = null;

      try {
         try {
            int alt161 = true;
            byte alt161;
            switch(this.input.LA(1)) {
            case 29:
               alt161 = 1;
               break;
            case 101:
               alt161 = 2;
               break;
            case 102:
               alt161 = 3;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return res;
               }

               NoViableAltException nvae = new NoViableAltException("", 161, 0, this.input);
               throw nvae;
            }

            switch(alt161) {
            case 1:
               this.match(this.input, 29, FOLLOW_K_ALL_in_jmxResource8587);
               if(this.state.failed) {
                  return res;
               }

               this.match(this.input, 102, FOLLOW_K_MBEANS_in_jmxResource8589);
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = JMXResource.root();
               }
               break;
            case 2:
               this.match(this.input, 101, FOLLOW_K_MBEAN_in_jmxResource8609);
               if(this.state.failed) {
                  return res;
               }

               this.pushFollow(FOLLOW_mbean_in_jmxResource8611);
               mbean7 = this.mbean();
               --this.state._fsp;
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = JMXResource.mbean(this.canonicalizeObjectName(mbean7 != null?this.input.toString(mbean7.start, mbean7.stop):null, false));
               }
               break;
            case 3:
               this.match(this.input, 102, FOLLOW_K_MBEANS_in_jmxResource8621);
               if(this.state.failed) {
                  return res;
               }

               this.pushFollow(FOLLOW_mbean_in_jmxResource8623);
               mbean8 = this.mbean();
               --this.state._fsp;
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = JMXResource.mbean(this.canonicalizeObjectName(mbean8 != null?this.input.toString(mbean8.start, mbean8.stop):null, true));
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return res;
      } finally {
         ;
      }
   }

   public final UpdateStatement.ParsedInsertJson jsonInsertStatement(CFName cf) throws RecognitionException {
      UpdateStatement.ParsedInsertJson expr = null;
      Json.Raw val = null;
      Attributes.Raw attrs = new Attributes.Raw();
      boolean ifNotExists = false;
      boolean defaultUnset = false;

      try {
         try {
            this.pushFollow(FOLLOW_jsonValue_in_jsonInsertStatement3290);
            val = this.jsonValue();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            int alt45 = 2;
            int LA45_0 = this.input.LA(1);
            if(LA45_0 == 56) {
               alt45 = 1;
            }

            int LA44_0;
            byte alt44;
            switch(alt45) {
            case 1:
               this.match(this.input, 56, FOLLOW_K_DEFAULT_in_jsonInsertStatement3300);
               if(this.state.failed) {
                  return expr;
               }

               int alt44 = true;
               LA44_0 = this.input.LA(1);
               if(LA44_0 == 111) {
                  alt44 = 1;
               } else {
                  if(LA44_0 != 155) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return expr;
                     }

                     NoViableAltException nvae = new NoViableAltException("", 44, 0, this.input);
                     throw nvae;
                  }

                  alt44 = 2;
               }

               switch(alt44) {
               case 1:
                  this.match(this.input, 111, FOLLOW_K_NULL_in_jsonInsertStatement3304);
                  if(this.state.failed) {
                     return expr;
                  }
                  break;
               case 2:
                  if(this.state.backtracking == 0) {
                     defaultUnset = true;
                  }

                  this.match(this.input, 155, FOLLOW_K_UNSET_in_jsonInsertStatement3312);
                  if(this.state.failed) {
                     return expr;
                  }
               }
            default:
               alt44 = 2;
               LA44_0 = this.input.LA(1);
               if(LA44_0 == 79) {
                  alt44 = 1;
               }

               switch(alt44) {
               case 1:
                  this.match(this.input, 79, FOLLOW_K_IF_in_jsonInsertStatement3328);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 110, FOLLOW_K_NOT_in_jsonInsertStatement3330);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 67, FOLLOW_K_EXISTS_in_jsonInsertStatement3332);
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     ifNotExists = true;
                  }
               default:
                  int alt47 = 2;
                  int LA47_0 = this.input.LA(1);
                  if(LA47_0 == 160) {
                     alt47 = 1;
                  }

                  switch(alt47) {
                  case 1:
                     this.pushFollow(FOLLOW_usingClause_in_jsonInsertStatement3347);
                     this.usingClause(attrs);
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }
                  default:
                     if(this.state.backtracking == 0) {
                        expr = new UpdateStatement.ParsedInsertJson(cf, attrs, val, defaultUnset, ifNotExists);
                     }
                  }
               }
            }
         } catch (RecognitionException var17) {
            this.reportError(var17);
            this.recover(this.input, var17);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final Json.Raw jsonValue() throws RecognitionException {
      Json.Raw value = null;
      Token s = null;
      ColumnIdentifier id = null;

      try {
         try {
            int alt48 = true;
            byte alt48;
            switch(this.input.LA(1)) {
            case 177:
               alt48 = 3;
               break;
            case 182:
               alt48 = 1;
               break;
            case 203:
               alt48 = 2;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return (Json.Raw)value;
               }

               NoViableAltException nvae = new NoViableAltException("", 48, 0, this.input);
               throw nvae;
            }

            switch(alt48) {
            case 1:
               s = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_jsonValue3382);
               if(this.state.failed) {
                  return (Json.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = new Json.Literal(s != null?s.getText():null);
               }
               break;
            case 2:
               this.match(this.input, 203, FOLLOW_203_in_jsonValue3392);
               if(this.state.failed) {
                  return (Json.Raw)value;
               }

               this.pushFollow(FOLLOW_noncol_ident_in_jsonValue3396);
               id = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Json.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = this.newJsonBindVariables(id);
               }
               break;
            case 3:
               this.match(this.input, 177, FOLLOW_QMARK_in_jsonValue3410);
               if(this.state.failed) {
                  return (Json.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = this.newJsonBindVariables((ColumnIdentifier)null);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return (Json.Raw)value;
      } finally {
         ;
      }
   }

   public final String keyspaceName() throws RecognitionException {
      String id = null;
      CFName name = new CFName();

      try {
         try {
            this.pushFollow(FOLLOW_ksName_in_keyspaceName9910);
            this.ksName(name);
            --this.state._fsp;
            if(this.state.failed) {
               return id;
            }

            if(this.state.backtracking == 0) {
               id = name.getKeyspace();
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return id;
      } finally {
         ;
      }
   }

   public final void ksName(KeyspaceElementName name) throws RecognitionException {
      Token t = null;
      String k = null;

      try {
         try {
            int alt188 = true;
            byte alt188;
            switch(this.input.LA(1)) {
            case 23:
               alt188 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               NoViableAltException nvae = new NoViableAltException("", 188, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt188 = 3;
               break;
            case 177:
               alt188 = 4;
               break;
            case 178:
               alt188 = 2;
            }

            switch(alt188) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_ksName10078);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setKeyspace(t != null?t.getText():null, false);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_ksName10103);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setKeyspace(t != null?t.getText():null, true);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_unreserved_keyword_in_ksName10122);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setKeyspace(k, false);
               }
               break;
            case 4:
               this.match(this.input, 177, FOLLOW_QMARK_in_ksName10132);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  this.addRecognitionError("Bind variables cannot be used for keyspace names");
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

      } finally {
         ;
      }
   }

   public final Term.Raw listLiteral() throws RecognitionException {
      Term.Raw value = null;
      Term.Raw t1 = null;
      Term.Raw tn = null;
      ArrayList l = new ArrayList();

      try {
         try {
            this.match(this.input, 210, FOLLOW_210_in_listLiteral10911);
            if(this.state.failed) {
               return value;
            }

            int alt201 = 2;
            int LA201_0 = this.input.LA(1);
            if(LA201_0 == 6 || LA201_0 == 11 || LA201_0 == 17 || LA201_0 == 21 || LA201_0 >= 23 && LA201_0 <= 24 || LA201_0 >= 28 && LA201_0 <= 29 || LA201_0 == 34 || LA201_0 == 36 || LA201_0 >= 40 && LA201_0 <= 42 || LA201_0 >= 44 && LA201_0 <= 46 || LA201_0 >= 48 && LA201_0 <= 51 || LA201_0 >= 53 && LA201_0 <= 55 || LA201_0 >= 60 && LA201_0 <= 62 || LA201_0 == 64 || LA201_0 >= 67 && LA201_0 <= 70 || LA201_0 == 73 || LA201_0 >= 75 && LA201_0 <= 76 || LA201_0 == 78 || LA201_0 >= 82 && LA201_0 <= 84 || LA201_0 == 86 || LA201_0 >= 89 && LA201_0 <= 91 || LA201_0 >= 93 && LA201_0 <= 95 || LA201_0 >= 97 && LA201_0 <= 99 || LA201_0 >= 104 && LA201_0 <= 107 || LA201_0 == 109 || LA201_0 == 111 || LA201_0 == 114 || LA201_0 >= 117 && LA201_0 <= 123 || LA201_0 == 127 || LA201_0 == 129 || LA201_0 >= 131 && LA201_0 <= 132 || LA201_0 >= 135 && LA201_0 <= 145 || LA201_0 >= 147 && LA201_0 <= 148 || LA201_0 >= 150 && LA201_0 <= 152 || LA201_0 >= 158 && LA201_0 <= 159 || LA201_0 >= 161 && LA201_0 <= 164 || LA201_0 == 168 || LA201_0 >= 177 && LA201_0 <= 178 || LA201_0 == 182 || LA201_0 == 185 || LA201_0 == 194 || LA201_0 == 199 || LA201_0 == 203 || LA201_0 == 210 || LA201_0 == 214) {
               alt201 = 1;
            }

            switch(alt201) {
            case 1:
               this.pushFollow(FOLLOW_term_in_listLiteral10917);
               t1 = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return value;
               }

               if(this.state.backtracking == 0) {
                  l.add(t1);
               }

               label391:
               while(true) {
                  int alt200 = 2;
                  int LA200_0 = this.input.LA(1);
                  if(LA200_0 == 198) {
                     alt200 = 1;
                  }

                  switch(alt200) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_listLiteral10923);
                     if(this.state.failed) {
                        return value;
                     }

                     this.pushFollow(FOLLOW_term_in_listLiteral10927);
                     tn = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return value;
                     }

                     if(this.state.backtracking == 0) {
                        l.add(tn);
                     }
                     break;
                  default:
                     break label391;
                  }
               }
            }

            this.match(this.input, 212, FOLLOW_212_in_listLiteral10937);
            if(this.state.failed) {
               return value;
            }

            if(this.state.backtracking == 0) {
               value = new Lists.Literal(l);
            }

            if(this.state.backtracking == 0) {
               value = new Lists.Literal(l);
            }
         } catch (RecognitionException var13) {
            this.reportError(var13);
            this.recover(this.input, var13);
         }

         return value;
      } finally {
         ;
      }
   }

   public final ListPermissionsStatement listPermissionsStatement() throws RecognitionException {
      ListPermissionsStatement stmt = null;
      IResource resource5 = null;
      Set<Permission> permissionOrAll6 = null;
      IResource resource = null;
      boolean recursive = true;
      RoleName grantee = new RoleName();

      try {
         try {
            this.match(this.input, 97, FOLLOW_K_LIST_in_listPermissionsStatement8014);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_permissionOrAll_in_listPermissionsStatement8026);
            permissionOrAll6 = this.permissionOrAll();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            int alt147 = 2;
            int LA147_0 = this.input.LA(1);
            if(LA147_0 == 113) {
               alt147 = 1;
            }

            switch(alt147) {
            case 1:
               this.match(this.input, 113, FOLLOW_K_ON_in_listPermissionsStatement8036);
               if(this.state.failed) {
                  return stmt;
               }

               this.pushFollow(FOLLOW_resource_in_listPermissionsStatement8038);
               resource5 = this.gCql.resource();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  resource = resource5;
               }
            default:
               int alt148 = 2;
               int LA148_0 = this.input.LA(1);
               if(LA148_0 == 112) {
                  alt148 = 1;
               }

               switch(alt148) {
               case 1:
                  this.match(this.input, 112, FOLLOW_K_OF_in_listPermissionsStatement8053);
                  if(this.state.failed) {
                     return stmt;
                  }

                  this.pushFollow(FOLLOW_roleName_in_listPermissionsStatement8055);
                  this.roleName(grantee);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return stmt;
                  }
               default:
                  int alt149 = 2;
                  int LA149_0 = this.input.LA(1);
                  if(LA149_0 == 108) {
                     alt149 = 1;
                  }

                  switch(alt149) {
                  case 1:
                     this.match(this.input, 108, FOLLOW_K_NORECURSIVE_in_listPermissionsStatement8069);
                     if(this.state.failed) {
                        return stmt;
                     }

                     if(this.state.backtracking == 0) {
                        recursive = false;
                     }
                  default:
                     if(this.state.backtracking == 0) {
                        stmt = new ListPermissionsStatement(permissionOrAll6, resource, grantee, recursive);
                     }
                  }
               }
            }
         } catch (RecognitionException var17) {
            this.reportError(var17);
            this.recover(this.input, var17);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final ListRolesStatement listRolesStatement() throws RecognitionException {
      ListRolesStatement stmt = null;
      boolean recursive = true;
      RoleName grantee = new RoleName();

      try {
         try {
            this.match(this.input, 97, FOLLOW_K_LIST_in_listRolesStatement9339);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 132, FOLLOW_K_ROLES_in_listRolesStatement9341);
            if(this.state.failed) {
               return stmt;
            }

            int alt176 = 2;
            int LA176_0 = this.input.LA(1);
            if(LA176_0 == 112) {
               alt176 = 1;
            }

            switch(alt176) {
            case 1:
               this.match(this.input, 112, FOLLOW_K_OF_in_listRolesStatement9351);
               if(this.state.failed) {
                  return stmt;
               }

               this.pushFollow(FOLLOW_roleName_in_listRolesStatement9353);
               this.roleName(grantee);
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }
            default:
               int alt177 = 2;
               int LA177_0 = this.input.LA(1);
               if(LA177_0 == 108) {
                  alt177 = 1;
               }

               switch(alt177) {
               case 1:
                  this.match(this.input, 108, FOLLOW_K_NORECURSIVE_in_listRolesStatement9366);
                  if(this.state.failed) {
                     return stmt;
                  }

                  if(this.state.backtracking == 0) {
                     recursive = false;
                  }
               default:
                  if(this.state.backtracking == 0) {
                     stmt = new ListRolesStatement(grantee, recursive);
                  }
               }
            }
         } catch (RecognitionException var12) {
            this.reportError(var12);
            this.recover(this.input, var12);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final ListRolesStatement listUsersStatement() throws RecognitionException {
      ListUsersStatement stmt = null;

      try {
         try {
            this.match(this.input, 97, FOLLOW_K_LIST_in_listUsersStatement9113);
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 159, FOLLOW_K_USERS_in_listUsersStatement9115);
            if(this.state.failed) {
               return stmt;
            }

            if(this.state.backtracking == 0) {
               stmt = new ListUsersStatement();
            }
         } catch (RecognitionException var6) {
            this.reportError(var6);
            this.recover(this.input, var6);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final Term.Raw mapLiteral(Term.Raw k) throws RecognitionException {
      Term.Raw value = null;
      Term.Raw v = null;
      Term.Raw kn = null;
      Term.Raw vn = null;
      ArrayList m = new ArrayList();

      try {
         this.match(this.input, 203, FOLLOW_203_in_mapLiteral10779);
         if(this.state.failed) {
            return value;
         } else {
            this.pushFollow(FOLLOW_term_in_mapLiteral10783);
            v = this.term();
            --this.state._fsp;
            if(this.state.failed) {
               return value;
            } else {
               if(this.state.backtracking == 0) {
                  m.add(Pair.create(k, v));
               }

               while(true) {
                  int alt198 = 2;
                  int LA198_0 = this.input.LA(1);
                  if(LA198_0 == 198) {
                     alt198 = 1;
                  }

                  switch(alt198) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_mapLiteral10789);
                     if(this.state.failed) {
                        return value;
                     }

                     this.pushFollow(FOLLOW_term_in_mapLiteral10793);
                     kn = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return value;
                     }

                     this.match(this.input, 203, FOLLOW_203_in_mapLiteral10795);
                     if(this.state.failed) {
                        return value;
                     }

                     this.pushFollow(FOLLOW_term_in_mapLiteral10799);
                     vn = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return value;
                     }

                     if(this.state.backtracking == 0) {
                        m.add(Pair.create(kn, vn));
                     }
                     break;
                  default:
                     if(this.state.backtracking == 0) {
                        value = new Maps.Literal(m);
                     }

                     return value;
                  }
               }
            }
         }
      } catch (RecognitionException var13) {
         this.reportError(var13);
         this.recover(this.input, var13);
         return value;
      } finally {
         ;
      }
   }

   public final Tuples.Raw markerForTuple() throws RecognitionException {
      Tuples.Raw marker = null;
      ColumnIdentifier name = null;

      try {
         try {
            int alt236 = true;
            int LA236_0 = this.input.LA(1);
            byte alt236;
            if(LA236_0 == 177) {
               alt236 = 1;
            } else {
               if(LA236_0 != 203) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return marker;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 236, 0, this.input);
                  throw nvae;
               }

               alt236 = 2;
            }

            switch(alt236) {
            case 1:
               this.match(this.input, 177, FOLLOW_QMARK_in_markerForTuple13543);
               if(this.state.failed) {
                  return marker;
               }

               if(this.state.backtracking == 0) {
                  marker = this.newTupleBindVariables((ColumnIdentifier)null);
               }
               break;
            case 2:
               this.match(this.input, 203, FOLLOW_203_in_markerForTuple13553);
               if(this.state.failed) {
                  return marker;
               }

               this.pushFollow(FOLLOW_noncol_ident_in_markerForTuple13557);
               name = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return marker;
               }

               if(this.state.backtracking == 0) {
                  marker = this.newTupleBindVariables(name);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return marker;
      } finally {
         ;
      }
   }

   public final Cql_Parser.mbean_return mbean() throws RecognitionException {
      Cql_Parser.mbean_return retval = new Cql_Parser.mbean_return();
      retval.start = this.input.LT(1);

      try {
         try {
            this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_mbean14349);
            if(this.state.failed) {
               return retval;
            }

            retval.stop = this.input.LT(-1);
         } catch (RecognitionException var6) {
            this.reportError(var6);
            this.recover(this.input, var6);
         }

         return retval;
      } finally {
         ;
      }
   }

   public final CQL3Type native_type() throws RecognitionException {
      CQL3Type.Native t = null;

      try {
         try {
            int alt242 = true;
            byte alt242;
            switch(this.input.LA(1)) {
            case 36:
               alt242 = 1;
               break;
            case 40:
               alt242 = 2;
               break;
            case 41:
               alt242 = 3;
               break;
            case 42:
               alt242 = 4;
               break;
            case 51:
               alt242 = 5;
               break;
            case 54:
               alt242 = 20;
               break;
            case 55:
               alt242 = 6;
               break;
            case 62:
               alt242 = 7;
               break;
            case 64:
               alt242 = 8;
               break;
            case 70:
               alt242 = 9;
               break;
            case 82:
               alt242 = 10;
               break;
            case 86:
               alt242 = 11;
               break;
            case 136:
               alt242 = 12;
               break;
            case 141:
               alt242 = 13;
               break;
            case 142:
               alt242 = 21;
               break;
            case 143:
               alt242 = 14;
               break;
            case 144:
               alt242 = 19;
               break;
            case 145:
               alt242 = 15;
               break;
            case 161:
               alt242 = 16;
               break;
            case 163:
               alt242 = 17;
               break;
            case 164:
               alt242 = 18;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return t;
               }

               NoViableAltException nvae = new NoViableAltException("", 242, 0, this.input);
               throw nvae;
            }

            switch(alt242) {
            case 1:
               this.match(this.input, 36, FOLLOW_K_ASCII_in_native_type13886);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.ASCII;
               }
               break;
            case 2:
               this.match(this.input, 40, FOLLOW_K_BIGINT_in_native_type13900);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.BIGINT;
               }
               break;
            case 3:
               this.match(this.input, 41, FOLLOW_K_BLOB_in_native_type13913);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.BLOB;
               }
               break;
            case 4:
               this.match(this.input, 42, FOLLOW_K_BOOLEAN_in_native_type13928);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.BOOLEAN;
               }
               break;
            case 5:
               this.match(this.input, 51, FOLLOW_K_COUNTER_in_native_type13940);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.COUNTER;
               }
               break;
            case 6:
               this.match(this.input, 55, FOLLOW_K_DECIMAL_in_native_type13952);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.DECIMAL;
               }
               break;
            case 7:
               this.match(this.input, 62, FOLLOW_K_DOUBLE_in_native_type13964);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.DOUBLE;
               }
               break;
            case 8:
               this.match(this.input, 64, FOLLOW_K_DURATION_in_native_type13977);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.DURATION;
               }
               break;
            case 9:
               this.match(this.input, 70, FOLLOW_K_FLOAT_in_native_type13990);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.FLOAT;
               }
               break;
            case 10:
               this.match(this.input, 82, FOLLOW_K_INET_in_native_type14004);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.INET;
               }
               break;
            case 11:
               this.match(this.input, 86, FOLLOW_K_INT_in_native_type14019);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.INT;
               }
               break;
            case 12:
               this.match(this.input, 136, FOLLOW_K_SMALLINT_in_native_type14035);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.SMALLINT;
               }
               break;
            case 13:
               this.match(this.input, 141, FOLLOW_K_TEXT_in_native_type14046);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.TEXT;
               }
               break;
            case 14:
               this.match(this.input, 143, FOLLOW_K_TIMESTAMP_in_native_type14061);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.TIMESTAMP;
               }
               break;
            case 15:
               this.match(this.input, 145, FOLLOW_K_TINYINT_in_native_type14071);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.TINYINT;
               }
               break;
            case 16:
               this.match(this.input, 161, FOLLOW_K_UUID_in_native_type14083);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.UUID;
               }
               break;
            case 17:
               this.match(this.input, 163, FOLLOW_K_VARCHAR_in_native_type14098);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.VARCHAR;
               }
               break;
            case 18:
               this.match(this.input, 164, FOLLOW_K_VARINT_in_native_type14110);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.VARINT;
               }
               break;
            case 19:
               this.match(this.input, 144, FOLLOW_K_TIMEUUID_in_native_type14123);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.TIMEUUID;
               }
               break;
            case 20:
               this.match(this.input, 54, FOLLOW_K_DATE_in_native_type14134);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.DATE;
               }
               break;
            case 21:
               this.match(this.input, 142, FOLLOW_K_TIME_in_native_type14149);
               if(this.state.failed) {
                  return t;
               }

               if(this.state.backtracking == 0) {
                  t = CQL3Type.Native.TIME;
               }
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return t;
      } finally {
         ;
      }
   }

   public AbstractMarker.Raw newBindVariables(ColumnIdentifier name) {
      AbstractMarker.Raw marker = new AbstractMarker.Raw(this.bindVariables.size());
      this.bindVariables.add(name);
      return marker;
   }

   public AbstractMarker.INRaw newINBindVariables(ColumnIdentifier name) {
      AbstractMarker.INRaw marker = new AbstractMarker.INRaw(this.bindVariables.size());
      this.bindVariables.add(name);
      return marker;
   }

   public Json.Marker newJsonBindVariables(ColumnIdentifier name) {
      Json.Marker marker = new Json.Marker(this.bindVariables.size());
      this.bindVariables.add(name);
      return marker;
   }

   public Tuples.Raw newTupleBindVariables(ColumnIdentifier name) {
      Tuples.Raw marker = new Tuples.Raw(this.bindVariables.size());
      this.bindVariables.add(name);
      return marker;
   }

   public Tuples.INRaw newTupleINBindVariables(ColumnIdentifier name) {
      Tuples.INRaw marker = new Tuples.INRaw(this.bindVariables.size());
      this.bindVariables.add(name);
      return marker;
   }

   public final ColumnIdentifier non_type_ident() throws RecognitionException {
      ColumnIdentifier id = null;
      Token t = null;
      Token kk = null;
      String k = null;

      try {
         try {
            int alt246 = true;
            byte alt246;
            switch(this.input.LA(1)) {
            case 23:
               alt246 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 45:
            case 47:
            case 50:
            case 51:
            case 52:
            case 54:
            case 55:
            case 56:
            case 57:
            case 58:
            case 59:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 70:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 82:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 136:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 146:
            case 147:
            case 149:
            case 150:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 161:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return id;
               }

               NoViableAltException nvae = new NoViableAltException("", 246, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 44:
            case 46:
            case 48:
            case 49:
            case 53:
            case 60:
            case 67:
            case 68:
            case 69:
            case 73:
            case 75:
            case 76:
            case 78:
            case 83:
            case 84:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 137:
            case 138:
            case 139:
            case 140:
            case 148:
            case 151:
            case 152:
            case 158:
            case 159:
            case 162:
               alt246 = 3;
               break;
            case 90:
               alt246 = 4;
               break;
            case 178:
               alt246 = 2;
            }

            switch(alt246) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_non_type_ident14374);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  if(reservedTypeNames.contains(t != null?t.getText():null)) {
                     this.addRecognitionError("Invalid (reserved) user type name " + (t != null?t.getText():null));
                  }

                  id = new ColumnIdentifier(t != null?t.getText():null, false);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_non_type_ident14405);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = new ColumnIdentifier(t != null?t.getText():null, true);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_basic_unreserved_keyword_in_non_type_ident14430);
               k = this.basic_unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = new ColumnIdentifier(k, false);
               }
               break;
            case 4:
               kk = (Token)this.match(this.input, 90, FOLLOW_K_KEY_in_non_type_ident14442);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = new ColumnIdentifier(kk != null?kk.getText():null, false);
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return id;
      } finally {
         ;
      }
   }

   public final ColumnIdentifier noncol_ident() throws RecognitionException {
      ColumnIdentifier id = null;
      Token t = null;
      String k = null;

      try {
         try {
            int alt184 = true;
            byte alt184;
            switch(this.input.LA(1)) {
            case 23:
               alt184 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return id;
               }

               NoViableAltException nvae = new NoViableAltException("", 184, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt184 = 3;
               break;
            case 178:
               alt184 = 2;
            }

            switch(alt184) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_noncol_ident9833);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = new ColumnIdentifier(t != null?t.getText():null, false);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_noncol_ident9858);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = new ColumnIdentifier(t != null?t.getText():null, true);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_unreserved_keyword_in_noncol_ident9877);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = new ColumnIdentifier(k, false);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return id;
      } finally {
         ;
      }
   }

   public final void normalColumnOperation(List<Pair<ColumnMetadata.Raw, Operation.RawUpdate>> operations, ColumnMetadata.Raw key) throws RecognitionException {
      Token sig = null;
      Token i = null;
      Term.Raw t = null;
      ColumnMetadata.Raw c = null;

      try {
         try {
            int alt216 = true;
            int alt216 = this.dfa216.predict(this.input);
            switch(alt216) {
            case 1:
               this.pushFollow(FOLLOW_term_in_normalColumnOperation12097);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               int alt215 = 2;
               int LA215_0 = this.input.LA(1);
               if(LA215_0 == 196) {
                  alt215 = 1;
               }

               switch(alt215) {
               case 1:
                  this.match(this.input, 196, FOLLOW_196_in_normalColumnOperation12100);
                  if(this.state.failed) {
                     return;
                  }

                  this.pushFollow(FOLLOW_cident_in_normalColumnOperation12104);
                  c = this.cident();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }
               default:
                  if(this.state.backtracking == 0) {
                     if(c == null) {
                        this.addRawUpdate(operations, key, new Operation.SetValue(t));
                     } else {
                        if(!key.equals(c)) {
                           this.addRecognitionError("Only expressions of the form X = <value> + X are supported.");
                        }

                        this.addRawUpdate(operations, key, new Operation.Prepend(t));
                     }

                     return;
                  }

                  return;
               }
            case 2:
               this.pushFollow(FOLLOW_cident_in_normalColumnOperation12125);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               sig = this.input.LT(1);
               if(this.input.LA(1) != 196 && this.input.LA(1) != 199) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return;
                  }

                  MismatchedSetException mse = new MismatchedSetException((BitSet)null, this.input);
                  throw mse;
               }

               this.input.consume();
               this.state.errorRecovery = false;
               this.state.failed = false;
               this.pushFollow(FOLLOW_term_in_normalColumnOperation12139);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  if(!key.equals(c)) {
                     this.addRecognitionError("Only expressions of the form X = X " + (sig != null?sig.getText():null) + "<value> are supported.");
                  }

                  this.addRawUpdate(operations, key, (Operation.RawUpdate)((sig != null?sig.getText():null).equals("+")?new Operation.Addition(t):new Operation.Substraction(t)));
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_cident_in_normalColumnOperation12157);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               i = (Token)this.match(this.input, 24, FOLLOW_INTEGER_in_normalColumnOperation12161);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  if(!key.equals(c)) {
                     this.addRecognitionError("Only expressions of the form X = X " + ((i != null?i.getText():null).charAt(0) == 45?'-':'+') + " <value> are supported.");
                  }

                  this.addRawUpdate(operations, key, new Operation.Addition(Constants.Literal.integer(i != null?i.getText():null)));
               }
            }
         } catch (RecognitionException var13) {
            this.reportError(var13);
            this.recover(this.input, var13);
         }

      } finally {
         ;
      }
   }

   public final UpdateStatement.ParsedInsert normalInsertStatement(CFName cf) throws RecognitionException {
      UpdateStatement.ParsedInsert expr = null;
      ColumnMetadata.Raw c1 = null;
      ColumnMetadata.Raw cn = null;
      Term.Raw v1 = null;
      Term.Raw vn = null;
      Attributes.Raw attrs = new Attributes.Raw();
      List<ColumnMetadata.Raw> columnNames = new ArrayList();
      List<Term.Raw> values = new ArrayList();
      boolean ifNotExists = false;

      try {
         this.match(this.input, 194, FOLLOW_194_in_normalInsertStatement3156);
         if(this.state.failed) {
            return expr;
         } else {
            this.pushFollow(FOLLOW_cident_in_normalInsertStatement3160);
            c1 = this.cident();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            } else {
               if(this.state.backtracking == 0) {
                  columnNames.add(c1);
               }

               while(true) {
                  int alt42 = 2;
                  int LA42_0 = this.input.LA(1);
                  if(LA42_0 == 198) {
                     alt42 = 1;
                  }

                  switch(alt42) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_normalInsertStatement3167);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_cident_in_normalInsertStatement3171);
                     cn = this.cident();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        columnNames.add(cn);
                     }
                     break;
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_normalInsertStatement3178);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.match(this.input, 162, FOLLOW_K_VALUES_in_normalInsertStatement3186);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.match(this.input, 194, FOLLOW_194_in_normalInsertStatement3194);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_term_in_normalInsertStatement3198);
                     v1 = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        values.add(v1);
                     }

                     while(true) {
                        alt42 = 2;
                        LA42_0 = this.input.LA(1);
                        if(LA42_0 == 198) {
                           alt42 = 1;
                        }

                        switch(alt42) {
                        case 1:
                           this.match(this.input, 198, FOLLOW_198_in_normalInsertStatement3204);
                           if(this.state.failed) {
                              return expr;
                           }

                           this.pushFollow(FOLLOW_term_in_normalInsertStatement3208);
                           vn = this.term();
                           --this.state._fsp;
                           if(this.state.failed) {
                              return expr;
                           }

                           if(this.state.backtracking == 0) {
                              values.add(vn);
                           }
                           break;
                        default:
                           this.match(this.input, 195, FOLLOW_195_in_normalInsertStatement3215);
                           if(this.state.failed) {
                              return expr;
                           }

                           alt42 = 2;
                           LA42_0 = this.input.LA(1);
                           if(LA42_0 == 79) {
                              alt42 = 1;
                           }

                           switch(alt42) {
                           case 1:
                              this.match(this.input, 79, FOLLOW_K_IF_in_normalInsertStatement3225);
                              if(this.state.failed) {
                                 return expr;
                              }

                              this.match(this.input, 110, FOLLOW_K_NOT_in_normalInsertStatement3227);
                              if(this.state.failed) {
                                 return expr;
                              }

                              this.match(this.input, 67, FOLLOW_K_EXISTS_in_normalInsertStatement3229);
                              if(this.state.failed) {
                                 return expr;
                              }

                              if(this.state.backtracking == 0) {
                                 ifNotExists = true;
                              }
                           default:
                              int alt43 = 2;
                              int LA43_0 = this.input.LA(1);
                              if(LA43_0 == 160) {
                                 alt43 = 1;
                              }

                              switch(alt43) {
                              case 1:
                                 this.pushFollow(FOLLOW_usingClause_in_normalInsertStatement3244);
                                 this.usingClause(attrs);
                                 --this.state._fsp;
                                 if(this.state.failed) {
                                    return expr;
                                 }
                              default:
                                 if(this.state.backtracking == 0) {
                                    expr = new UpdateStatement.ParsedInsert(cf, attrs, columnNames, values, ifNotExists);
                                 }

                                 return expr;
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      } catch (RecognitionException var19) {
         this.reportError(var19);
         this.recover(this.input, var19);
         return expr;
      } finally {
         ;
      }
   }

   public final void orderByClause(Map<ColumnMetadata.Raw, Boolean> orderings) throws RecognitionException {
      ColumnMetadata.Raw c = null;
      boolean reversed = false;

      try {
         try {
            this.pushFollow(FOLLOW_cident_in_orderByClause3023);
            c = this.cident();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            int alt38 = 3;
            int LA38_0 = this.input.LA(1);
            if(LA38_0 == 35) {
               alt38 = 1;
            } else if(LA38_0 == 58) {
               alt38 = 2;
            }

            switch(alt38) {
            case 1:
               this.match(this.input, 35, FOLLOW_K_ASC_in_orderByClause3026);
               if(this.state.failed) {
                  return;
               }
               break;
            case 2:
               this.match(this.input, 58, FOLLOW_K_DESC_in_orderByClause3030);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  reversed = true;
               }
            }

            if(this.state.backtracking == 0) {
               orderings.put(c, Boolean.valueOf(reversed));
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

      } finally {
         ;
      }
   }

   public final Permission permission() throws RecognitionException {
      Permission perm = null;
      ParserRuleReturnScope p = null;
      ParserRuleReturnScope domain = null;
      Cql_Parser.permissionName_return name = null;

      try {
         try {
            int alt152 = true;
            int LA152_0 = this.input.LA(1);
            byte alt152;
            if(LA152_0 != 31 && LA152_0 != 37 && LA152_0 != 52 && LA152_0 != 59 && LA152_0 != 63 && LA152_0 != 66 && LA152_0 != 103 && LA152_0 != 133) {
               if(LA152_0 != 23 && (LA152_0 < 28 || LA152_0 > 29) && LA152_0 != 34 && LA152_0 != 36 && (LA152_0 < 40 || LA152_0 > 42) && (LA152_0 < 44 || LA152_0 > 46) && (LA152_0 < 48 || LA152_0 > 51) && (LA152_0 < 53 || LA152_0 > 55) && (LA152_0 < 60 || LA152_0 > 62) && LA152_0 != 64 && (LA152_0 < 67 || LA152_0 > 70) && LA152_0 != 73 && (LA152_0 < 75 || LA152_0 > 76) && LA152_0 != 78 && (LA152_0 < 82 || LA152_0 > 84) && LA152_0 != 86 && (LA152_0 < 89 || LA152_0 > 91) && (LA152_0 < 93 || LA152_0 > 95) && (LA152_0 < 97 || LA152_0 > 99) && LA152_0 != 104 && LA152_0 != 107 && LA152_0 != 109 && LA152_0 != 114 && (LA152_0 < 117 || LA152_0 > 121) && LA152_0 != 127 && LA152_0 != 129 && (LA152_0 < 131 || LA152_0 > 132) && (LA152_0 < 135 || LA152_0 > 145) && LA152_0 != 148 && (LA152_0 < 150 || LA152_0 > 152) && (LA152_0 < 158 || LA152_0 > 159) && (LA152_0 < 161 || LA152_0 > 164) && LA152_0 != 168 && LA152_0 != 178 && LA152_0 != 182) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return perm;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 152, 0, this.input);
                  throw nvae;
               }

               alt152 = 2;
            } else {
               alt152 = 1;
            }

            switch(alt152) {
            case 1:
               this.pushFollow(FOLLOW_corePermissionName_in_permission8273);
               p = this.corePermissionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return perm;
               }

               if(this.state.backtracking == 0) {
                  perm = Permissions.permission(CorePermission.getDomain(), p != null?this.input.toString(p.start, p.stop):null);
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_permissionDomain_in_permission8285);
               domain = this.permissionDomain();
               --this.state._fsp;
               if(this.state.failed) {
                  return perm;
               }

               this.match(this.input, 201, FOLLOW_201_in_permission8287);
               if(this.state.failed) {
                  return perm;
               }

               this.pushFollow(FOLLOW_permissionName_in_permission8291);
               name = this.permissionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return perm;
               }

               if(this.state.backtracking == 0) {
                  perm = this.validatePermission(domain != null?this.input.toString(domain.start, domain.stop):null, name != null?this.input.toString(name.start, name.stop):null);
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return perm;
      } finally {
         ;
      }
   }

   public final Cql_Parser.permissionDomain_return permissionDomain() throws RecognitionException {
      Cql_Parser.permissionDomain_return retval = new Cql_Parser.permissionDomain_return();
      retval.start = this.input.LT(1);

      try {
         try {
            int alt150 = true;
            byte alt150;
            switch(this.input.LA(1)) {
            case 23:
               alt150 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 180:
            case 181:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return retval;
               }

               NoViableAltException nvae = new NoViableAltException("", 150, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt150 = 4;
               break;
            case 178:
               alt150 = 3;
               break;
            case 182:
               alt150 = 2;
            }

            switch(alt150) {
            case 1:
               this.match(this.input, 23, FOLLOW_IDENT_in_permissionDomain8099);
               if(this.state.failed) {
                  return retval;
               }
               break;
            case 2:
               this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_permissionDomain8107);
               if(this.state.failed) {
                  return retval;
               }
               break;
            case 3:
               this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_permissionDomain8115);
               if(this.state.failed) {
                  return retval;
               }
               break;
            case 4:
               this.pushFollow(FOLLOW_unreserved_keyword_in_permissionDomain8123);
               this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return retval;
               }
            }

            retval.stop = this.input.LT(-1);
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return retval;
      } finally {
         ;
      }
   }

   public final Cql_Parser.permissionName_return permissionName() throws RecognitionException {
      Cql_Parser.permissionName_return retval = new Cql_Parser.permissionName_return();
      retval.start = this.input.LT(1);

      try {
         try {
            int alt151 = true;
            byte alt151;
            switch(this.input.LA(1)) {
            case 23:
               alt151 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 32:
            case 33:
            case 35:
            case 38:
            case 39:
            case 43:
            case 47:
            case 56:
            case 57:
            case 58:
            case 65:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 180:
            case 181:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return retval;
               }

               NoViableAltException nvae = new NoViableAltException("", 151, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt151 = 5;
               break;
            case 31:
            case 37:
            case 52:
            case 59:
            case 63:
            case 66:
            case 103:
            case 133:
               alt151 = 4;
               break;
            case 178:
               alt151 = 3;
               break;
            case 182:
               alt151 = 2;
            }

            switch(alt151) {
            case 1:
               this.match(this.input, 23, FOLLOW_IDENT_in_permissionName8140);
               if(this.state.failed) {
                  return retval;
               }
               break;
            case 2:
               this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_permissionName8148);
               if(this.state.failed) {
                  return retval;
               }
               break;
            case 3:
               this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_permissionName8156);
               if(this.state.failed) {
                  return retval;
               }
               break;
            case 4:
               this.pushFollow(FOLLOW_corePermissionName_in_permissionName8164);
               this.corePermissionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return retval;
               }
               break;
            case 5:
               this.pushFollow(FOLLOW_unreserved_keyword_in_permissionName8172);
               this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return retval;
               }
            }

            retval.stop = this.input.LT(-1);
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return retval;
      } finally {
         ;
      }
   }

   public final Set<Permission> permissionOrAll() throws RecognitionException {
      Set<Permission> perms = null;
      Permission p = null;
      Permission px = null;

      try {
         try {
            int alt157 = true;
            int LA157_2;
            int nvaeMark;
            NoViableAltException nvae;
            byte alt157;
            switch(this.input.LA(1)) {
            case 23:
            case 28:
            case 31:
            case 34:
            case 36:
            case 37:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 103:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 127:
            case 129:
            case 131:
            case 132:
            case 133:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
            case 178:
            case 182:
               alt157 = 3;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 32:
            case 33:
            case 35:
            case 38:
            case 39:
            case 43:
            case 47:
            case 56:
            case 57:
            case 58:
            case 65:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 179:
            case 180:
            case 181:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return (Set)perms;
               }

               NoViableAltException nvae = new NoViableAltException("", 157, 0, this.input);
               throw nvae;
            case 29:
               LA157_2 = this.input.LA(2);
               if(LA157_2 != -1 && LA157_2 != 108 && (LA157_2 < 112 || LA157_2 > 113) && LA157_2 != 121 && LA157_2 != 204) {
                  if(LA157_2 != 201) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return (Set)perms;
                     }

                     nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        nvae = new NoViableAltException("", 157, 1, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt157 = 3;
               } else {
                  alt157 = 1;
               }
               break;
            case 121:
               LA157_2 = this.input.LA(2);
               if(LA157_2 != -1 && LA157_2 != 108 && (LA157_2 < 112 || LA157_2 > 113) && LA157_2 != 204) {
                  if(LA157_2 != 201) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return (Set)perms;
                     }

                     nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        nvae = new NoViableAltException("", 157, 2, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt157 = 3;
               } else {
                  alt157 = 2;
               }
            }

            byte alt154;
            switch(alt157) {
            case 1:
               this.match(this.input, 29, FOLLOW_K_ALL_in_permissionOrAll8314);
               if(this.state.failed) {
                  return (Set)perms;
               }

               alt154 = 2;
               nvaeMark = this.input.LA(1);
               if(nvaeMark == 121) {
                  alt154 = 1;
               }

               switch(alt154) {
               case 1:
                  this.match(this.input, 121, FOLLOW_K_PERMISSIONS_in_permissionOrAll8318);
                  if(this.state.failed) {
                     return (Set)perms;
                  }
               default:
                  if(this.state.backtracking == 0) {
                     perms = Permissions.all();
                  }

                  return (Set)perms;
               }
            case 2:
               this.match(this.input, 121, FOLLOW_K_PERMISSIONS_in_permissionOrAll8337);
               if(this.state.failed) {
                  return (Set)perms;
               }

               if(this.state.backtracking == 0) {
                  perms = Permissions.all();
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_permission_in_permissionOrAll8349);
               p = this.permission();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Set)perms;
               }

               alt154 = 2;
               nvaeMark = this.input.LA(1);
               if(nvaeMark == 120) {
                  alt154 = 1;
               }

               switch(alt154) {
               case 1:
                  this.match(this.input, 120, FOLLOW_K_PERMISSION_in_permissionOrAll8353);
                  if(this.state.failed) {
                     return (Set)perms;
                  }
               default:
                  if(this.state.backtracking == 0) {
                     perms = p == null?Collections.emptySet():Permissions.setOf(new Permission[]{p});
                  }
               }

               while(true) {
                  int alt156 = 2;
                  int LA156_0 = this.input.LA(1);
                  if(LA156_0 == 198) {
                     alt156 = 1;
                  }

                  switch(alt156) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_permissionOrAll8382);
                     if(this.state.failed) {
                        return (Set)perms;
                     }

                     this.pushFollow(FOLLOW_permission_in_permissionOrAll8386);
                     px = this.permission();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return (Set)perms;
                     }

                     int alt155 = 2;
                     int LA155_0 = this.input.LA(1);
                     if(LA155_0 == 120) {
                        alt155 = 1;
                     }

                     switch(alt155) {
                     case 1:
                        this.match(this.input, 120, FOLLOW_K_PERMISSION_in_permissionOrAll8390);
                        if(this.state.failed) {
                           return (Set)perms;
                        }
                     default:
                        if(this.state.backtracking == 0 && px != null) {
                           perms = Permissions.setOf((Set)perms, px);
                        }
                        continue;
                     }
                  default:
                     return (Set)perms;
                  }
               }
            }
         } catch (RecognitionException var27) {
            this.reportError(var27);
            this.recover(this.input, var27);
         }

         return (Set)perms;
      } finally {
         ;
      }
   }

   public final void pkDef(CreateTableStatement.RawStatement expr) throws RecognitionException {
      ColumnIdentifier k1 = null;
      ColumnIdentifier kn = null;
      ArrayList l = new ArrayList();

      try {
         try {
            int alt100 = true;
            int LA100_0 = this.input.LA(1);
            byte alt100;
            if(LA100_0 != 23 && (LA100_0 < 28 || LA100_0 > 29) && LA100_0 != 34 && LA100_0 != 36 && (LA100_0 < 40 || LA100_0 > 42) && (LA100_0 < 44 || LA100_0 > 46) && (LA100_0 < 48 || LA100_0 > 51) && (LA100_0 < 53 || LA100_0 > 55) && (LA100_0 < 60 || LA100_0 > 62) && LA100_0 != 64 && (LA100_0 < 67 || LA100_0 > 70) && LA100_0 != 73 && (LA100_0 < 75 || LA100_0 > 76) && LA100_0 != 78 && (LA100_0 < 82 || LA100_0 > 84) && LA100_0 != 86 && (LA100_0 < 89 || LA100_0 > 91) && (LA100_0 < 93 || LA100_0 > 95) && (LA100_0 < 97 || LA100_0 > 99) && LA100_0 != 104 && LA100_0 != 107 && LA100_0 != 109 && LA100_0 != 114 && (LA100_0 < 117 || LA100_0 > 121) && LA100_0 != 127 && LA100_0 != 129 && (LA100_0 < 131 || LA100_0 > 132) && (LA100_0 < 135 || LA100_0 > 145) && LA100_0 != 148 && (LA100_0 < 150 || LA100_0 > 152) && (LA100_0 < 158 || LA100_0 > 159) && (LA100_0 < 161 || LA100_0 > 164) && LA100_0 != 168 && LA100_0 != 178) {
               if(LA100_0 != 194) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 100, 0, this.input);
                  throw nvae;
               }

               alt100 = 2;
            } else {
               alt100 = 1;
            }

            switch(alt100) {
            case 1:
               this.pushFollow(FOLLOW_ident_in_pkDef5333);
               k1 = this.ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  l.add(k1);
               }
               break;
            case 2:
               this.match(this.input, 194, FOLLOW_194_in_pkDef5343);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_ident_in_pkDef5347);
               k1 = this.ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  l.add(k1);
               }

               label357:
               while(true) {
                  int alt99 = 2;
                  int LA99_0 = this.input.LA(1);
                  if(LA99_0 == 198) {
                     alt99 = 1;
                  }

                  switch(alt99) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_pkDef5353);
                     if(this.state.failed) {
                        return;
                     }

                     this.pushFollow(FOLLOW_ident_in_pkDef5357);
                     kn = this.ident();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        l.add(kn);
                     }
                     break;
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_pkDef5364);
                     if(this.state.failed) {
                        return;
                     }
                     break label357;
                  }
               }
            }

            if(this.state.backtracking == 0) {
               expr.addKeyAliases(l);
            }
         } catch (RecognitionException var12) {
            this.reportError(var12);
            this.recover(this.input, var12);
         }

      } finally {
         ;
      }
   }

   public final void properties(PropertyDefinitions props) throws RecognitionException {
      try {
         this.pushFollow(FOLLOW_property_in_properties12680);
         this.property(props);
         --this.state._fsp;
         if(!this.state.failed) {
            while(true) {
               int alt223 = 2;
               int LA223_0 = this.input.LA(1);
               if(LA223_0 == 32) {
                  alt223 = 1;
               }

               switch(alt223) {
               case 1:
                  this.match(this.input, 32, FOLLOW_K_AND_in_properties12684);
                  if(this.state.failed) {
                     return;
                  }

                  this.pushFollow(FOLLOW_property_in_properties12686);
                  this.property(props);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }
                  break;
               default:
                  return;
               }
            }
         }
      } catch (RecognitionException var7) {
         this.reportError(var7);
         this.recover(this.input, var7);
      } finally {
         ;
      }
   }

   public final void property(PropertyDefinitions props) throws RecognitionException {
      ColumnIdentifier k = null;
      String simple = null;
      Maps.Literal map = null;

      try {
         try {
            int alt224 = true;
            int alt224 = this.dfa224.predict(this.input);
            switch(alt224) {
            case 1:
               this.pushFollow(FOLLOW_noncol_ident_in_property12709);
               k = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 207, FOLLOW_207_in_property12711);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_propertyValue_in_property12715);
               simple = this.propertyValue();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  try {
                     props.addProperty(k.toString(), simple);
                  } catch (SyntaxException var13) {
                     this.addRecognitionError(var13.getMessage());
                  }
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_noncol_ident_in_property12727);
               k = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 207, FOLLOW_207_in_property12729);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_fullMapLiteral_in_property12733);
               map = this.fullMapLiteral();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  try {
                     props.addProperty(k.toString(), this.convertPropertyMap(map));
                  } catch (SyntaxException var12) {
                     this.addRecognitionError(var12.getMessage());
                  }
               }
            }
         } catch (RecognitionException var14) {
            this.reportError(var14);
            this.recover(this.input, var14);
         }

      } finally {
         ;
      }
   }

   public final String propertyValue() throws RecognitionException {
      String str = null;
      Constants.Literal c = null;
      String u = null;

      try {
         try {
            int alt225 = true;
            int LA225_0 = this.input.LA(1);
            byte alt225;
            if(LA225_0 != 6 && LA225_0 != 11 && LA225_0 != 17 && LA225_0 != 21 && LA225_0 != 24 && (LA225_0 < 105 || LA225_0 > 106) && (LA225_0 < 122 || LA225_0 > 123) && LA225_0 != 182 && LA225_0 != 185) {
               if((LA225_0 < 28 || LA225_0 > 29) && LA225_0 != 34 && LA225_0 != 36 && (LA225_0 < 40 || LA225_0 > 42) && (LA225_0 < 44 || LA225_0 > 46) && (LA225_0 < 48 || LA225_0 > 51) && (LA225_0 < 53 || LA225_0 > 55) && (LA225_0 < 60 || LA225_0 > 62) && LA225_0 != 64 && (LA225_0 < 67 || LA225_0 > 70) && LA225_0 != 73 && (LA225_0 < 75 || LA225_0 > 76) && LA225_0 != 78 && (LA225_0 < 82 || LA225_0 > 84) && LA225_0 != 86 && (LA225_0 < 89 || LA225_0 > 91) && (LA225_0 < 93 || LA225_0 > 95) && (LA225_0 < 97 || LA225_0 > 99) && LA225_0 != 104 && LA225_0 != 107 && LA225_0 != 109 && LA225_0 != 114 && (LA225_0 < 117 || LA225_0 > 121) && LA225_0 != 127 && LA225_0 != 129 && (LA225_0 < 131 || LA225_0 > 132) && (LA225_0 < 135 || LA225_0 > 145) && LA225_0 != 148 && (LA225_0 < 150 || LA225_0 > 152) && (LA225_0 < 158 || LA225_0 > 159) && (LA225_0 < 161 || LA225_0 > 164) && LA225_0 != 168) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return str;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 225, 0, this.input);
                  throw nvae;
               }

               alt225 = 2;
            } else {
               alt225 = 1;
            }

            switch(alt225) {
            case 1:
               this.pushFollow(FOLLOW_constant_in_propertyValue12758);
               c = this.constant();
               --this.state._fsp;
               if(this.state.failed) {
                  return str;
               }

               if(this.state.backtracking == 0) {
                  str = c.getRawText();
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_unreserved_keyword_in_propertyValue12780);
               u = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return str;
               }

               if(this.state.backtracking == 0) {
                  str = u;
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return str;
      } finally {
         ;
      }
   }

   public void recover(IntStream input, RecognitionException re) {
   }

   protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow) throws RecognitionException {
      throw new MismatchedTokenException(ttype, input);
   }

   public final void relation(WhereClause.Builder clauses) throws RecognitionException {
      ColumnMetadata.Raw name = null;
      Operator type = null;
      Term.Raw t = null;
      List<ColumnMetadata.Raw> l = null;
      AbstractMarker.INRaw marker = null;
      List<Term.Raw> inValues = null;
      Operator rt = null;
      Term.Raw key = null;
      List<ColumnMetadata.Raw> ids = null;
      Tuples.INRaw tupleInMarker = null;
      List<Tuples.Literal> literals = null;
      List<Tuples.Raw> markers = null;
      Tuples.Literal literal = null;
      Tuples.Raw tupleMarker = null;

      try {
         try {
            int alt229 = true;
            int alt229 = this.dfa229.predict(this.input);
            switch(alt229) {
            case 1:
               this.pushFollow(FOLLOW_cident_in_relation12878);
               name = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_relationType_in_relation12882);
               type = this.relationType();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_term_in_relation12886);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  clauses.add((Relation)(new SingleColumnRelation(name, type, t)));
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_cident_in_relation12898);
               name = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 95, FOLLOW_K_LIKE_in_relation12900);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_term_in_relation12904);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  clauses.add((Relation)(new SingleColumnRelation(name, Operator.LIKE, t)));
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_cident_in_relation12916);
               name = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 88, FOLLOW_K_IS_in_relation12918);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 110, FOLLOW_K_NOT_in_relation12920);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 111, FOLLOW_K_NULL_in_relation12922);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  clauses.add((Relation)(new SingleColumnRelation(name, Operator.IS_NOT, Constants.NULL_LITERAL)));
               }
               break;
            case 4:
               this.match(this.input, 147, FOLLOW_K_TOKEN_in_relation12932);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_tupleOfIdentifiers_in_relation12936);
               l = this.tupleOfIdentifiers();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_relationType_in_relation12940);
               type = this.relationType();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_term_in_relation12944);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  clauses.add((Relation)(new TokenRelation(l, type, t)));
               }
               break;
            case 5:
               this.pushFollow(FOLLOW_cident_in_relation12964);
               name = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 80, FOLLOW_K_IN_in_relation12966);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_inMarker_in_relation12970);
               marker = this.inMarker();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  clauses.add((Relation)(new SingleColumnRelation(name, Operator.IN, marker)));
               }
               break;
            case 6:
               this.pushFollow(FOLLOW_cident_in_relation12990);
               name = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 80, FOLLOW_K_IN_in_relation12992);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_singleColumnInValues_in_relation12996);
               inValues = this.singleColumnInValues();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  clauses.add((Relation)SingleColumnRelation.createInRelation(name, inValues));
               }
               break;
            case 7:
               this.pushFollow(FOLLOW_cident_in_relation13016);
               name = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_containsOperator_in_relation13020);
               rt = this.containsOperator();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_term_in_relation13024);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  clauses.add((Relation)(new SingleColumnRelation(name, rt, t)));
               }
               break;
            case 8:
               this.pushFollow(FOLLOW_cident_in_relation13036);
               name = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 210, FOLLOW_210_in_relation13038);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_term_in_relation13042);
               key = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 212, FOLLOW_212_in_relation13044);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_relationType_in_relation13048);
               type = this.relationType();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_term_in_relation13052);
               t = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  clauses.add((Relation)(new SingleColumnRelation(name, key, type, t)));
               }
               break;
            case 9:
               this.pushFollow(FOLLOW_tupleOfIdentifiers_in_relation13064);
               ids = this.tupleOfIdentifiers();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               int alt228 = true;
               int alt228 = this.dfa228.predict(this.input);
               switch(alt228) {
               case 1:
                  this.match(this.input, 80, FOLLOW_K_IN_in_relation13074);
                  if(this.state.failed) {
                     return;
                  }

                  int alt227 = true;
                  int LA227_0 = this.input.LA(1);
                  byte alt227;
                  if(LA227_0 == 194) {
                     switch(this.input.LA(2)) {
                     case 177:
                     case 203:
                        alt227 = 4;
                        break;
                     case 194:
                        alt227 = 3;
                        break;
                     case 195:
                        alt227 = 1;
                        break;
                     default:
                        if(this.state.backtracking > 0) {
                           this.state.failed = true;
                           return;
                        }

                        int nvaeMark = this.input.mark();

                        try {
                           this.input.consume();
                           NoViableAltException nvae = new NoViableAltException("", 227, 1, this.input);
                           throw nvae;
                        } finally {
                           this.input.rewind(nvaeMark);
                        }
                     }
                  } else {
                     if(LA227_0 != 177 && LA227_0 != 203) {
                        if(this.state.backtracking > 0) {
                           this.state.failed = true;
                           return;
                        }

                        NoViableAltException nvae = new NoViableAltException("", 227, 0, this.input);
                        throw nvae;
                     }

                     alt227 = 2;
                  }

                  switch(alt227) {
                  case 1:
                     this.match(this.input, 194, FOLLOW_194_in_relation13088);
                     if(this.state.failed) {
                        return;
                     }

                     this.match(this.input, 195, FOLLOW_195_in_relation13090);
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        clauses.add((Relation)MultiColumnRelation.createInRelation(ids, new ArrayList()));
                     }

                     return;
                  case 2:
                     this.pushFollow(FOLLOW_inMarkerForTuple_in_relation13122);
                     tupleInMarker = this.inMarkerForTuple();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        clauses.add((Relation)MultiColumnRelation.createSingleMarkerInRelation(ids, tupleInMarker));
                     }

                     return;
                  case 3:
                     this.pushFollow(FOLLOW_tupleOfTupleLiterals_in_relation13156);
                     literals = this.tupleOfTupleLiterals();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        clauses.add((Relation)MultiColumnRelation.createInRelation(ids, literals));
                     }

                     return;
                  case 4:
                     this.pushFollow(FOLLOW_tupleOfMarkersForTuples_in_relation13190);
                     markers = this.tupleOfMarkersForTuples();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }

                     if(this.state.backtracking == 0) {
                        clauses.add((Relation)MultiColumnRelation.createInRelation(ids, markers));
                     }

                     return;
                  default:
                     return;
                  }
               case 2:
                  this.pushFollow(FOLLOW_relationType_in_relation13232);
                  type = this.relationType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  this.pushFollow(FOLLOW_tupleLiteral_in_relation13236);
                  literal = this.tupleLiteral();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  if(this.state.backtracking == 0) {
                     clauses.add((Relation)MultiColumnRelation.createNonInRelation(ids, type, literal));
                  }

                  return;
               case 3:
                  this.pushFollow(FOLLOW_relationType_in_relation13262);
                  type = this.relationType();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  this.pushFollow(FOLLOW_markerForTuple_in_relation13266);
                  tupleMarker = this.markerForTuple();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }

                  if(this.state.backtracking == 0) {
                     clauses.add((Relation)MultiColumnRelation.createNonInRelation(ids, type, tupleMarker));
                  }

                  return;
               default:
                  return;
               }
            case 10:
               this.match(this.input, 194, FOLLOW_194_in_relation13296);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_relation_in_relation13298);
               this.relation(clauses);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 195, FOLLOW_195_in_relation13301);
               if(this.state.failed) {
                  return;
               }
            }
         } catch (RecognitionException var31) {
            this.reportError(var31);
            this.recover(this.input, var31);
         }

      } finally {
         ;
      }
   }

   public final void relationOrExpression(WhereClause.Builder clause) throws RecognitionException {
      try {
         try {
            int alt37 = true;
            int LA37_0 = this.input.LA(1);
            byte alt37;
            if(LA37_0 != 14 && LA37_0 != 23 && (LA37_0 < 28 || LA37_0 > 29) && LA37_0 != 34 && LA37_0 != 36 && (LA37_0 < 40 || LA37_0 > 42) && (LA37_0 < 44 || LA37_0 > 46) && (LA37_0 < 48 || LA37_0 > 51) && (LA37_0 < 53 || LA37_0 > 55) && (LA37_0 < 60 || LA37_0 > 62) && LA37_0 != 64 && (LA37_0 < 67 || LA37_0 > 70) && LA37_0 != 73 && (LA37_0 < 75 || LA37_0 > 76) && LA37_0 != 78 && (LA37_0 < 82 || LA37_0 > 84) && LA37_0 != 86 && (LA37_0 < 89 || LA37_0 > 91) && (LA37_0 < 93 || LA37_0 > 95) && (LA37_0 < 97 || LA37_0 > 99) && LA37_0 != 104 && LA37_0 != 107 && LA37_0 != 109 && LA37_0 != 114 && (LA37_0 < 117 || LA37_0 > 121) && LA37_0 != 127 && LA37_0 != 129 && (LA37_0 < 131 || LA37_0 > 132) && (LA37_0 < 135 || LA37_0 > 145) && (LA37_0 < 147 || LA37_0 > 148) && (LA37_0 < 150 || LA37_0 > 152) && (LA37_0 < 158 || LA37_0 > 159) && (LA37_0 < 161 || LA37_0 > 164) && LA37_0 != 168 && LA37_0 != 178 && LA37_0 != 194) {
               if(LA37_0 != 213) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 37, 0, this.input);
                  throw nvae;
               }

               alt37 = 2;
            } else {
               alt37 = 1;
            }

            switch(alt37) {
            case 1:
               this.pushFollow(FOLLOW_relation_in_relationOrExpression2945);
               this.relation(clause);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_customIndexExpression_in_relationOrExpression2954);
               this.customIndexExpression(clause);
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

      } finally {
         ;
      }
   }

   public final Operator relationType() throws RecognitionException {
      Operator op = null;

      try {
         try {
            int alt226 = true;
            byte alt226;
            switch(this.input.LA(1)) {
            case 192:
               alt226 = 6;
               break;
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return op;
               }

               NoViableAltException nvae = new NoViableAltException("", 226, 0, this.input);
               throw nvae;
            case 205:
               alt226 = 2;
               break;
            case 206:
               alt226 = 3;
               break;
            case 207:
               alt226 = 1;
               break;
            case 208:
               alt226 = 4;
               break;
            case 209:
               alt226 = 5;
            }

            switch(alt226) {
            case 1:
               this.match(this.input, 207, FOLLOW_207_in_relationType12803);
               if(this.state.failed) {
                  return op;
               }

               if(this.state.backtracking == 0) {
                  op = Operator.EQ;
               }
               break;
            case 2:
               this.match(this.input, 205, FOLLOW_205_in_relationType12814);
               if(this.state.failed) {
                  return op;
               }

               if(this.state.backtracking == 0) {
                  op = Operator.LT;
               }
               break;
            case 3:
               this.match(this.input, 206, FOLLOW_206_in_relationType12825);
               if(this.state.failed) {
                  return op;
               }

               if(this.state.backtracking == 0) {
                  op = Operator.LTE;
               }
               break;
            case 4:
               this.match(this.input, 208, FOLLOW_208_in_relationType12835);
               if(this.state.failed) {
                  return op;
               }

               if(this.state.backtracking == 0) {
                  op = Operator.GT;
               }
               break;
            case 5:
               this.match(this.input, 209, FOLLOW_209_in_relationType12846);
               if(this.state.failed) {
                  return op;
               }

               if(this.state.backtracking == 0) {
                  op = Operator.GTE;
               }
               break;
            case 6:
               this.match(this.input, 192, FOLLOW_192_in_relationType12856);
               if(this.state.failed) {
                  return op;
               }

               if(this.state.backtracking == 0) {
                  op = Operator.NEQ;
               }
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return op;
      } finally {
         ;
      }
   }

   public void removeErrorListener(ErrorListener listener) {
      this.listeners.remove(listener);
   }

   public final Map<FieldIdentifier, FieldIdentifier> renamedColumns() throws RecognitionException {
      Map<FieldIdentifier, FieldIdentifier> renames = null;
      FieldIdentifier id1 = null;
      FieldIdentifier toId1 = null;
      FieldIdentifier idn = null;
      FieldIdentifier toIdn = null;
      renames = new HashMap();

      try {
         this.pushFollow(FOLLOW_fident_in_renamedColumns7043);
         id1 = this.fident();
         --this.state._fsp;
         if(this.state.failed) {
            return renames;
         } else {
            this.match(this.input, 146, FOLLOW_K_TO_in_renamedColumns7045);
            if(this.state.failed) {
               return renames;
            } else {
               this.pushFollow(FOLLOW_fident_in_renamedColumns7049);
               toId1 = this.fident();
               --this.state._fsp;
               if(this.state.failed) {
                  return renames;
               } else {
                  if(this.state.backtracking == 0) {
                     renames.put(id1, toId1);
                  }

                  while(true) {
                     int alt134 = 2;
                     int LA134_0 = this.input.LA(1);
                     if(LA134_0 == 32) {
                        alt134 = 1;
                     }

                     switch(alt134) {
                     case 1:
                        this.match(this.input, 32, FOLLOW_K_AND_in_renamedColumns7055);
                        if(this.state.failed) {
                           return renames;
                        }

                        this.pushFollow(FOLLOW_fident_in_renamedColumns7059);
                        idn = this.fident();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return renames;
                        }

                        this.match(this.input, 146, FOLLOW_K_TO_in_renamedColumns7061);
                        if(this.state.failed) {
                           return renames;
                        }

                        this.pushFollow(FOLLOW_fident_in_renamedColumns7065);
                        toIdn = this.fident();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return renames;
                        }

                        if(this.state.backtracking == 0) {
                           renames.put(idn, toIdn);
                        }
                        break;
                     default:
                        return renames;
                     }
                  }
               }
            }
         }
      } catch (RecognitionException var12) {
         this.reportError(var12);
         this.recover(this.input, var12);
         return renames;
      } finally {
         ;
      }
   }

   public final IResource resourceFromInternalName() throws RecognitionException {
      IResource res = null;
      Token s = null;

      try {
         try {
            this.match(this.input, 127, FOLLOW_K_RESOURCE_in_resourceFromInternalName8427);
            if(this.state.failed) {
               return res;
            }

            this.match(this.input, 194, FOLLOW_194_in_resourceFromInternalName8429);
            if(this.state.failed) {
               return res;
            }

            s = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_resourceFromInternalName8433);
            if(this.state.failed) {
               return res;
            }

            this.match(this.input, 195, FOLLOW_195_in_resourceFromInternalName8435);
            if(this.state.failed) {
               return res;
            }

            if(this.state.backtracking == 0) {
               res = Resources.fromName(s != null?s.getText():null);
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return res;
      } finally {
         ;
      }
   }

   public final GrantPermissionsStatement restrictPermissionsStatement() throws RecognitionException {
      GrantPermissionsStatement stmt = null;
      IResource i = null;
      IResource r = null;
      RoleName grantee = null;
      Set<Permission> permissionOrAll3 = null;
      IResource res = null;

      try {
         try {
            this.match(this.input, 128, FOLLOW_K_RESTRICT_in_restrictPermissionsStatement7662);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_permissionOrAll_in_restrictPermissionsStatement7674);
            permissionOrAll3 = this.permissionOrAll();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 113, FOLLOW_K_ON_in_restrictPermissionsStatement7682);
            if(this.state.failed) {
               return stmt;
            }

            int alt145 = true;
            int LA145_0 = this.input.LA(1);
            byte alt145;
            if(LA145_0 == 127) {
               int LA145_1 = this.input.LA(2);
               if(LA145_1 == 194) {
                  alt145 = 1;
               } else {
                  if(LA145_1 != 146 && LA145_1 != 201) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return stmt;
                     }

                     int nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 145, 1, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt145 = 2;
               }
            } else {
               if(LA145_0 != 23 && (LA145_0 < 28 || LA145_0 > 29) && LA145_0 != 34 && LA145_0 != 36 && (LA145_0 < 40 || LA145_0 > 42) && (LA145_0 < 44 || LA145_0 > 51) && (LA145_0 < 53 || LA145_0 > 55) && (LA145_0 < 60 || LA145_0 > 62) && LA145_0 != 64 && (LA145_0 < 67 || LA145_0 > 70) && LA145_0 != 73 && (LA145_0 < 75 || LA145_0 > 76) && LA145_0 != 78 && (LA145_0 < 82 || LA145_0 > 84) && LA145_0 != 86 && (LA145_0 < 89 || LA145_0 > 95) && (LA145_0 < 97 || LA145_0 > 99) && (LA145_0 < 101 || LA145_0 > 102) && LA145_0 != 104 && LA145_0 != 107 && LA145_0 != 109 && LA145_0 != 114 && (LA145_0 < 117 || LA145_0 > 121) && LA145_0 != 129 && (LA145_0 < 131 || LA145_0 > 132) && (LA145_0 < 135 || LA145_0 > 145) && LA145_0 != 148 && (LA145_0 < 150 || LA145_0 > 152) && (LA145_0 < 158 || LA145_0 > 159) && (LA145_0 < 161 || LA145_0 > 164) && LA145_0 != 168 && (LA145_0 < 177 || LA145_0 > 178)) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return stmt;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 145, 0, this.input);
                  throw nvae;
               }

               alt145 = 2;
            }

            switch(alt145) {
            case 1:
               this.pushFollow(FOLLOW_resourceFromInternalName_in_restrictPermissionsStatement7698);
               i = this.resourceFromInternalName();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  res = i;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_resource_in_restrictPermissionsStatement7706);
               r = this.gCql.resource();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  res = r;
               }
            }

            this.match(this.input, 146, FOLLOW_K_TO_in_restrictPermissionsStatement7718);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_userOrRoleName_in_restrictPermissionsStatement7732);
            grantee = this.userOrRoleName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            if(this.state.backtracking == 0) {
               stmt = new GrantPermissionsStatement(this.filterPermissions(permissionOrAll3, res), res, grantee, GrantMode.RESTRICT);
            }
         } catch (RecognitionException var21) {
            this.reportError(var21);
            this.recover(this.input, var21);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final RevokePermissionsStatement revokePermissionsStatement() throws RecognitionException {
      RevokePermissionsStatement stmt = null;
      IResource i = null;
      IResource r = null;
      RoleName revokee = null;
      Set<Permission> permissionOrAll2 = null;
      IResource res = null;
      GrantMode grantMode = GrantMode.GRANT;

      try {
         try {
            this.match(this.input, 130, FOLLOW_K_REVOKE_in_revokePermissionsStatement7531);
            if(this.state.failed) {
               return stmt;
            }

            int alt143 = 2;
            int LA143_0 = this.input.LA(1);
            if(LA143_0 == 37) {
               int LA143_1 = this.input.LA(2);
               if(LA143_1 == 71) {
                  alt143 = 1;
               }
            }

            switch(alt143) {
            case 1:
               this.match(this.input, 37, FOLLOW_K_AUTHORIZE_in_revokePermissionsStatement7545);
               if(this.state.failed) {
                  return stmt;
               }

               this.match(this.input, 71, FOLLOW_K_FOR_in_revokePermissionsStatement7547);
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  grantMode = GrantMode.GRANTABLE;
               }
            }

            this.pushFollow(FOLLOW_permissionOrAll_in_revokePermissionsStatement7564);
            permissionOrAll2 = this.permissionOrAll();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 113, FOLLOW_K_ON_in_revokePermissionsStatement7572);
            if(this.state.failed) {
               return stmt;
            }

            int alt144 = true;
            int LA144_0 = this.input.LA(1);
            byte alt144;
            if(LA144_0 == 127) {
               int LA144_1 = this.input.LA(2);
               if(LA144_1 == 194) {
                  alt144 = 1;
               } else {
                  if(LA144_1 != 72 && LA144_1 != 201) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return stmt;
                     }

                     int nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 144, 1, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt144 = 2;
               }
            } else {
               if(LA144_0 != 23 && (LA144_0 < 28 || LA144_0 > 29) && LA144_0 != 34 && LA144_0 != 36 && (LA144_0 < 40 || LA144_0 > 42) && (LA144_0 < 44 || LA144_0 > 51) && (LA144_0 < 53 || LA144_0 > 55) && (LA144_0 < 60 || LA144_0 > 62) && LA144_0 != 64 && (LA144_0 < 67 || LA144_0 > 70) && LA144_0 != 73 && (LA144_0 < 75 || LA144_0 > 76) && LA144_0 != 78 && (LA144_0 < 82 || LA144_0 > 84) && LA144_0 != 86 && (LA144_0 < 89 || LA144_0 > 95) && (LA144_0 < 97 || LA144_0 > 99) && (LA144_0 < 101 || LA144_0 > 102) && LA144_0 != 104 && LA144_0 != 107 && LA144_0 != 109 && LA144_0 != 114 && (LA144_0 < 117 || LA144_0 > 121) && LA144_0 != 129 && (LA144_0 < 131 || LA144_0 > 132) && (LA144_0 < 135 || LA144_0 > 145) && LA144_0 != 148 && (LA144_0 < 150 || LA144_0 > 152) && (LA144_0 < 158 || LA144_0 > 159) && (LA144_0 < 161 || LA144_0 > 164) && LA144_0 != 168 && (LA144_0 < 177 || LA144_0 > 178)) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return stmt;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 144, 0, this.input);
                  throw nvae;
               }

               alt144 = 2;
            }

            switch(alt144) {
            case 1:
               this.pushFollow(FOLLOW_resourceFromInternalName_in_revokePermissionsStatement7588);
               i = this.resourceFromInternalName();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  res = i;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_resource_in_revokePermissionsStatement7596);
               r = this.gCql.resource();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  res = r;
               }
            }

            this.match(this.input, 72, FOLLOW_K_FROM_in_revokePermissionsStatement7608);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_userOrRoleName_in_revokePermissionsStatement7622);
            revokee = this.userOrRoleName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            if(this.state.backtracking == 0) {
               stmt = new RevokePermissionsStatement(this.filterPermissions(permissionOrAll2, res), res, revokee, grantMode);
            }
         } catch (RecognitionException var24) {
            this.reportError(var24);
            this.recover(this.input, var24);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final RevokeRoleStatement revokeRoleStatement() throws RecognitionException {
      RevokeRoleStatement stmt = null;
      RoleName role = null;
      RoleName revokee = null;

      try {
         try {
            this.match(this.input, 130, FOLLOW_K_REVOKE_in_revokeRoleStatement7940);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_userOrRoleName_in_revokeRoleStatement7954);
            role = this.userOrRoleName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 72, FOLLOW_K_FROM_in_revokeRoleStatement7962);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_userOrRoleName_in_revokeRoleStatement7976);
            revokee = this.userOrRoleName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            if(this.state.backtracking == 0) {
               stmt = new RevokeRoleStatement(role, revokee);
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final void roleName(RoleName name) throws RecognitionException {
      Token t = null;
      Token s = null;
      String k = null;

      try {
         try {
            int alt191 = true;
            byte alt191;
            switch(this.input.LA(1)) {
            case 23:
               alt191 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 179:
            case 180:
            case 181:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               NoViableAltException nvae = new NoViableAltException("", 191, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt191 = 4;
               break;
            case 177:
               alt191 = 5;
               break;
            case 178:
               alt191 = 3;
               break;
            case 182:
               alt191 = 2;
            }

            switch(alt191) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_roleName10306);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setName(t != null?t.getText():null, false);
               }
               break;
            case 2:
               s = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_roleName10331);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setName(s != null?s.getText():null, true);
               }
               break;
            case 3:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_roleName10347);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setName(t != null?t.getText():null, true);
               }
               break;
            case 4:
               this.pushFollow(FOLLOW_unreserved_keyword_in_roleName10366);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  name.setName(k, false);
               }
               break;
            case 5:
               this.match(this.input, 177, FOLLOW_QMARK_in_roleName10376);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  this.addRecognitionError("Bind variables cannot be used for role names");
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

      } finally {
         ;
      }
   }

   public final void roleOption(RoleOptions opts) throws RecognitionException {
      Token v = null;
      Token b = null;
      Maps.Literal m = null;

      try {
         try {
            int alt179 = true;
            byte alt179;
            switch(this.input.LA(1)) {
            case 98:
               alt179 = 4;
               break;
            case 114:
               alt179 = 2;
               break;
            case 118:
               alt179 = 1;
               break;
            case 140:
               alt179 = 3;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               NoViableAltException nvae = new NoViableAltException("", 179, 0, this.input);
               throw nvae;
            }

            switch(alt179) {
            case 1:
               this.match(this.input, 118, FOLLOW_K_PASSWORD_in_roleOption9425);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 207, FOLLOW_207_in_roleOption9427);
               if(this.state.failed) {
                  return;
               }

               v = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_roleOption9431);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  opts.setOption(IRoleManager.Option.PASSWORD, v != null?v.getText():null);
               }
               break;
            case 2:
               this.match(this.input, 114, FOLLOW_K_OPTIONS_in_roleOption9442);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 207, FOLLOW_207_in_roleOption9444);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_fullMapLiteral_in_roleOption9448);
               m = this.fullMapLiteral();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  opts.setOption(IRoleManager.Option.OPTIONS, this.convertPropertyMap(m));
               }
               break;
            case 3:
               this.match(this.input, 140, FOLLOW_K_SUPERUSER_in_roleOption9459);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 207, FOLLOW_207_in_roleOption9461);
               if(this.state.failed) {
                  return;
               }

               b = (Token)this.match(this.input, 6, FOLLOW_BOOLEAN_in_roleOption9465);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  opts.setOption(IRoleManager.Option.SUPERUSER, Boolean.valueOf(b != null?b.getText():null));
               }
               break;
            case 4:
               this.match(this.input, 98, FOLLOW_K_LOGIN_in_roleOption9476);
               if(this.state.failed) {
                  return;
               }

               this.match(this.input, 207, FOLLOW_207_in_roleOption9478);
               if(this.state.failed) {
                  return;
               }

               b = (Token)this.match(this.input, 6, FOLLOW_BOOLEAN_in_roleOption9482);
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  opts.setOption(IRoleManager.Option.LOGIN, Boolean.valueOf(b != null?b.getText():null));
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

      } finally {
         ;
      }
   }

   public final void roleOptions(RoleOptions opts) throws RecognitionException {
      try {
         this.pushFollow(FOLLOW_roleOption_in_roleOptions9397);
         this.roleOption(opts);
         --this.state._fsp;
         if(!this.state.failed) {
            while(true) {
               int alt178 = 2;
               int LA178_0 = this.input.LA(1);
               if(LA178_0 == 32) {
                  alt178 = 1;
               }

               switch(alt178) {
               case 1:
                  this.match(this.input, 32, FOLLOW_K_AND_in_roleOptions9401);
                  if(this.state.failed) {
                     return;
                  }

                  this.pushFollow(FOLLOW_roleOption_in_roleOptions9403);
                  this.roleOption(opts);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return;
                  }
                  break;
               default:
                  return;
               }
            }
         }
      } catch (RecognitionException var7) {
         this.reportError(var7);
         this.recover(this.input, var7);
      } finally {
         ;
      }
   }

   public final RoleResource roleResource() throws RecognitionException {
      RoleResource res = null;
      RoleName role = null;

      try {
         try {
            int alt162 = true;
            int LA162_0 = this.input.LA(1);
            byte alt162;
            if(LA162_0 == 29) {
               alt162 = 1;
            } else {
               if(LA162_0 != 131) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return res;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 162, 0, this.input);
                  throw nvae;
               }

               alt162 = 2;
            }

            switch(alt162) {
            case 1:
               this.match(this.input, 29, FOLLOW_K_ALL_in_roleResource8646);
               if(this.state.failed) {
                  return res;
               }

               this.match(this.input, 132, FOLLOW_K_ROLES_in_roleResource8648);
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = RoleResource.root();
               }
               break;
            case 2:
               this.match(this.input, 131, FOLLOW_K_ROLE_in_roleResource8658);
               if(this.state.failed) {
                  return res;
               }

               this.pushFollow(FOLLOW_userOrRoleName_in_roleResource8664);
               role = this.userOrRoleName();
               --this.state._fsp;
               if(this.state.failed) {
                  return res;
               }

               if(this.state.backtracking == 0) {
                  res = RoleResource.role(role.getName());
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return res;
      } finally {
         ;
      }
   }

   public final ColumnMetadata.Raw schema_cident() throws RecognitionException {
      ColumnMetadata.Raw id = null;
      Token t = null;
      String k = null;

      try {
         try {
            int alt181 = true;
            byte alt181;
            switch(this.input.LA(1)) {
            case 23:
               alt181 = 1;
               break;
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return id;
               }

               NoViableAltException nvae = new NoViableAltException("", 181, 0, this.input);
               throw nvae;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt181 = 3;
               break;
            case 178:
               alt181 = 2;
            }

            switch(alt181) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_schema_cident9624);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnMetadata.Raw.forUnquoted(t != null?t.getText():null);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_schema_cident9649);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnMetadata.Raw.forQuoted(t != null?t.getText():null);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_unreserved_keyword_in_schema_cident9668);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = ColumnMetadata.Raw.forUnquoted(k);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return id;
      } finally {
         ;
      }
   }

   public final Cql_Parser.selectClause_return selectClause() throws RecognitionException {
      Cql_Parser.selectClause_return retval = new Cql_Parser.selectClause_return();
      retval.start = this.input.LT(1);
      List<RawSelector> s = null;
      retval.isDistinct = false;

      try {
         try {
            int alt11 = true;
            int alt11 = this.dfa11.predict(this.input);
            switch(alt11) {
            case 1:
               this.match(this.input, 61, FOLLOW_K_DISTINCT_in_selectClause1299);
               if(this.state.failed) {
                  return retval;
               }

               this.pushFollow(FOLLOW_selectors_in_selectClause1303);
               s = this.selectors();
               --this.state._fsp;
               if(this.state.failed) {
                  return retval;
               }

               if(this.state.backtracking == 0) {
                  retval.isDistinct = true;
                  retval.selectors = s;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_selectors_in_selectClause1315);
               s = this.selectors();
               --this.state._fsp;
               if(this.state.failed) {
                  return retval;
               }

               if(this.state.backtracking == 0) {
                  retval.selectors = s;
               }
            }

            retval.stop = this.input.LT(-1);
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

         return retval;
      } finally {
         ;
      }
   }

   public final SelectStatement.RawStatement selectStatement() throws RecognitionException {
      SelectStatement.RawStatement expr = null;
      ParserRuleReturnScope sclause = null;
      CFName cf = null;
      WhereClause.Builder wclause = null;
      Term.Raw rows = null;
      Term.Raw limit = null;
      Term.Raw perPartitionLimit = null;
      Map<ColumnMetadata.Raw, Boolean> orderings = new LinkedHashMap();
      List<Selectable.Raw> groups = new ArrayList();
      boolean allowFiltering = false;
      boolean isJson = false;

      try {
         try {
            this.match(this.input, 133, FOLLOW_K_SELECT_in_selectStatement1070);
            if(this.state.failed) {
               return expr;
            }

            int alt2 = true;
            int alt2 = this.dfa2.predict(this.input);
            switch(alt2) {
            case 1:
               this.match(this.input, 89, FOLLOW_K_JSON_in_selectStatement1096);
               if(this.state.failed) {
                  return expr;
               }

               if(this.state.backtracking == 0) {
                  isJson = true;
               }
            }

            this.pushFollow(FOLLOW_selectClause_in_selectStatement1105);
            sclause = this.selectClause();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            this.match(this.input, 72, FOLLOW_K_FROM_in_selectStatement1113);
            if(this.state.failed) {
               return expr;
            }

            this.pushFollow(FOLLOW_columnFamilyName_in_selectStatement1117);
            cf = this.columnFamilyName();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            }

            int alt3 = 2;
            int LA3_0 = this.input.LA(1);
            if(LA3_0 == 166) {
               alt3 = 1;
            }

            switch(alt3) {
            case 1:
               this.match(this.input, 166, FOLLOW_K_WHERE_in_selectStatement1127);
               if(this.state.failed) {
                  return expr;
               }

               this.pushFollow(FOLLOW_whereClause_in_selectStatement1131);
               wclause = this.whereClause();
               --this.state._fsp;
               if(this.state.failed) {
                  return expr;
               }
            default:
               int alt5 = 2;
               int LA5_0 = this.input.LA(1);
               if(LA5_0 == 78) {
                  alt5 = 1;
               }

               byte alt4;
               int LA4_0;
               switch(alt5) {
               case 1:
                  this.match(this.input, 78, FOLLOW_K_GROUP_in_selectStatement1144);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 43, FOLLOW_K_BY_in_selectStatement1146);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_groupByClause_in_selectStatement1148);
                  this.groupByClause(groups);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  label484:
                  while(true) {
                     alt4 = 2;
                     LA4_0 = this.input.LA(1);
                     if(LA4_0 == 198) {
                        alt4 = 1;
                     }

                     switch(alt4) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_selectStatement1153);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_groupByClause_in_selectStatement1155);
                        this.groupByClause(groups);
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }
                        break;
                     default:
                        break label484;
                     }
                  }
               }

               alt4 = 2;
               LA4_0 = this.input.LA(1);
               if(LA4_0 == 116) {
                  alt4 = 1;
               }

               byte alt6;
               int LA6_0;
               switch(alt4) {
               case 1:
                  this.match(this.input, 116, FOLLOW_K_ORDER_in_selectStatement1172);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 43, FOLLOW_K_BY_in_selectStatement1174);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_orderByClause_in_selectStatement1176);
                  this.orderByClause(orderings);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  label472:
                  while(true) {
                     alt6 = 2;
                     LA6_0 = this.input.LA(1);
                     if(LA6_0 == 198) {
                        alt6 = 1;
                     }

                     switch(alt6) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_selectStatement1181);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.pushFollow(FOLLOW_orderByClause_in_selectStatement1183);
                        this.orderByClause(orderings);
                        --this.state._fsp;
                        if(this.state.failed) {
                           return expr;
                        }
                        break;
                     default:
                        break label472;
                     }
                  }
               }

               alt6 = 2;
               LA6_0 = this.input.LA(1);
               if(LA6_0 == 119) {
                  alt6 = 1;
               }

               switch(alt6) {
               case 1:
                  this.match(this.input, 119, FOLLOW_K_PER_in_selectStatement1200);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 117, FOLLOW_K_PARTITION_in_selectStatement1202);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.match(this.input, 96, FOLLOW_K_LIMIT_in_selectStatement1204);
                  if(this.state.failed) {
                     return expr;
                  }

                  this.pushFollow(FOLLOW_intValue_in_selectStatement1208);
                  rows = this.intValue();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }

                  if(this.state.backtracking == 0) {
                     perPartitionLimit = rows;
                  }
               default:
                  int alt9 = 2;
                  int LA9_0 = this.input.LA(1);
                  if(LA9_0 == 96) {
                     alt9 = 1;
                  }

                  switch(alt9) {
                  case 1:
                     this.match(this.input, 96, FOLLOW_K_LIMIT_in_selectStatement1223);
                     if(this.state.failed) {
                        return expr;
                     }

                     this.pushFollow(FOLLOW_intValue_in_selectStatement1227);
                     rows = this.intValue();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     }

                     if(this.state.backtracking == 0) {
                        limit = rows;
                     }
                  default:
                     int alt10 = 2;
                     int LA10_0 = this.input.LA(1);
                     if(LA10_0 == 30) {
                        alt10 = 1;
                     }

                     switch(alt10) {
                     case 1:
                        this.match(this.input, 30, FOLLOW_K_ALLOW_in_selectStatement1242);
                        if(this.state.failed) {
                           return expr;
                        }

                        this.match(this.input, 68, FOLLOW_K_FILTERING_in_selectStatement1244);
                        if(this.state.failed) {
                           return expr;
                        }

                        if(this.state.backtracking == 0) {
                           allowFiltering = true;
                        }
                     default:
                        if(this.state.backtracking == 0) {
                           SelectStatement.Parameters params = new SelectStatement.Parameters(orderings, groups, sclause != null?((Cql_Parser.selectClause_return)sclause).isDistinct:false, allowFiltering, isJson);
                           WhereClause where = wclause == null?WhereClause.empty():wclause.build();
                           expr = new SelectStatement.RawStatement(cf, params, sclause != null?((Cql_Parser.selectClause_return)sclause).selectors:null, where, limit, perPartitionLimit);
                        }
                     }
                  }
               }
            }
         } catch (RecognitionException var30) {
            this.reportError(var30);
            this.recover(this.input, var30);
         }

         return expr;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionAddition() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw l = null;
      Selectable.Raw r = null;

      try {
         this.pushFollow(FOLLOW_selectionMultiplication_in_selectionAddition1457);
         l = this.selectionMultiplication();
         --this.state._fsp;
         if(this.state.failed) {
            return (Selectable.Raw)s;
         } else {
            if(this.state.backtracking == 0) {
               s = l;
            }

            while(true) {
               int alt15 = 3;
               int LA15_0 = this.input.LA(1);
               if(LA15_0 == 196) {
                  alt15 = 1;
               } else if(LA15_0 == 199) {
                  alt15 = 2;
               }

               switch(alt15) {
               case 1:
                  this.match(this.input, 196, FOLLOW_196_in_selectionAddition1473);
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  this.pushFollow(FOLLOW_selectionMultiplication_in_selectionAddition1477);
                  r = this.selectionMultiplication();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  if(this.state.backtracking == 0) {
                     s = Selectable.WithFunction.Raw.newOperation('+', (Selectable.Raw)s, r);
                  }
                  break;
               case 2:
                  this.match(this.input, 199, FOLLOW_199_in_selectionAddition1491);
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  this.pushFollow(FOLLOW_selectionMultiplication_in_selectionAddition1495);
                  r = this.selectionMultiplication();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  if(this.state.backtracking == 0) {
                     s = Selectable.WithFunction.Raw.newOperation('-', (Selectable.Raw)s, r);
                  }
                  break;
               default:
                  return (Selectable.Raw)s;
               }
            }
         }
      } catch (RecognitionException var10) {
         this.reportError(var10);
         this.recover(this.input, var10);
         return (Selectable.Raw)s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionFunction() throws RecognitionException {
      Selectable.Raw s = null;
      ColumnMetadata.Raw c = null;
      Selectable.Raw sn = null;
      CQL3Type t = null;
      FunctionName f = null;
      List args = null;

      try {
         try {
            int alt31 = true;
            int alt31 = this.dfa31.predict(this.input);
            switch(alt31) {
            case 1:
               this.match(this.input, 50, FOLLOW_K_COUNT_in_selectionFunction2456);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 194, FOLLOW_194_in_selectionFunction2458);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 211, FOLLOW_211_in_selectionFunction2460);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 195, FOLLOW_195_in_selectionFunction2462);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = Selectable.WithFunction.Raw.newCountRowsFunction();
               }
               break;
            case 2:
               this.match(this.input, 168, FOLLOW_K_WRITETIME_in_selectionFunction2493);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 194, FOLLOW_194_in_selectionFunction2495);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.pushFollow(FOLLOW_cident_in_selectionFunction2499);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 195, FOLLOW_195_in_selectionFunction2501);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = new Selectable.WritetimeOrTTL.Raw(c, true);
               }
               break;
            case 3:
               this.match(this.input, 150, FOLLOW_K_TTL_in_selectionFunction2524);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 194, FOLLOW_194_in_selectionFunction2532);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.pushFollow(FOLLOW_cident_in_selectionFunction2536);
               c = this.cident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 195, FOLLOW_195_in_selectionFunction2538);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = new Selectable.WritetimeOrTTL.Raw(c, false);
               }
               break;
            case 4:
               this.match(this.input, 45, FOLLOW_K_CAST_in_selectionFunction2561);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 194, FOLLOW_194_in_selectionFunction2568);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.pushFollow(FOLLOW_unaliasedSelector_in_selectionFunction2572);
               sn = this.unaliasedSelector();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 34, FOLLOW_K_AS_in_selectionFunction2574);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.pushFollow(FOLLOW_native_type_in_selectionFunction2578);
               t = this.native_type();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 195, FOLLOW_195_in_selectionFunction2580);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = new Selectable.WithCast.Raw(sn, t);
               }
               break;
            case 5:
               this.pushFollow(FOLLOW_functionName_in_selectionFunction2592);
               f = this.functionName();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.pushFollow(FOLLOW_selectionFunctionArgs_in_selectionFunction2596);
               args = this.selectionFunctionArgs();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = new Selectable.WithFunction.Raw(f, args);
               }
            }
         } catch (RecognitionException var12) {
            this.reportError(var12);
            this.recover(this.input, var12);
         }

         return (Selectable.Raw)s;
      } finally {
         ;
      }
   }

   public final List<Selectable.Raw> selectionFunctionArgs() throws RecognitionException {
      List<Selectable.Raw> a = null;
      Selectable.Raw s1 = null;
      Selectable.Raw sn = null;
      a = new ArrayList();

      try {
         try {
            this.match(this.input, 194, FOLLOW_194_in_selectionFunctionArgs2766);
            if(this.state.failed) {
               return a;
            }

            int alt34 = 2;
            int LA34_0 = this.input.LA(1);
            if(LA34_0 == 6 || LA34_0 == 11 || LA34_0 == 14 || LA34_0 == 17 || LA34_0 == 21 || LA34_0 >= 23 && LA34_0 <= 24 || LA34_0 >= 28 && LA34_0 <= 29 || LA34_0 == 34 || LA34_0 == 36 || LA34_0 >= 40 && LA34_0 <= 42 || LA34_0 >= 44 && LA34_0 <= 46 || LA34_0 >= 48 && LA34_0 <= 51 || LA34_0 >= 53 && LA34_0 <= 55 || LA34_0 >= 60 && LA34_0 <= 62 || LA34_0 == 64 || LA34_0 >= 67 && LA34_0 <= 70 || LA34_0 == 73 || LA34_0 >= 75 && LA34_0 <= 76 || LA34_0 == 78 || LA34_0 >= 82 && LA34_0 <= 84 || LA34_0 == 86 || LA34_0 >= 89 && LA34_0 <= 91 || LA34_0 >= 93 && LA34_0 <= 95 || LA34_0 >= 97 && LA34_0 <= 99 || LA34_0 >= 104 && LA34_0 <= 107 || LA34_0 == 109 || LA34_0 == 111 || LA34_0 == 114 || LA34_0 >= 117 && LA34_0 <= 123 || LA34_0 == 127 || LA34_0 == 129 || LA34_0 >= 131 && LA34_0 <= 132 || LA34_0 >= 135 && LA34_0 <= 145 || LA34_0 >= 147 && LA34_0 <= 148 || LA34_0 >= 150 && LA34_0 <= 152 || LA34_0 >= 158 && LA34_0 <= 159 || LA34_0 >= 161 && LA34_0 <= 164 || LA34_0 == 168 || LA34_0 >= 177 && LA34_0 <= 178 || LA34_0 == 182 || LA34_0 == 185 || LA34_0 == 194 || LA34_0 == 199 || LA34_0 == 203 || LA34_0 == 210 || LA34_0 == 214) {
               alt34 = 1;
            }

            switch(alt34) {
            case 1:
               this.pushFollow(FOLLOW_unaliasedSelector_in_selectionFunctionArgs2771);
               s1 = this.unaliasedSelector();
               --this.state._fsp;
               if(this.state.failed) {
                  return a;
               }

               if(this.state.backtracking == 0) {
                  a.add(s1);
               }

               label376:
               while(true) {
                  int alt33 = 2;
                  int LA33_0 = this.input.LA(1);
                  if(LA33_0 == 198) {
                     alt33 = 1;
                  }

                  switch(alt33) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_selectionFunctionArgs2787);
                     if(this.state.failed) {
                        return a;
                     }

                     this.pushFollow(FOLLOW_unaliasedSelector_in_selectionFunctionArgs2791);
                     sn = this.unaliasedSelector();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return a;
                     }

                     if(this.state.backtracking == 0) {
                        a.add(sn);
                     }
                     break;
                  default:
                     break label376;
                  }
               }
            }

            this.match(this.input, 195, FOLLOW_195_in_selectionFunctionArgs2806);
            if(this.state.failed) {
               return a;
            }
         } catch (RecognitionException var12) {
            this.reportError(var12);
            this.recover(this.input, var12);
         }

         return a;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionGroup() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw f = null;
      Selectable.Raw g = null;

      try {
         try {
            int alt17 = true;
            int alt17 = this.dfa17.predict(this.input);
            switch(alt17) {
            case 1:
               this.pushFollow(FOLLOW_selectionGroupWithField_in_selectionGroup1631);
               f = this.selectionGroupWithField();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = f;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_selectionGroupWithoutField_in_selectionGroup1643);
               g = this.selectionGroupWithoutField();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = g;
               }
               break;
            case 3:
               this.match(this.input, 199, FOLLOW_199_in_selectionGroup1653);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.pushFollow(FOLLOW_selectionGroup_in_selectionGroup1657);
               g = this.selectionGroup();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = Selectable.WithFunction.Raw.newNegation(g);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return (Selectable.Raw)s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionGroupWithField() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw g = null;
      Selectable.Raw m = null;

      try {
         try {
            this.pushFollow(FOLLOW_selectionGroupWithoutField_in_selectionGroupWithField1682);
            g = this.selectionGroupWithoutField();
            --this.state._fsp;
            if(this.state.failed) {
               return s;
            }

            this.pushFollow(FOLLOW_selectorModifier_in_selectionGroupWithField1686);
            m = this.selectorModifier(g);
            --this.state._fsp;
            if(this.state.failed) {
               return s;
            }

            if(this.state.backtracking == 0) {
               s = m;
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

         return s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionGroupWithoutField() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw sn = null;
      Selectable.Raw h = null;
      Selectable.Raw t = null;
      Selectable.Raw l = null;
      Selectable.Raw m = null;
      Selectable.Raw tmp = null;

      try {
         try {
            int alt22 = true;
            int alt22 = this.dfa22.predict(this.input);
            switch(alt22) {
            case 1:
               this.pushFollow(FOLLOW_simpleUnaliasedSelector_in_selectionGroupWithoutField1899);
               sn = this.simpleUnaliasedSelector();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  tmp = sn;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_selectionTypeHint_in_selectionGroupWithoutField1917);
               h = this.selectionTypeHint();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  tmp = h;
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_selectionTupleOrNestedSelector_in_selectionGroupWithoutField1929);
               t = this.selectionTupleOrNestedSelector();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  tmp = t;
               }
               break;
            case 4:
               this.pushFollow(FOLLOW_selectionList_in_selectionGroupWithoutField1941);
               l = this.selectionList();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  tmp = l;
               }
               break;
            case 5:
               this.pushFollow(FOLLOW_selectionMapOrSet_in_selectionGroupWithoutField1953);
               m = this.selectionMapOrSet();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  tmp = m;
               }
            }

            if(this.state.backtracking == 0) {
               s = tmp;
            }
         } catch (RecognitionException var13) {
            this.reportError(var13);
            this.recover(this.input, var13);
         }

         return s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionList() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw t1 = null;
      Selectable.Raw tn = null;
      ArrayList l = new ArrayList();

      try {
         try {
            this.match(this.input, 210, FOLLOW_210_in_selectionList2032);
            if(this.state.failed) {
               return s;
            }

            int alt24 = 2;
            int LA24_0 = this.input.LA(1);
            if(LA24_0 == 6 || LA24_0 == 11 || LA24_0 == 14 || LA24_0 == 17 || LA24_0 == 21 || LA24_0 >= 23 && LA24_0 <= 24 || LA24_0 >= 28 && LA24_0 <= 29 || LA24_0 == 34 || LA24_0 == 36 || LA24_0 >= 40 && LA24_0 <= 42 || LA24_0 >= 44 && LA24_0 <= 46 || LA24_0 >= 48 && LA24_0 <= 51 || LA24_0 >= 53 && LA24_0 <= 55 || LA24_0 >= 60 && LA24_0 <= 62 || LA24_0 == 64 || LA24_0 >= 67 && LA24_0 <= 70 || LA24_0 == 73 || LA24_0 >= 75 && LA24_0 <= 76 || LA24_0 == 78 || LA24_0 >= 82 && LA24_0 <= 84 || LA24_0 == 86 || LA24_0 >= 89 && LA24_0 <= 91 || LA24_0 >= 93 && LA24_0 <= 95 || LA24_0 >= 97 && LA24_0 <= 99 || LA24_0 >= 104 && LA24_0 <= 107 || LA24_0 == 109 || LA24_0 == 111 || LA24_0 == 114 || LA24_0 >= 117 && LA24_0 <= 123 || LA24_0 == 127 || LA24_0 == 129 || LA24_0 >= 131 && LA24_0 <= 132 || LA24_0 >= 135 && LA24_0 <= 145 || LA24_0 >= 147 && LA24_0 <= 148 || LA24_0 >= 150 && LA24_0 <= 152 || LA24_0 >= 158 && LA24_0 <= 159 || LA24_0 >= 161 && LA24_0 <= 164 || LA24_0 == 168 || LA24_0 >= 177 && LA24_0 <= 178 || LA24_0 == 182 || LA24_0 == 185 || LA24_0 == 194 || LA24_0 == 199 || LA24_0 == 203 || LA24_0 == 210 || LA24_0 == 214) {
               alt24 = 1;
            }

            switch(alt24) {
            case 1:
               this.pushFollow(FOLLOW_unaliasedSelector_in_selectionList2038);
               t1 = this.unaliasedSelector();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  l.add(t1);
               }

               label386:
               while(true) {
                  int alt23 = 2;
                  int LA23_0 = this.input.LA(1);
                  if(LA23_0 == 198) {
                     alt23 = 1;
                  }

                  switch(alt23) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_selectionList2044);
                     if(this.state.failed) {
                        return s;
                     }

                     this.pushFollow(FOLLOW_unaliasedSelector_in_selectionList2048);
                     tn = this.unaliasedSelector();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return s;
                     }

                     if(this.state.backtracking == 0) {
                        l.add(tn);
                     }
                     break;
                  default:
                     break label386;
                  }
               }
            }

            this.match(this.input, 212, FOLLOW_212_in_selectionList2058);
            if(this.state.failed) {
               return s;
            }

            if(this.state.backtracking == 0) {
               s = new Selectable.WithList.Raw(l);
            }
         } catch (RecognitionException var13) {
            this.reportError(var13);
            this.recover(this.input, var13);
         }

         return s;
      } finally {
         ;
      }
   }

   public final Term.Raw selectionLiteral() throws RecognitionException {
      Term.Raw value = null;
      Constants.Literal c = null;
      ColumnIdentifier id = null;

      try {
         try {
            int alt32 = true;
            byte alt32;
            switch(this.input.LA(1)) {
            case 6:
            case 11:
            case 17:
            case 21:
            case 24:
            case 105:
            case 106:
            case 122:
            case 123:
            case 182:
            case 185:
               alt32 = 1;
               break;
            case 111:
               alt32 = 2;
               break;
            case 177:
               alt32 = 4;
               break;
            case 203:
               alt32 = 3;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return (Term.Raw)value;
               }

               NoViableAltException nvae = new NoViableAltException("", 32, 0, this.input);
               throw nvae;
            }

            switch(alt32) {
            case 1:
               this.pushFollow(FOLLOW_constant_in_selectionLiteral2621);
               c = this.constant();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = c;
               }
               break;
            case 2:
               this.match(this.input, 111, FOLLOW_K_NULL_in_selectionLiteral2651);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = Constants.NULL_LITERAL;
               }
               break;
            case 3:
               this.match(this.input, 203, FOLLOW_203_in_selectionLiteral2685);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               this.pushFollow(FOLLOW_noncol_ident_in_selectionLiteral2689);
               id = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = this.newBindVariables(id);
               }
               break;
            case 4:
               this.match(this.input, 177, FOLLOW_QMARK_in_selectionLiteral2710);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = this.newBindVariables((ColumnIdentifier)null);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return (Term.Raw)value;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionMap(Selectable.Raw k1) throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw v1 = null;
      Selectable.Raw kn = null;
      Selectable.Raw vn = null;
      ArrayList m = new ArrayList();

      try {
         this.match(this.input, 203, FOLLOW_203_in_selectionMap2159);
         if(this.state.failed) {
            return s;
         } else {
            this.pushFollow(FOLLOW_unaliasedSelector_in_selectionMap2163);
            v1 = this.unaliasedSelector();
            --this.state._fsp;
            if(this.state.failed) {
               return s;
            } else {
               if(this.state.backtracking == 0) {
                  m.add(Pair.create(k1, v1));
               }

               while(true) {
                  int alt27 = 2;
                  int LA27_0 = this.input.LA(1);
                  if(LA27_0 == 198) {
                     alt27 = 1;
                  }

                  switch(alt27) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_selectionMap2171);
                     if(this.state.failed) {
                        return s;
                     }

                     this.pushFollow(FOLLOW_unaliasedSelector_in_selectionMap2175);
                     kn = this.unaliasedSelector();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return s;
                     }

                     this.match(this.input, 203, FOLLOW_203_in_selectionMap2177);
                     if(this.state.failed) {
                        return s;
                     }

                     this.pushFollow(FOLLOW_unaliasedSelector_in_selectionMap2181);
                     vn = this.unaliasedSelector();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return s;
                     }

                     if(this.state.backtracking == 0) {
                        m.add(Pair.create(kn, vn));
                     }
                     break;
                  default:
                     if(this.state.backtracking == 0) {
                        s = new Selectable.WithMapOrUdt.Raw(m);
                     }

                     return s;
                  }
               }
            }
         }
      } catch (RecognitionException var13) {
         this.reportError(var13);
         this.recover(this.input, var13);
         return s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionMapOrSet() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw t1 = null;
      Selectable.Raw m = null;
      Selectable.Raw st = null;

      try {
         try {
            int alt26 = true;
            int LA26_0 = this.input.LA(1);
            if(LA26_0 != 214) {
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return (Selectable.Raw)s;
               }

               NoViableAltException nvae = new NoViableAltException("", 26, 0, this.input);
               throw nvae;
            }

            int LA26_1 = this.input.LA(2);
            int LA25_0;
            NoViableAltException nvae;
            byte alt26;
            if(LA26_1 == 215) {
               alt26 = 2;
            } else {
               if(LA26_1 != 6 && LA26_1 != 11 && LA26_1 != 14 && LA26_1 != 17 && LA26_1 != 21 && (LA26_1 < 23 || LA26_1 > 24) && (LA26_1 < 28 || LA26_1 > 29) && LA26_1 != 34 && LA26_1 != 36 && (LA26_1 < 40 || LA26_1 > 42) && (LA26_1 < 44 || LA26_1 > 46) && (LA26_1 < 48 || LA26_1 > 51) && (LA26_1 < 53 || LA26_1 > 55) && (LA26_1 < 60 || LA26_1 > 62) && LA26_1 != 64 && (LA26_1 < 67 || LA26_1 > 70) && LA26_1 != 73 && (LA26_1 < 75 || LA26_1 > 76) && LA26_1 != 78 && (LA26_1 < 82 || LA26_1 > 84) && LA26_1 != 86 && (LA26_1 < 89 || LA26_1 > 91) && (LA26_1 < 93 || LA26_1 > 95) && (LA26_1 < 97 || LA26_1 > 99) && (LA26_1 < 104 || LA26_1 > 107) && LA26_1 != 109 && LA26_1 != 111 && LA26_1 != 114 && (LA26_1 < 117 || LA26_1 > 123) && LA26_1 != 127 && LA26_1 != 129 && (LA26_1 < 131 || LA26_1 > 132) && (LA26_1 < 135 || LA26_1 > 145) && (LA26_1 < 147 || LA26_1 > 148) && (LA26_1 < 150 || LA26_1 > 152) && (LA26_1 < 158 || LA26_1 > 159) && (LA26_1 < 161 || LA26_1 > 164) && LA26_1 != 168 && (LA26_1 < 177 || LA26_1 > 178) && LA26_1 != 182 && LA26_1 != 185 && LA26_1 != 194 && LA26_1 != 199 && LA26_1 != 203 && LA26_1 != 210 && LA26_1 != 214) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return (Selectable.Raw)s;
                  }

                  LA25_0 = this.input.mark();

                  try {
                     this.input.consume();
                     nvae = new NoViableAltException("", 26, 1, this.input);
                     throw nvae;
                  } finally {
                     this.input.rewind(LA25_0);
                  }
               }

               alt26 = 1;
            }

            switch(alt26) {
            case 1:
               this.match(this.input, 214, FOLLOW_214_in_selectionMapOrSet2079);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.pushFollow(FOLLOW_unaliasedSelector_in_selectionMapOrSet2083);
               t1 = this.unaliasedSelector();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               int alt25 = true;
               LA25_0 = this.input.LA(1);
               byte alt25;
               if(LA25_0 == 203) {
                  alt25 = 1;
               } else {
                  if(LA25_0 != 198 && LA25_0 != 215) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return (Selectable.Raw)s;
                     }

                     nvae = new NoViableAltException("", 25, 0, this.input);
                     throw nvae;
                  }

                  alt25 = 2;
               }

               switch(alt25) {
               case 1:
                  this.pushFollow(FOLLOW_selectionMap_in_selectionMapOrSet2089);
                  m = this.selectionMap(t1);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  if(this.state.backtracking == 0) {
                     s = m;
                  }
                  break;
               case 2:
                  this.pushFollow(FOLLOW_selectionSet_in_selectionMapOrSet2098);
                  st = this.selectionSet(t1);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  if(this.state.backtracking == 0) {
                     s = st;
                  }
               }

               this.match(this.input, 215, FOLLOW_215_in_selectionMapOrSet2104);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }
               break;
            case 2:
               this.match(this.input, 214, FOLLOW_214_in_selectionMapOrSet2112);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               this.match(this.input, 215, FOLLOW_215_in_selectionMapOrSet2114);
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = new Selectable.WithSet.Raw(Collections.emptyList());
               }
            }
         } catch (RecognitionException var19) {
            this.reportError(var19);
            this.recover(this.input, var19);
         }

         return (Selectable.Raw)s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionMultiplication() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw l = null;
      Selectable.Raw r = null;

      try {
         this.pushFollow(FOLLOW_selectionGroup_in_selectionMultiplication1533);
         l = this.selectionGroup();
         --this.state._fsp;
         if(this.state.failed) {
            return (Selectable.Raw)s;
         } else {
            if(this.state.backtracking == 0) {
               s = l;
            }

            while(true) {
               int alt16 = 4;
               switch(this.input.LA(1)) {
               case 193:
                  alt16 = 3;
                  break;
               case 202:
                  alt16 = 2;
                  break;
               case 211:
                  alt16 = 1;
               }

               switch(alt16) {
               case 1:
                  this.match(this.input, 211, FOLLOW_211_in_selectionMultiplication1549);
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  this.pushFollow(FOLLOW_selectionGroup_in_selectionMultiplication1553);
                  r = this.selectionGroup();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  if(this.state.backtracking == 0) {
                     s = Selectable.WithFunction.Raw.newOperation('*', (Selectable.Raw)s, r);
                  }
                  break;
               case 2:
                  this.match(this.input, 202, FOLLOW_202_in_selectionMultiplication1567);
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  this.pushFollow(FOLLOW_selectionGroup_in_selectionMultiplication1571);
                  r = this.selectionGroup();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  if(this.state.backtracking == 0) {
                     s = Selectable.WithFunction.Raw.newOperation('/', (Selectable.Raw)s, r);
                  }
                  break;
               case 3:
                  this.match(this.input, 193, FOLLOW_193_in_selectionMultiplication1585);
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  this.pushFollow(FOLLOW_selectionGroup_in_selectionMultiplication1589);
                  r = this.selectionGroup();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Selectable.Raw)s;
                  }

                  if(this.state.backtracking == 0) {
                     s = Selectable.WithFunction.Raw.newOperation('%', (Selectable.Raw)s, r);
                  }
                  break;
               default:
                  return (Selectable.Raw)s;
               }
            }
         }
      } catch (RecognitionException var9) {
         this.reportError(var9);
         this.recover(this.input, var9);
         return (Selectable.Raw)s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionSet(Selectable.Raw t1) throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw tn = null;
      List<Selectable.Raw> l = new ArrayList();
      l.add(t1);

      try {
         while(true) {
            int alt28 = 2;
            int LA28_0 = this.input.LA(1);
            if(LA28_0 == 198) {
               alt28 = 1;
            }

            switch(alt28) {
            case 1:
               this.match(this.input, 198, FOLLOW_198_in_selectionSet2233);
               if(this.state.failed) {
                  return s;
               }

               this.pushFollow(FOLLOW_unaliasedSelector_in_selectionSet2237);
               tn = this.unaliasedSelector();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  l.add(tn);
               }
               break;
            default:
               if(this.state.backtracking == 0) {
                  s = new Selectable.WithSet.Raw(l);
               }

               return s;
            }
         }
      } catch (RecognitionException var11) {
         this.reportError(var11);
         this.recover(this.input, var11);
         return s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionTupleOrNestedSelector() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw t1 = null;
      Selectable.Raw tn = null;
      ArrayList l = new ArrayList();

      try {
         this.match(this.input, 194, FOLLOW_194_in_selectionTupleOrNestedSelector2283);
         if(this.state.failed) {
            return s;
         } else {
            this.pushFollow(FOLLOW_unaliasedSelector_in_selectionTupleOrNestedSelector2287);
            t1 = this.unaliasedSelector();
            --this.state._fsp;
            if(this.state.failed) {
               return s;
            } else {
               if(this.state.backtracking == 0) {
                  l.add(t1);
               }

               while(true) {
                  int alt29 = 2;
                  int LA29_0 = this.input.LA(1);
                  if(LA29_0 == 198) {
                     alt29 = 1;
                  }

                  switch(alt29) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_selectionTupleOrNestedSelector2292);
                     if(this.state.failed) {
                        return s;
                     }

                     this.pushFollow(FOLLOW_unaliasedSelector_in_selectionTupleOrNestedSelector2296);
                     tn = this.unaliasedSelector();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return s;
                     }

                     if(this.state.backtracking == 0) {
                        l.add(tn);
                     }
                     break;
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_selectionTupleOrNestedSelector2303);
                     if(this.state.failed) {
                        return s;
                     }

                     if(this.state.backtracking == 0) {
                        s = new Selectable.BetweenParenthesesOrWithTuple.Raw(l);
                     }

                     return s;
                  }
               }
            }
         }
      } catch (RecognitionException var11) {
         this.reportError(var11);
         this.recover(this.input, var11);
         return s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectionTypeHint() throws RecognitionException {
      Selectable.Raw s = null;
      CQL3Type.Raw ct = null;
      Selectable.Raw a = null;

      try {
         try {
            this.match(this.input, 194, FOLLOW_194_in_selectionTypeHint1981);
            if(this.state.failed) {
               return s;
            }

            this.pushFollow(FOLLOW_comparatorType_in_selectionTypeHint1985);
            ct = this.comparatorType();
            --this.state._fsp;
            if(this.state.failed) {
               return s;
            }

            this.match(this.input, 195, FOLLOW_195_in_selectionTypeHint1987);
            if(this.state.failed) {
               return s;
            }

            this.pushFollow(FOLLOW_selectionGroupWithoutField_in_selectionTypeHint1991);
            a = this.selectionGroupWithoutField();
            --this.state._fsp;
            if(this.state.failed) {
               return s;
            }

            if(this.state.backtracking == 0) {
               s = new Selectable.WithTypeHint.Raw(ct, a);
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

         return s;
      } finally {
         ;
      }
   }

   public final RawSelector selector() throws RecognitionException {
      RawSelector s = null;
      Selectable.Raw us = null;
      ColumnIdentifier c = null;
      ColumnIdentifier alias = null;

      try {
         try {
            this.pushFollow(FOLLOW_unaliasedSelector_in_selector1394);
            us = this.unaliasedSelector();
            --this.state._fsp;
            if(this.state.failed) {
               return s;
            }

            int alt14 = 2;
            int LA14_0 = this.input.LA(1);
            if(LA14_0 == 34) {
               alt14 = 1;
            }

            switch(alt14) {
            case 1:
               this.match(this.input, 34, FOLLOW_K_AS_in_selector1397);
               if(this.state.failed) {
                  return s;
               }

               this.pushFollow(FOLLOW_noncol_ident_in_selector1401);
               c = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  alias = c;
               }
            default:
               if(this.state.backtracking == 0) {
                  s = new RawSelector(us, alias);
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return s;
      } finally {
         ;
      }
   }

   public final Selectable.Raw selectorModifier(Selectable.Raw receiver) throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw f = null;
      Selectable.Raw m = null;
      Selectable.Raw ss = null;

      try {
         try {
            int alt18 = true;
            byte alt18;
            switch(this.input.LA(1)) {
            case -1:
            case 30:
            case 34:
            case 72:
            case 96:
            case 116:
            case 119:
            case 193:
            case 195:
            case 196:
            case 198:
            case 199:
            case 202:
            case 203:
            case 211:
            case 212:
            case 215:
               alt18 = 3;
               break;
            case 201:
               alt18 = 1;
               break;
            case 210:
               alt18 = 2;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return s;
               }

               NoViableAltException nvae = new NoViableAltException("", 18, 0, this.input);
               throw nvae;
            }

            switch(alt18) {
            case 1:
               this.pushFollow(FOLLOW_fieldSelectorModifier_in_selectorModifier1713);
               f = this.fieldSelectorModifier(receiver);
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               this.pushFollow(FOLLOW_selectorModifier_in_selectorModifier1718);
               m = this.selectorModifier(f);
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  s = m;
               }
               break;
            case 2:
               this.match(this.input, 210, FOLLOW_210_in_selectorModifier1729);
               if(this.state.failed) {
                  return s;
               }

               this.pushFollow(FOLLOW_collectionSubSelection_in_selectorModifier1733);
               ss = this.collectionSubSelection(receiver);
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               this.match(this.input, 212, FOLLOW_212_in_selectorModifier1736);
               if(this.state.failed) {
                  return s;
               }

               this.pushFollow(FOLLOW_selectorModifier_in_selectorModifier1740);
               m = this.selectorModifier(ss);
               --this.state._fsp;
               if(this.state.failed) {
                  return s;
               }

               if(this.state.backtracking == 0) {
                  s = m;
               }
               break;
            case 3:
               if(this.state.backtracking == 0) {
                  s = receiver;
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return s;
      } finally {
         ;
      }
   }

   public final List<RawSelector> selectors() throws RecognitionException {
      List<RawSelector> expr = null;
      RawSelector t1 = null;
      RawSelector tN = null;

      try {
         try {
            int alt13 = true;
            int LA13_0 = this.input.LA(1);
            byte alt13;
            if(LA13_0 != 6 && LA13_0 != 11 && LA13_0 != 14 && LA13_0 != 17 && LA13_0 != 21 && (LA13_0 < 23 || LA13_0 > 24) && (LA13_0 < 28 || LA13_0 > 29) && LA13_0 != 34 && LA13_0 != 36 && (LA13_0 < 40 || LA13_0 > 42) && (LA13_0 < 44 || LA13_0 > 46) && (LA13_0 < 48 || LA13_0 > 51) && (LA13_0 < 53 || LA13_0 > 55) && (LA13_0 < 60 || LA13_0 > 62) && LA13_0 != 64 && (LA13_0 < 67 || LA13_0 > 70) && LA13_0 != 73 && (LA13_0 < 75 || LA13_0 > 76) && LA13_0 != 78 && (LA13_0 < 82 || LA13_0 > 84) && LA13_0 != 86 && (LA13_0 < 89 || LA13_0 > 91) && (LA13_0 < 93 || LA13_0 > 95) && (LA13_0 < 97 || LA13_0 > 99) && (LA13_0 < 104 || LA13_0 > 107) && LA13_0 != 109 && LA13_0 != 111 && LA13_0 != 114 && (LA13_0 < 117 || LA13_0 > 123) && LA13_0 != 127 && LA13_0 != 129 && (LA13_0 < 131 || LA13_0 > 132) && (LA13_0 < 135 || LA13_0 > 145) && (LA13_0 < 147 || LA13_0 > 148) && (LA13_0 < 150 || LA13_0 > 152) && (LA13_0 < 158 || LA13_0 > 159) && (LA13_0 < 161 || LA13_0 > 164) && LA13_0 != 168 && (LA13_0 < 177 || LA13_0 > 178) && LA13_0 != 182 && LA13_0 != 185 && LA13_0 != 194 && LA13_0 != 199 && LA13_0 != 203 && LA13_0 != 210 && LA13_0 != 214) {
               if(LA13_0 != 211) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return (List)expr;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 13, 0, this.input);
                  throw nvae;
               }

               alt13 = 2;
            } else {
               alt13 = 1;
            }

            switch(alt13) {
            case 1:
               this.pushFollow(FOLLOW_selector_in_selectors1340);
               t1 = this.selector();
               --this.state._fsp;
               if(this.state.failed) {
                  return (List)expr;
               }

               if(this.state.backtracking == 0) {
                  expr = new ArrayList();
                  ((List)expr).add(t1);
               }

               while(true) {
                  int alt12 = 2;
                  int LA12_0 = this.input.LA(1);
                  if(LA12_0 == 198) {
                     alt12 = 1;
                  }

                  switch(alt12) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_selectors1345);
                     if(this.state.failed) {
                        return (List)expr;
                     }

                     this.pushFollow(FOLLOW_selector_in_selectors1349);
                     tN = this.selector();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return (List)expr;
                     }

                     if(this.state.backtracking == 0) {
                        ((List)expr).add(tN);
                     }
                     break;
                  default:
                     return (List)expr;
                  }
               }
            case 2:
               this.match(this.input, 211, FOLLOW_211_in_selectors1361);
               if(this.state.failed) {
                  return (List)expr;
               }

               if(this.state.backtracking == 0) {
                  expr = Collections.emptyList();
               }
            }
         } catch (RecognitionException var12) {
            this.reportError(var12);
            this.recover(this.input, var12);
         }

         return (List)expr;
      } finally {
         ;
      }
   }

   public final Term.Raw setLiteral(Term.Raw t) throws RecognitionException {
      Term.Raw value = null;
      Term.Raw tn = null;
      List<Term.Raw> s = new ArrayList();
      s.add(t);

      try {
         while(true) {
            int alt197 = 2;
            int LA197_0 = this.input.LA(1);
            if(LA197_0 == 198) {
               alt197 = 1;
            }

            switch(alt197) {
            case 1:
               this.match(this.input, 198, FOLLOW_198_in_setLiteral10730);
               if(this.state.failed) {
                  return value;
               }

               this.pushFollow(FOLLOW_term_in_setLiteral10734);
               tn = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return value;
               }

               if(this.state.backtracking == 0) {
                  s.add(tn);
               }
               break;
            default:
               if(this.state.backtracking == 0) {
                  value = new Sets.Literal(s);
               }

               return value;
            }
         }
      } catch (RecognitionException var11) {
         this.reportError(var11);
         this.recover(this.input, var11);
         return value;
      } finally {
         ;
      }
   }

   public final Term.Raw setOrMapLiteral(Term.Raw t) throws RecognitionException {
      Term.Raw value = null;
      Term.Raw m = null;
      Term.Raw s = null;

      try {
         try {
            int alt196 = true;
            int LA196_0 = this.input.LA(1);
            byte alt196;
            if(LA196_0 == 203) {
               alt196 = 1;
            } else {
               if(LA196_0 != 198 && LA196_0 != 215) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return value;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 196, 0, this.input);
                  throw nvae;
               }

               alt196 = 2;
            }

            switch(alt196) {
            case 1:
               this.pushFollow(FOLLOW_mapLiteral_in_setOrMapLiteral10672);
               m = this.mapLiteral(t);
               --this.state._fsp;
               if(this.state.failed) {
                  return value;
               }

               if(this.state.backtracking == 0) {
                  value = m;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_setLiteral_in_setOrMapLiteral10685);
               s = this.setLiteral(t);
               --this.state._fsp;
               if(this.state.failed) {
                  return value;
               }

               if(this.state.backtracking == 0) {
                  value = s;
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return value;
      } finally {
         ;
      }
   }

   public final void shorthandColumnOperation(List<Pair<ColumnMetadata.Raw, Operation.RawUpdate>> operations, ColumnMetadata.Raw key) throws RecognitionException {
      Token sig = null;
      Term.Raw t = null;

      try {
         try {
            sig = this.input.LT(1);
            if(this.input.LA(1) != 197 && this.input.LA(1) != 200) {
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return;
               }

               MismatchedSetException mse = new MismatchedSetException((BitSet)null, this.input);
               throw mse;
            }

            this.input.consume();
            this.state.errorRecovery = false;
            this.state.failed = false;
            this.pushFollow(FOLLOW_term_in_shorthandColumnOperation12199);
            t = this.term();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            if(this.state.backtracking == 0) {
               this.addRawUpdate(operations, key, (Operation.RawUpdate)((sig != null?sig.getText():null).equals("+=")?new Operation.Addition(t):new Operation.Substraction(t)));
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

      } finally {
         ;
      }
   }

   public final Selectable.Raw sident() throws RecognitionException {
      Selectable.Raw id = null;
      Token t = null;
      String k = null;

      try {
         try {
            int alt35 = true;
            byte alt35;
            switch(this.input.LA(1)) {
            case 14:
               alt35 = 4;
               break;
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return id;
               }

               NoViableAltException nvae = new NoViableAltException("", 35, 0, this.input);
               throw nvae;
            case 23:
               alt35 = 1;
               break;
            case 28:
            case 29:
            case 34:
            case 36:
            case 40:
            case 41:
            case 42:
            case 44:
            case 45:
            case 46:
            case 48:
            case 49:
            case 50:
            case 51:
            case 53:
            case 54:
            case 55:
            case 60:
            case 61:
            case 62:
            case 64:
            case 67:
            case 68:
            case 69:
            case 70:
            case 73:
            case 75:
            case 76:
            case 78:
            case 82:
            case 83:
            case 84:
            case 86:
            case 89:
            case 90:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 148:
            case 150:
            case 151:
            case 152:
            case 158:
            case 159:
            case 161:
            case 162:
            case 163:
            case 164:
            case 168:
               alt35 = 3;
               break;
            case 178:
               alt35 = 2;
            }

            switch(alt35) {
            case 1:
               t = (Token)this.match(this.input, 23, FOLLOW_IDENT_in_sident2829);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = Selectable.RawIdentifier.forUnquoted(t != null?t.getText():null);
               }
               break;
            case 2:
               t = (Token)this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_sident2854);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = Selectable.RawIdentifier.forQuoted(t != null?t.getText():null);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_unreserved_keyword_in_sident2873);
               k = this.unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = Selectable.RawIdentifier.forUnquoted(k);
               }
               break;
            case 4:
               this.match(this.input, 14, FOLLOW_EMPTY_QUOTED_NAME_in_sident2883);
               if(this.state.failed) {
                  return id;
               }

               if(this.state.backtracking == 0) {
                  id = Selectable.RawIdentifier.forQuoted("");
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return id;
      } finally {
         ;
      }
   }

   public final Term.Raw simpleTerm() throws RecognitionException {
      Term.Raw term = null;
      Term.Raw v = null;
      Term.Raw f = null;
      CQL3Type.Raw c = null;
      Term.Raw t = null;

      try {
         try {
            int alt213 = true;
            int alt213 = this.dfa213.predict(this.input);
            switch(alt213) {
            case 1:
               this.pushFollow(FOLLOW_value_in_simpleTerm11895);
               v = this.value();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)term;
               }

               if(this.state.backtracking == 0) {
                  term = v;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_function_in_simpleTerm11939);
               f = this.function();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)term;
               }

               if(this.state.backtracking == 0) {
                  term = f;
               }
               break;
            case 3:
               this.match(this.input, 194, FOLLOW_194_in_simpleTerm11978);
               if(this.state.failed) {
                  return (Term.Raw)term;
               }

               this.pushFollow(FOLLOW_comparatorType_in_simpleTerm11982);
               c = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)term;
               }

               this.match(this.input, 195, FOLLOW_195_in_simpleTerm11984);
               if(this.state.failed) {
                  return (Term.Raw)term;
               }

               this.pushFollow(FOLLOW_simpleTerm_in_simpleTerm11988);
               t = this.simpleTerm();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)term;
               }

               if(this.state.backtracking == 0) {
                  term = new TypeCast(c, t);
               }
            }
         } catch (RecognitionException var11) {
            this.reportError(var11);
            this.recover(this.input, var11);
         }

         return (Term.Raw)term;
      } finally {
         ;
      }
   }

   public final Selectable.Raw simpleUnaliasedSelector() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw c = null;
      Term.Raw l = null;
      Selectable.Raw f = null;

      try {
         try {
            int alt30 = true;
            int alt30 = this.dfa30.predict(this.input);
            switch(alt30) {
            case 1:
               this.pushFollow(FOLLOW_sident_in_simpleUnaliasedSelector2328);
               c = this.sident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = c;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_selectionLiteral_in_simpleUnaliasedSelector2374);
               l = this.selectionLiteral();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = new Selectable.WithTerm.Raw(l);
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_selectionFunction_in_simpleUnaliasedSelector2410);
               f = this.selectionFunction();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Selectable.Raw)s;
               }

               if(this.state.backtracking == 0) {
                  s = f;
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return (Selectable.Raw)s;
      } finally {
         ;
      }
   }

   public final List<Term.Raw> singleColumnInValues() throws RecognitionException {
      List<Term.Raw> terms = null;
      Term.Raw t1 = null;
      Term.Raw ti = null;
      terms = new ArrayList();

      try {
         try {
            this.match(this.input, 194, FOLLOW_194_in_singleColumnInValues13447);
            if(this.state.failed) {
               return terms;
            }

            int alt234 = 2;
            int LA234_0 = this.input.LA(1);
            if(LA234_0 == 6 || LA234_0 == 11 || LA234_0 == 17 || LA234_0 == 21 || LA234_0 >= 23 && LA234_0 <= 24 || LA234_0 >= 28 && LA234_0 <= 29 || LA234_0 == 34 || LA234_0 == 36 || LA234_0 >= 40 && LA234_0 <= 42 || LA234_0 >= 44 && LA234_0 <= 46 || LA234_0 >= 48 && LA234_0 <= 51 || LA234_0 >= 53 && LA234_0 <= 55 || LA234_0 >= 60 && LA234_0 <= 62 || LA234_0 == 64 || LA234_0 >= 67 && LA234_0 <= 70 || LA234_0 == 73 || LA234_0 >= 75 && LA234_0 <= 76 || LA234_0 == 78 || LA234_0 >= 82 && LA234_0 <= 84 || LA234_0 == 86 || LA234_0 >= 89 && LA234_0 <= 91 || LA234_0 >= 93 && LA234_0 <= 95 || LA234_0 >= 97 && LA234_0 <= 99 || LA234_0 >= 104 && LA234_0 <= 107 || LA234_0 == 109 || LA234_0 == 111 || LA234_0 == 114 || LA234_0 >= 117 && LA234_0 <= 123 || LA234_0 == 127 || LA234_0 == 129 || LA234_0 >= 131 && LA234_0 <= 132 || LA234_0 >= 135 && LA234_0 <= 145 || LA234_0 >= 147 && LA234_0 <= 148 || LA234_0 >= 150 && LA234_0 <= 152 || LA234_0 >= 158 && LA234_0 <= 159 || LA234_0 >= 161 && LA234_0 <= 164 || LA234_0 == 168 || LA234_0 >= 177 && LA234_0 <= 178 || LA234_0 == 182 || LA234_0 == 185 || LA234_0 == 194 || LA234_0 == 199 || LA234_0 == 203 || LA234_0 == 210 || LA234_0 == 214) {
               alt234 = 1;
            }

            switch(alt234) {
            case 1:
               this.pushFollow(FOLLOW_term_in_singleColumnInValues13455);
               t1 = this.term();
               --this.state._fsp;
               if(this.state.failed) {
                  return terms;
               }

               if(this.state.backtracking == 0) {
                  terms.add(t1);
               }

               label373:
               while(true) {
                  int alt233 = 2;
                  int LA233_0 = this.input.LA(1);
                  if(LA233_0 == 198) {
                     alt233 = 1;
                  }

                  switch(alt233) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_singleColumnInValues13460);
                     if(this.state.failed) {
                        return terms;
                     }

                     this.pushFollow(FOLLOW_term_in_singleColumnInValues13464);
                     ti = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return terms;
                     }

                     if(this.state.backtracking == 0) {
                        terms.add(ti);
                     }
                     break;
                  default:
                     break label373;
                  }
               }
            }

            this.match(this.input, 195, FOLLOW_195_in_singleColumnInValues13473);
            if(this.state.failed) {
               return terms;
            }
         } catch (RecognitionException var12) {
            this.reportError(var12);
            this.recover(this.input, var12);
         }

         return terms;
      } finally {
         ;
      }
   }

   public final boolean synpred1_Parser() {
      ++this.state.backtracking;
      int start = this.input.mark();

      try {
         this.synpred1_Parser_fragment();
      } catch (RecognitionException var3) {
         System.err.println("impossible: " + var3);
      }

      boolean success = !this.state.failed;
      this.input.rewind(start);
      --this.state.backtracking;
      this.state.failed = false;
      return success;
   }

   public final void synpred1_Parser_fragment() throws RecognitionException {
      this.match(this.input, 89, FOLLOW_K_JSON_in_synpred1_Parser1090);
      if(!this.state.failed) {
         this.pushFollow(FOLLOW_selectClause_in_synpred1_Parser1092);
         this.selectClause();
         --this.state._fsp;
         if(!this.state.failed) {
            ;
         }
      }
   }

   public final boolean synpred2_Parser() {
      ++this.state.backtracking;
      int start = this.input.mark();

      try {
         this.synpred2_Parser_fragment();
      } catch (RecognitionException var3) {
         System.err.println("impossible: " + var3);
      }

      boolean success = !this.state.failed;
      this.input.rewind(start);
      --this.state.backtracking;
      this.state.failed = false;
      return success;
   }

   public final void synpred2_Parser_fragment() throws RecognitionException {
      this.match(this.input, 61, FOLLOW_K_DISTINCT_in_synpred2_Parser1293);
      if(!this.state.failed) {
         this.pushFollow(FOLLOW_selectors_in_synpred2_Parser1295);
         this.selectors();
         --this.state._fsp;
         if(!this.state.failed) {
            ;
         }
      }
   }

   public final boolean synpred3_Parser() {
      ++this.state.backtracking;
      int start = this.input.mark();

      try {
         this.synpred3_Parser_fragment();
      } catch (RecognitionException var3) {
         System.err.println("impossible: " + var3);
      }

      boolean success = !this.state.failed;
      this.input.rewind(start);
      --this.state.backtracking;
      this.state.failed = false;
      return success;
   }

   public final void synpred3_Parser_fragment() throws RecognitionException {
      this.pushFollow(FOLLOW_selectionGroupWithField_in_synpred3_Parser1624);
      this.selectionGroupWithField();
      --this.state._fsp;
      if(!this.state.failed) {
         ;
      }
   }

   public final boolean synpred4_Parser() {
      ++this.state.backtracking;
      int start = this.input.mark();

      try {
         this.synpred4_Parser_fragment();
      } catch (RecognitionException var3) {
         System.err.println("impossible: " + var3);
      }

      boolean success = !this.state.failed;
      this.input.rewind(start);
      --this.state.backtracking;
      this.state.failed = false;
      return success;
   }

   public final void synpred4_Parser_fragment() throws RecognitionException {
      this.pushFollow(FOLLOW_selectionTypeHint_in_synpred4_Parser1911);
      this.selectionTypeHint();
      --this.state._fsp;
      if(!this.state.failed) {
         ;
      }
   }

   public final Term.Raw term() throws RecognitionException {
      Term.Raw term = null;
      Term.Raw t = null;

      try {
         try {
            this.pushFollow(FOLLOW_termAddition_in_term11614);
            t = this.termAddition();
            --this.state._fsp;
            if(this.state.failed) {
               return term;
            }

            if(this.state.backtracking == 0) {
               term = t;
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return term;
      } finally {
         ;
      }
   }

   public final Term.Raw termAddition() throws RecognitionException {
      Term.Raw term = null;
      Term.Raw l = null;
      Term.Raw r = null;

      try {
         this.pushFollow(FOLLOW_termMultiplication_in_termAddition11666);
         l = this.termMultiplication();
         --this.state._fsp;
         if(this.state.failed) {
            return (Term.Raw)term;
         } else {
            if(this.state.backtracking == 0) {
               term = l;
            }

            while(true) {
               while(true) {
                  int alt210 = true;
                  int alt210 = this.dfa210.predict(this.input);
                  switch(alt210) {
                  case 1:
                     this.match(this.input, 196, FOLLOW_196_in_termAddition11682);
                     if(this.state.failed) {
                        return (Term.Raw)term;
                     }

                     this.pushFollow(FOLLOW_termMultiplication_in_termAddition11686);
                     r = this.termMultiplication();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return (Term.Raw)term;
                     }

                     if(this.state.backtracking == 0) {
                        term = FunctionCall.Raw.newOperation('+', (Term.Raw)term, r);
                     }
                     break;
                  case 2:
                     this.match(this.input, 199, FOLLOW_199_in_termAddition11700);
                     if(this.state.failed) {
                        return (Term.Raw)term;
                     }

                     this.pushFollow(FOLLOW_termMultiplication_in_termAddition11704);
                     r = this.termMultiplication();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return (Term.Raw)term;
                     }

                     if(this.state.backtracking == 0) {
                        term = FunctionCall.Raw.newOperation('-', (Term.Raw)term, r);
                     }
                     break;
                  default:
                     return (Term.Raw)term;
                  }
               }
            }
         }
      } catch (RecognitionException var9) {
         this.reportError(var9);
         this.recover(this.input, var9);
         return (Term.Raw)term;
      } finally {
         ;
      }
   }

   public final Term.Raw termGroup() throws RecognitionException {
      Term.Raw term = null;
      Term.Raw t = null;

      try {
         try {
            int alt212 = true;
            int LA212_0 = this.input.LA(1);
            byte alt212;
            if(LA212_0 != 6 && LA212_0 != 11 && LA212_0 != 17 && LA212_0 != 21 && (LA212_0 < 23 || LA212_0 > 24) && (LA212_0 < 28 || LA212_0 > 29) && LA212_0 != 34 && LA212_0 != 36 && (LA212_0 < 40 || LA212_0 > 42) && (LA212_0 < 44 || LA212_0 > 46) && (LA212_0 < 48 || LA212_0 > 51) && (LA212_0 < 53 || LA212_0 > 55) && (LA212_0 < 60 || LA212_0 > 62) && LA212_0 != 64 && (LA212_0 < 67 || LA212_0 > 70) && LA212_0 != 73 && (LA212_0 < 75 || LA212_0 > 76) && LA212_0 != 78 && (LA212_0 < 82 || LA212_0 > 84) && LA212_0 != 86 && (LA212_0 < 89 || LA212_0 > 91) && (LA212_0 < 93 || LA212_0 > 95) && (LA212_0 < 97 || LA212_0 > 99) && (LA212_0 < 104 || LA212_0 > 107) && LA212_0 != 109 && LA212_0 != 111 && LA212_0 != 114 && (LA212_0 < 117 || LA212_0 > 123) && LA212_0 != 127 && LA212_0 != 129 && (LA212_0 < 131 || LA212_0 > 132) && (LA212_0 < 135 || LA212_0 > 145) && (LA212_0 < 147 || LA212_0 > 148) && (LA212_0 < 150 || LA212_0 > 152) && (LA212_0 < 158 || LA212_0 > 159) && (LA212_0 < 161 || LA212_0 > 164) && LA212_0 != 168 && (LA212_0 < 177 || LA212_0 > 178) && LA212_0 != 182 && LA212_0 != 185 && LA212_0 != 194 && LA212_0 != 203 && LA212_0 != 210 && LA212_0 != 214) {
               if(LA212_0 != 199) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return (Term.Raw)term;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 212, 0, this.input);
                  throw nvae;
               }

               alt212 = 2;
            } else {
               alt212 = 1;
            }

            switch(alt212) {
            case 1:
               this.pushFollow(FOLLOW_simpleTerm_in_termGroup11834);
               t = this.simpleTerm();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)term;
               }

               if(this.state.backtracking == 0) {
                  term = t;
               }
               break;
            case 2:
               this.match(this.input, 199, FOLLOW_199_in_termGroup11857);
               if(this.state.failed) {
                  return (Term.Raw)term;
               }

               this.pushFollow(FOLLOW_simpleTerm_in_termGroup11862);
               t = this.simpleTerm();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)term;
               }

               if(this.state.backtracking == 0) {
                  term = FunctionCall.Raw.newNegation(t);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return (Term.Raw)term;
      } finally {
         ;
      }
   }

   public final Term.Raw termMultiplication() throws RecognitionException {
      Term.Raw term = null;
      Term.Raw l = null;
      Term.Raw r = null;

      try {
         this.pushFollow(FOLLOW_termGroup_in_termMultiplication11742);
         l = this.termGroup();
         --this.state._fsp;
         if(this.state.failed) {
            return (Term.Raw)term;
         } else {
            if(this.state.backtracking == 0) {
               term = l;
            }

            while(true) {
               int alt211 = 4;
               switch(this.input.LA(1)) {
               case 193:
                  alt211 = 3;
                  break;
               case 202:
                  alt211 = 2;
                  break;
               case 211:
                  alt211 = 1;
               }

               switch(alt211) {
               case 1:
                  this.match(this.input, 211, FOLLOW_211_in_termMultiplication11758);
                  if(this.state.failed) {
                     return (Term.Raw)term;
                  }

                  this.pushFollow(FOLLOW_termGroup_in_termMultiplication11762);
                  r = this.termGroup();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Term.Raw)term;
                  }

                  if(this.state.backtracking == 0) {
                     term = FunctionCall.Raw.newOperation('*', (Term.Raw)term, r);
                  }
                  break;
               case 2:
                  this.match(this.input, 202, FOLLOW_202_in_termMultiplication11776);
                  if(this.state.failed) {
                     return (Term.Raw)term;
                  }

                  this.pushFollow(FOLLOW_termGroup_in_termMultiplication11780);
                  r = this.termGroup();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Term.Raw)term;
                  }

                  if(this.state.backtracking == 0) {
                     term = FunctionCall.Raw.newOperation('/', (Term.Raw)term, r);
                  }
                  break;
               case 3:
                  this.match(this.input, 193, FOLLOW_193_in_termMultiplication11794);
                  if(this.state.failed) {
                     return (Term.Raw)term;
                  }

                  this.pushFollow(FOLLOW_termGroup_in_termMultiplication11798);
                  r = this.termGroup();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return (Term.Raw)term;
                  }

                  if(this.state.backtracking == 0) {
                     term = FunctionCall.Raw.newOperation('%', (Term.Raw)term, r);
                  }
                  break;
               default:
                  return (Term.Raw)term;
               }
            }
         }
      } catch (RecognitionException var9) {
         this.reportError(var9);
         this.recover(this.input, var9);
         return (Term.Raw)term;
      } finally {
         ;
      }
   }

   public final TruncateStatement truncateStatement() throws RecognitionException {
      TruncateStatement stmt = null;
      CFName cf = null;

      try {
         try {
            this.match(this.input, 149, FOLLOW_K_TRUNCATE_in_truncateStatement7357);
            if(this.state.failed) {
               return stmt;
            }

            int alt140 = 2;
            int LA140_0 = this.input.LA(1);
            if(LA140_0 == 47) {
               alt140 = 1;
            }

            switch(alt140) {
            case 1:
               this.match(this.input, 47, FOLLOW_K_COLUMNFAMILY_in_truncateStatement7360);
               if(this.state.failed) {
                  return stmt;
               }
            default:
               this.pushFollow(FOLLOW_columnFamilyName_in_truncateStatement7366);
               cf = this.columnFamilyName();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  stmt = new TruncateStatement(cf);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final Tuples.Literal tupleLiteral() throws RecognitionException {
      Tuples.Literal tt = null;
      Term.Raw t1 = null;
      Term.Raw tn = null;
      ArrayList l = new ArrayList();

      try {
         this.match(this.input, 194, FOLLOW_194_in_tupleLiteral11051);
         if(this.state.failed) {
            return tt;
         } else {
            this.pushFollow(FOLLOW_term_in_tupleLiteral11055);
            t1 = this.term();
            --this.state._fsp;
            if(this.state.failed) {
               return tt;
            } else {
               if(this.state.backtracking == 0) {
                  l.add(t1);
               }

               while(true) {
                  int alt203 = 2;
                  int LA203_0 = this.input.LA(1);
                  if(LA203_0 == 198) {
                     alt203 = 1;
                  }

                  switch(alt203) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_tupleLiteral11061);
                     if(this.state.failed) {
                        return tt;
                     }

                     this.pushFollow(FOLLOW_term_in_tupleLiteral11065);
                     tn = this.term();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return tt;
                     }

                     if(this.state.backtracking == 0) {
                        l.add(tn);
                     }
                     break;
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_tupleLiteral11072);
                     if(this.state.failed) {
                        return tt;
                     }

                     if(this.state.backtracking == 0) {
                        tt = new Tuples.Literal(l);
                     }

                     return tt;
                  }
               }
            }
         }
      } catch (RecognitionException var11) {
         this.reportError(var11);
         this.recover(this.input, var11);
         return tt;
      } finally {
         ;
      }
   }

   public final List<ColumnMetadata.Raw> tupleOfIdentifiers() throws RecognitionException {
      List<ColumnMetadata.Raw> ids = null;
      ColumnMetadata.Raw n1 = null;
      ColumnMetadata.Raw ni = null;
      ids = new ArrayList();

      try {
         this.match(this.input, 194, FOLLOW_194_in_tupleOfIdentifiers13398);
         if(this.state.failed) {
            return ids;
         } else {
            this.pushFollow(FOLLOW_cident_in_tupleOfIdentifiers13402);
            n1 = this.cident();
            --this.state._fsp;
            if(this.state.failed) {
               return ids;
            } else {
               if(this.state.backtracking == 0) {
                  ids.add(n1);
               }

               while(true) {
                  int alt232 = 2;
                  int LA232_0 = this.input.LA(1);
                  if(LA232_0 == 198) {
                     alt232 = 1;
                  }

                  switch(alt232) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_tupleOfIdentifiers13407);
                     if(this.state.failed) {
                        return ids;
                     }

                     this.pushFollow(FOLLOW_cident_in_tupleOfIdentifiers13411);
                     ni = this.cident();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return ids;
                     }

                     if(this.state.backtracking == 0) {
                        ids.add(ni);
                     }
                     break;
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_tupleOfIdentifiers13417);
                     if(this.state.failed) {
                        return ids;
                     }

                     return ids;
                  }
               }
            }
         }
      } catch (RecognitionException var10) {
         this.reportError(var10);
         this.recover(this.input, var10);
         return ids;
      } finally {
         ;
      }
   }

   public final List<Tuples.Raw> tupleOfMarkersForTuples() throws RecognitionException {
      List<Tuples.Raw> markers = null;
      Tuples.Raw m1 = null;
      Tuples.Raw mi = null;
      markers = new ArrayList();

      try {
         this.match(this.input, 194, FOLLOW_194_in_tupleOfMarkersForTuples13589);
         if(this.state.failed) {
            return markers;
         } else {
            this.pushFollow(FOLLOW_markerForTuple_in_tupleOfMarkersForTuples13593);
            m1 = this.markerForTuple();
            --this.state._fsp;
            if(this.state.failed) {
               return markers;
            } else {
               if(this.state.backtracking == 0) {
                  markers.add(m1);
               }

               while(true) {
                  int alt237 = 2;
                  int LA237_0 = this.input.LA(1);
                  if(LA237_0 == 198) {
                     alt237 = 1;
                  }

                  switch(alt237) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_tupleOfMarkersForTuples13598);
                     if(this.state.failed) {
                        return markers;
                     }

                     this.pushFollow(FOLLOW_markerForTuple_in_tupleOfMarkersForTuples13602);
                     mi = this.markerForTuple();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return markers;
                     }

                     if(this.state.backtracking == 0) {
                        markers.add(mi);
                     }
                     break;
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_tupleOfMarkersForTuples13608);
                     if(this.state.failed) {
                        return markers;
                     }

                     return markers;
                  }
               }
            }
         }
      } catch (RecognitionException var10) {
         this.reportError(var10);
         this.recover(this.input, var10);
         return markers;
      } finally {
         ;
      }
   }

   public final List<Tuples.Literal> tupleOfTupleLiterals() throws RecognitionException {
      List<Tuples.Literal> literals = null;
      Tuples.Literal t1 = null;
      Tuples.Literal ti = null;
      literals = new ArrayList();

      try {
         this.match(this.input, 194, FOLLOW_194_in_tupleOfTupleLiterals13503);
         if(this.state.failed) {
            return literals;
         } else {
            this.pushFollow(FOLLOW_tupleLiteral_in_tupleOfTupleLiterals13507);
            t1 = this.tupleLiteral();
            --this.state._fsp;
            if(this.state.failed) {
               return literals;
            } else {
               if(this.state.backtracking == 0) {
                  literals.add(t1);
               }

               while(true) {
                  int alt235 = 2;
                  int LA235_0 = this.input.LA(1);
                  if(LA235_0 == 198) {
                     alt235 = 1;
                  }

                  switch(alt235) {
                  case 1:
                     this.match(this.input, 198, FOLLOW_198_in_tupleOfTupleLiterals13512);
                     if(this.state.failed) {
                        return literals;
                     }

                     this.pushFollow(FOLLOW_tupleLiteral_in_tupleOfTupleLiterals13516);
                     ti = this.tupleLiteral();
                     --this.state._fsp;
                     if(this.state.failed) {
                        return literals;
                     }

                     if(this.state.backtracking == 0) {
                        literals.add(ti);
                     }
                     break;
                  default:
                     this.match(this.input, 195, FOLLOW_195_in_tupleOfTupleLiterals13522);
                     if(this.state.failed) {
                        return literals;
                     }

                     return literals;
                  }
               }
            }
         }
      } catch (RecognitionException var10) {
         this.reportError(var10);
         this.recover(this.input, var10);
         return literals;
      } finally {
         ;
      }
   }

   public final List<CQL3Type.Raw> tuple_types() throws RecognitionException {
      List<CQL3Type.Raw> types = null;
      CQL3Type.Raw t1 = null;
      CQL3Type.Raw tn = null;

      try {
         this.match(this.input, 151, FOLLOW_K_TUPLE_in_tuple_types14276);
         if(this.state.failed) {
            return types;
         } else {
            this.match(this.input, 205, FOLLOW_205_in_tuple_types14278);
            if(this.state.failed) {
               return types;
            } else {
               this.pushFollow(FOLLOW_comparatorType_in_tuple_types14282);
               t1 = this.comparatorType();
               --this.state._fsp;
               if(this.state.failed) {
                  return types;
               } else {
                  if(this.state.backtracking == 0) {
                     types = new ArrayList();
                     types.add(t1);
                  }

                  while(true) {
                     int alt244 = 2;
                     int LA244_0 = this.input.LA(1);
                     if(LA244_0 == 198) {
                        alt244 = 1;
                     }

                     switch(alt244) {
                     case 1:
                        this.match(this.input, 198, FOLLOW_198_in_tuple_types14287);
                        if(this.state.failed) {
                           return types;
                        }

                        this.pushFollow(FOLLOW_comparatorType_in_tuple_types14291);
                        tn = this.comparatorType();
                        --this.state._fsp;
                        if(this.state.failed) {
                           return types;
                        }

                        if(this.state.backtracking == 0) {
                           types.add(tn);
                        }
                        break;
                     default:
                        this.match(this.input, 208, FOLLOW_208_in_tuple_types14297);
                        if(this.state.failed) {
                           return types;
                        }

                        return types;
                     }
                  }
               }
            }
         }
      } catch (RecognitionException var10) {
         this.reportError(var10);
         this.recover(this.input, var10);
         return types;
      } finally {
         ;
      }
   }

   public final void typeColumns(CreateTypeStatement expr) throws RecognitionException {
      FieldIdentifier k = null;
      CQL3Type.Raw v = null;

      try {
         try {
            this.pushFollow(FOLLOW_fident_in_typeColumns5572);
            k = this.fident();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            this.pushFollow(FOLLOW_comparatorType_in_typeColumns5576);
            v = this.comparatorType();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            if(this.state.backtracking == 0) {
               expr.addDefinition(k, v);
            }
         } catch (RecognitionException var8) {
            this.reportError(var8);
            this.recover(this.input, var8);
         }

      } finally {
         ;
      }
   }

   public final void udtColumnOperation(List<Pair<ColumnMetadata.Raw, Operation.RawUpdate>> operations, ColumnMetadata.Raw key, FieldIdentifier field) throws RecognitionException {
      Term.Raw t = null;

      try {
         try {
            this.match(this.input, 207, FOLLOW_207_in_udtColumnOperation12255);
            if(this.state.failed) {
               return;
            }

            this.pushFollow(FOLLOW_term_in_udtColumnOperation12259);
            t = this.term();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            if(this.state.backtracking == 0) {
               this.addRawUpdate(operations, key, new Operation.SetField(field, t));
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

      } finally {
         ;
      }
   }

   public final Selectable.Raw unaliasedSelector() throws RecognitionException {
      Selectable.Raw s = null;
      Selectable.Raw a = null;

      try {
         try {
            this.pushFollow(FOLLOW_selectionAddition_in_unaliasedSelector1430);
            a = this.selectionAddition();
            --this.state._fsp;
            if(this.state.failed) {
               return s;
            }

            if(this.state.backtracking == 0) {
               s = a;
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return s;
      } finally {
         ;
      }
   }

   public final String unreserved_function_keyword() throws RecognitionException {
      String str = null;
      String u = null;
      CQL3Type t = null;

      try {
         try {
            int alt248 = true;
            int LA248_0 = this.input.LA(1);
            byte alt248;
            if((LA248_0 < 28 || LA248_0 > 29) && LA248_0 != 34 && LA248_0 != 44 && LA248_0 != 46 && (LA248_0 < 48 || LA248_0 > 49) && LA248_0 != 53 && LA248_0 != 60 && (LA248_0 < 67 || LA248_0 > 69) && LA248_0 != 73 && (LA248_0 < 75 || LA248_0 > 76) && LA248_0 != 78 && (LA248_0 < 83 || LA248_0 > 84) && LA248_0 != 91 && (LA248_0 < 93 || LA248_0 > 95) && (LA248_0 < 97 || LA248_0 > 99) && LA248_0 != 104 && LA248_0 != 107 && LA248_0 != 109 && LA248_0 != 114 && (LA248_0 < 117 || LA248_0 > 121) && LA248_0 != 127 && LA248_0 != 129 && (LA248_0 < 131 || LA248_0 > 132) && LA248_0 != 135 && (LA248_0 < 137 || LA248_0 > 140) && LA248_0 != 148 && (LA248_0 < 151 || LA248_0 > 152) && (LA248_0 < 158 || LA248_0 > 159) && LA248_0 != 162) {
               if(LA248_0 != 36 && (LA248_0 < 40 || LA248_0 > 42) && LA248_0 != 51 && (LA248_0 < 54 || LA248_0 > 55) && LA248_0 != 62 && LA248_0 != 64 && LA248_0 != 70 && LA248_0 != 82 && LA248_0 != 86 && LA248_0 != 136 && (LA248_0 < 141 || LA248_0 > 145) && LA248_0 != 161 && (LA248_0 < 163 || LA248_0 > 164)) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return str;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 248, 0, this.input);
                  throw nvae;
               }

               alt248 = 2;
            } else {
               alt248 = 1;
            }

            switch(alt248) {
            case 1:
               this.pushFollow(FOLLOW_basic_unreserved_keyword_in_unreserved_function_keyword14552);
               u = this.basic_unreserved_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return str;
               }

               if(this.state.backtracking == 0) {
                  str = u;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_native_type_in_unreserved_function_keyword14564);
               t = this.native_type();
               --this.state._fsp;
               if(this.state.failed) {
                  return str;
               }

               if(this.state.backtracking == 0) {
                  str = t.toString();
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return str;
      } finally {
         ;
      }
   }

   public final String unreserved_keyword() throws RecognitionException {
      String str = null;
      Token k = null;
      String u = null;

      try {
         try {
            int alt247 = true;
            int LA247_0 = this.input.LA(1);
            byte alt247;
            if((LA247_0 < 28 || LA247_0 > 29) && LA247_0 != 34 && LA247_0 != 36 && (LA247_0 < 40 || LA247_0 > 42) && LA247_0 != 44 && LA247_0 != 46 && (LA247_0 < 48 || LA247_0 > 49) && LA247_0 != 51 && (LA247_0 < 53 || LA247_0 > 55) && LA247_0 != 60 && LA247_0 != 62 && LA247_0 != 64 && (LA247_0 < 67 || LA247_0 > 70) && LA247_0 != 73 && (LA247_0 < 75 || LA247_0 > 76) && LA247_0 != 78 && (LA247_0 < 82 || LA247_0 > 84) && LA247_0 != 86 && LA247_0 != 91 && (LA247_0 < 93 || LA247_0 > 95) && (LA247_0 < 97 || LA247_0 > 99) && LA247_0 != 104 && LA247_0 != 107 && LA247_0 != 109 && LA247_0 != 114 && (LA247_0 < 117 || LA247_0 > 121) && LA247_0 != 127 && LA247_0 != 129 && (LA247_0 < 131 || LA247_0 > 132) && (LA247_0 < 135 || LA247_0 > 145) && LA247_0 != 148 && (LA247_0 < 151 || LA247_0 > 152) && (LA247_0 < 158 || LA247_0 > 159) && (LA247_0 < 161 || LA247_0 > 164)) {
               if(LA247_0 != 45 && LA247_0 != 50 && LA247_0 != 61 && (LA247_0 < 89 || LA247_0 > 90) && LA247_0 != 150 && LA247_0 != 168) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return str;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 247, 0, this.input);
                  throw nvae;
               }

               alt247 = 2;
            } else {
               alt247 = 1;
            }

            switch(alt247) {
            case 1:
               this.pushFollow(FOLLOW_unreserved_function_keyword_in_unreserved_keyword14485);
               u = this.unreserved_function_keyword();
               --this.state._fsp;
               if(this.state.failed) {
                  return str;
               }

               if(this.state.backtracking == 0) {
                  str = u;
               }
               break;
            case 2:
               k = this.input.LT(1);
               if(this.input.LA(1) != 45 && this.input.LA(1) != 50 && this.input.LA(1) != 61 && (this.input.LA(1) < 89 || this.input.LA(1) > 90) && this.input.LA(1) != 150 && this.input.LA(1) != 168) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return str;
                  }

                  MismatchedSetException mse = new MismatchedSetException((BitSet)null, this.input);
                  throw mse;
               }

               this.input.consume();
               this.state.errorRecovery = false;
               this.state.failed = false;
               if(this.state.backtracking == 0) {
                  str = k != null?k.getText():null;
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

         return str;
      } finally {
         ;
      }
   }

   public final RevokePermissionsStatement unrestrictPermissionsStatement() throws RecognitionException {
      RevokePermissionsStatement stmt = null;
      IResource i = null;
      IResource r = null;
      RoleName revokee = null;
      Set<Permission> permissionOrAll4 = null;
      IResource res = null;

      try {
         try {
            this.match(this.input, 154, FOLLOW_K_UNRESTRICT_in_unrestrictPermissionsStatement7772);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_permissionOrAll_in_unrestrictPermissionsStatement7784);
            permissionOrAll4 = this.permissionOrAll();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            this.match(this.input, 113, FOLLOW_K_ON_in_unrestrictPermissionsStatement7792);
            if(this.state.failed) {
               return stmt;
            }

            int alt146 = true;
            int LA146_0 = this.input.LA(1);
            byte alt146;
            if(LA146_0 == 127) {
               int LA146_1 = this.input.LA(2);
               if(LA146_1 == 194) {
                  alt146 = 1;
               } else {
                  if(LA146_1 != 72 && LA146_1 != 201) {
                     if(this.state.backtracking > 0) {
                        this.state.failed = true;
                        return stmt;
                     }

                     int nvaeMark = this.input.mark();

                     try {
                        this.input.consume();
                        NoViableAltException nvae = new NoViableAltException("", 146, 1, this.input);
                        throw nvae;
                     } finally {
                        this.input.rewind(nvaeMark);
                     }
                  }

                  alt146 = 2;
               }
            } else {
               if(LA146_0 != 23 && (LA146_0 < 28 || LA146_0 > 29) && LA146_0 != 34 && LA146_0 != 36 && (LA146_0 < 40 || LA146_0 > 42) && (LA146_0 < 44 || LA146_0 > 51) && (LA146_0 < 53 || LA146_0 > 55) && (LA146_0 < 60 || LA146_0 > 62) && LA146_0 != 64 && (LA146_0 < 67 || LA146_0 > 70) && LA146_0 != 73 && (LA146_0 < 75 || LA146_0 > 76) && LA146_0 != 78 && (LA146_0 < 82 || LA146_0 > 84) && LA146_0 != 86 && (LA146_0 < 89 || LA146_0 > 95) && (LA146_0 < 97 || LA146_0 > 99) && (LA146_0 < 101 || LA146_0 > 102) && LA146_0 != 104 && LA146_0 != 107 && LA146_0 != 109 && LA146_0 != 114 && (LA146_0 < 117 || LA146_0 > 121) && LA146_0 != 129 && (LA146_0 < 131 || LA146_0 > 132) && (LA146_0 < 135 || LA146_0 > 145) && LA146_0 != 148 && (LA146_0 < 150 || LA146_0 > 152) && (LA146_0 < 158 || LA146_0 > 159) && (LA146_0 < 161 || LA146_0 > 164) && LA146_0 != 168 && (LA146_0 < 177 || LA146_0 > 178)) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return stmt;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 146, 0, this.input);
                  throw nvae;
               }

               alt146 = 2;
            }

            switch(alt146) {
            case 1:
               this.pushFollow(FOLLOW_resourceFromInternalName_in_unrestrictPermissionsStatement7808);
               i = this.resourceFromInternalName();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  res = i;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_resource_in_unrestrictPermissionsStatement7816);
               r = this.gCql.resource();
               --this.state._fsp;
               if(this.state.failed) {
                  return stmt;
               }

               if(this.state.backtracking == 0) {
                  res = r;
               }
            }

            this.match(this.input, 72, FOLLOW_K_FROM_in_unrestrictPermissionsStatement7828);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_userOrRoleName_in_unrestrictPermissionsStatement7842);
            revokee = this.userOrRoleName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            if(this.state.backtracking == 0) {
               stmt = new RevokePermissionsStatement(this.filterPermissions(permissionOrAll4, res), res, revokee, GrantMode.RESTRICT);
            }
         } catch (RecognitionException var21) {
            this.reportError(var21);
            this.recover(this.input, var21);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final List<Pair<ColumnMetadata.Raw, ColumnCondition.Raw>> updateConditions() throws RecognitionException {
      List<Pair<ColumnMetadata.Raw, ColumnCondition.Raw>> conditions = null;
      conditions = new ArrayList();

      try {
         this.pushFollow(FOLLOW_columnCondition_in_updateConditions3637);
         this.columnCondition(conditions);
         --this.state._fsp;
         if(this.state.failed) {
            return conditions;
         } else {
            while(true) {
               int alt55 = 2;
               int LA55_0 = this.input.LA(1);
               if(LA55_0 == 32) {
                  alt55 = 1;
               }

               switch(alt55) {
               case 1:
                  this.match(this.input, 32, FOLLOW_K_AND_in_updateConditions3642);
                  if(this.state.failed) {
                     return conditions;
                  }

                  this.pushFollow(FOLLOW_columnCondition_in_updateConditions3644);
                  this.columnCondition(conditions);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return conditions;
                  }
                  break;
               default:
                  return conditions;
               }
            }
         }
      } catch (RecognitionException var8) {
         this.reportError(var8);
         this.recover(this.input, var8);
         return conditions;
      } finally {
         ;
      }
   }

   public final UpdateStatement.ParsedUpdate updateStatement() throws RecognitionException {
      UpdateStatement.ParsedUpdate expr = null;
      CFName cf = null;
      WhereClause.Builder wclause = null;
      List<Pair<ColumnMetadata.Raw, ColumnCondition.Raw>> conditions = null;
      Attributes.Raw attrs = new Attributes.Raw();
      List<Pair<ColumnMetadata.Raw, Operation.RawUpdate>> operations = new ArrayList();
      boolean ifExists = false;

      try {
         this.match(this.input, 156, FOLLOW_K_UPDATE_in_updateStatement3524);
         if(this.state.failed) {
            return expr;
         } else {
            this.pushFollow(FOLLOW_columnFamilyName_in_updateStatement3528);
            cf = this.columnFamilyName();
            --this.state._fsp;
            if(this.state.failed) {
               return expr;
            } else {
               int alt51 = 2;
               int LA51_0 = this.input.LA(1);
               if(LA51_0 == 160) {
                  alt51 = 1;
               }

               switch(alt51) {
               case 1:
                  this.pushFollow(FOLLOW_usingClause_in_updateStatement3538);
                  this.usingClause(attrs);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return expr;
                  }
               default:
                  this.match(this.input, 134, FOLLOW_K_SET_in_updateStatement3550);
                  if(this.state.failed) {
                     return expr;
                  } else {
                     this.pushFollow(FOLLOW_columnOperation_in_updateStatement3552);
                     this.columnOperation(operations);
                     --this.state._fsp;
                     if(this.state.failed) {
                        return expr;
                     } else {
                        while(true) {
                           int alt54 = 2;
                           int LA54_0 = this.input.LA(1);
                           if(LA54_0 == 198) {
                              alt54 = 1;
                           }

                           switch(alt54) {
                           case 1:
                              this.match(this.input, 198, FOLLOW_198_in_updateStatement3556);
                              if(this.state.failed) {
                                 return expr;
                              }

                              this.pushFollow(FOLLOW_columnOperation_in_updateStatement3558);
                              this.columnOperation(operations);
                              --this.state._fsp;
                              if(this.state.failed) {
                                 return expr;
                              }
                              break;
                           default:
                              this.match(this.input, 166, FOLLOW_K_WHERE_in_updateStatement3569);
                              if(this.state.failed) {
                                 return expr;
                              }

                              this.pushFollow(FOLLOW_whereClause_in_updateStatement3573);
                              wclause = this.whereClause();
                              --this.state._fsp;
                              if(this.state.failed) {
                                 return expr;
                              }

                              alt54 = 2;
                              LA54_0 = this.input.LA(1);
                              if(LA54_0 == 79) {
                                 alt54 = 1;
                              }

                              switch(alt54) {
                              case 1:
                                 this.match(this.input, 79, FOLLOW_K_IF_in_updateStatement3583);
                                 if(this.state.failed) {
                                    return expr;
                                 }

                                 int alt53 = true;
                                 int LA53_0 = this.input.LA(1);
                                 byte alt53;
                                 if(LA53_0 != 67) {
                                    if(LA53_0 != 14 && LA53_0 != 23 && (LA53_0 < 28 || LA53_0 > 29) && LA53_0 != 34 && LA53_0 != 36 && (LA53_0 < 40 || LA53_0 > 42) && (LA53_0 < 44 || LA53_0 > 46) && (LA53_0 < 48 || LA53_0 > 51) && (LA53_0 < 53 || LA53_0 > 55) && (LA53_0 < 60 || LA53_0 > 62) && LA53_0 != 64 && (LA53_0 < 68 || LA53_0 > 70) && LA53_0 != 73 && (LA53_0 < 75 || LA53_0 > 76) && LA53_0 != 78 && (LA53_0 < 82 || LA53_0 > 84) && LA53_0 != 86 && (LA53_0 < 89 || LA53_0 > 91) && (LA53_0 < 93 || LA53_0 > 95) && (LA53_0 < 97 || LA53_0 > 99) && LA53_0 != 104 && LA53_0 != 107 && LA53_0 != 109 && LA53_0 != 114 && (LA53_0 < 117 || LA53_0 > 121) && LA53_0 != 127 && LA53_0 != 129 && (LA53_0 < 131 || LA53_0 > 132) && (LA53_0 < 135 || LA53_0 > 145) && LA53_0 != 148 && (LA53_0 < 150 || LA53_0 > 152) && (LA53_0 < 158 || LA53_0 > 159) && (LA53_0 < 161 || LA53_0 > 164) && LA53_0 != 168 && LA53_0 != 178) {
                                       if(this.state.backtracking > 0) {
                                          this.state.failed = true;
                                          return expr;
                                       }

                                       NoViableAltException nvae = new NoViableAltException("", 53, 0, this.input);
                                       throw nvae;
                                    }

                                    alt53 = 2;
                                 } else {
                                    int LA53_1 = this.input.LA(2);
                                    if(LA53_1 != -1 && LA53_1 != 33 && LA53_1 != 57 && LA53_1 != 85 && LA53_1 != 156 && LA53_1 != 204) {
                                       if(LA53_1 != 80 && LA53_1 != 192 && LA53_1 != 201 && (LA53_1 < 205 || LA53_1 > 210)) {
                                          if(this.state.backtracking > 0) {
                                             this.state.failed = true;
                                             return expr;
                                          }

                                          int nvaeMark = this.input.mark();

                                          try {
                                             this.input.consume();
                                             NoViableAltException nvae = new NoViableAltException("", 53, 1, this.input);
                                             throw nvae;
                                          } finally {
                                             this.input.rewind(nvaeMark);
                                          }
                                       }

                                       alt53 = 2;
                                    } else {
                                       alt53 = 1;
                                    }
                                 }

                                 switch(alt53) {
                                 case 1:
                                    this.match(this.input, 67, FOLLOW_K_EXISTS_in_updateStatement3587);
                                    if(this.state.failed) {
                                       return expr;
                                    }

                                    if(this.state.backtracking == 0) {
                                       ifExists = true;
                                    }
                                    break;
                                 case 2:
                                    this.pushFollow(FOLLOW_updateConditions_in_updateStatement3595);
                                    conditions = this.updateConditions();
                                    --this.state._fsp;
                                    if(this.state.failed) {
                                       return expr;
                                    }
                                 }
                              }

                              if(this.state.backtracking == 0) {
                                 expr = new UpdateStatement.ParsedUpdate(cf, attrs, operations, wclause.build(), conditions == null?Collections.emptyList():conditions, ifExists);
                              }

                              return expr;
                           }
                        }
                     }
                  }
               }
            }
         }
      } catch (RecognitionException var26) {
         this.reportError(var26);
         this.recover(this.input, var26);
         return expr;
      } finally {
         ;
      }
   }

   public final UseStatement useStatement() throws RecognitionException {
      UseStatement stmt = null;
      String ks = null;

      try {
         try {
            this.match(this.input, 157, FOLLOW_K_USE_in_useStatement1032);
            if(this.state.failed) {
               return stmt;
            }

            this.pushFollow(FOLLOW_keyspaceName_in_useStatement1036);
            ks = this.keyspaceName();
            --this.state._fsp;
            if(this.state.failed) {
               return stmt;
            }

            if(this.state.backtracking == 0) {
               stmt = new UseStatement(ks);
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return stmt;
      } finally {
         ;
      }
   }

   public final RoleName userOrRoleName() throws RecognitionException {
      RoleName name = null;
      RoleName role = new RoleName();

      try {
         try {
            this.pushFollow(FOLLOW_roleName_in_userOrRoleName10055);
            this.roleName(role);
            --this.state._fsp;
            if(this.state.failed) {
               return name;
            }

            if(this.state.backtracking == 0) {
               name = role;
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return name;
      } finally {
         ;
      }
   }

   public final void userPassword(RoleOptions opts) throws RecognitionException {
      Token v = null;

      try {
         try {
            this.match(this.input, 118, FOLLOW_K_PASSWORD_in_userPassword9504);
            if(this.state.failed) {
               return;
            }

            v = (Token)this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_userPassword9508);
            if(this.state.failed) {
               return;
            }

            if(this.state.backtracking == 0) {
               opts.setOption(IRoleManager.Option.PASSWORD, v != null?v.getText():null);
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

      } finally {
         ;
      }
   }

   public final UTName userTypeName() throws RecognitionException {
      UTName name = null;
      ColumnIdentifier ks = null;
      ColumnIdentifier ut = null;

      try {
         try {
            int alt187 = 2;
            int LA187_2;
            switch(this.input.LA(1)) {
            case 23:
               LA187_2 = this.input.LA(2);
               if(LA187_2 == 201) {
                  alt187 = 1;
               }
            case 24:
            case 25:
            case 26:
            case 27:
            case 30:
            case 31:
            case 32:
            case 33:
            case 35:
            case 37:
            case 38:
            case 39:
            case 43:
            case 47:
            case 52:
            case 56:
            case 57:
            case 58:
            case 59:
            case 63:
            case 65:
            case 66:
            case 71:
            case 72:
            case 74:
            case 77:
            case 79:
            case 80:
            case 81:
            case 85:
            case 87:
            case 88:
            case 92:
            case 96:
            case 100:
            case 101:
            case 102:
            case 103:
            case 105:
            case 106:
            case 108:
            case 110:
            case 111:
            case 112:
            case 113:
            case 115:
            case 116:
            case 122:
            case 123:
            case 124:
            case 125:
            case 126:
            case 128:
            case 130:
            case 133:
            case 134:
            case 146:
            case 147:
            case 149:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 160:
            case 165:
            case 166:
            case 167:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            default:
               break;
            case 28:
            case 29:
            case 34:
            case 44:
            case 46:
            case 48:
            case 49:
            case 53:
            case 60:
            case 67:
            case 68:
            case 69:
            case 73:
            case 75:
            case 76:
            case 78:
            case 83:
            case 84:
            case 91:
            case 93:
            case 94:
            case 95:
            case 97:
            case 98:
            case 99:
            case 104:
            case 107:
            case 109:
            case 114:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 127:
            case 129:
            case 131:
            case 132:
            case 135:
            case 137:
            case 138:
            case 139:
            case 140:
            case 148:
            case 151:
            case 152:
            case 158:
            case 159:
            case 162:
               LA187_2 = this.input.LA(2);
               if(LA187_2 == 201) {
                  alt187 = 1;
               }
               break;
            case 36:
            case 40:
            case 41:
            case 42:
            case 45:
            case 50:
            case 51:
            case 54:
            case 55:
            case 61:
            case 62:
            case 64:
            case 70:
            case 82:
            case 86:
            case 89:
            case 136:
            case 141:
            case 142:
            case 143:
            case 144:
            case 145:
            case 150:
            case 161:
            case 163:
            case 164:
            case 168:
               alt187 = 1;
               break;
            case 90:
               LA187_2 = this.input.LA(2);
               if(LA187_2 == 201) {
                  alt187 = 1;
               }
               break;
            case 178:
               LA187_2 = this.input.LA(2);
               if(LA187_2 == 201) {
                  alt187 = 1;
               }
            }

            switch(alt187) {
            case 1:
               this.pushFollow(FOLLOW_noncol_ident_in_userTypeName10015);
               ks = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return name;
               }

               this.match(this.input, 201, FOLLOW_201_in_userTypeName10017);
               if(this.state.failed) {
                  return name;
               }
            default:
               this.pushFollow(FOLLOW_non_type_ident_in_userTypeName10023);
               ut = this.non_type_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return name;
               }

               if(this.state.backtracking == 0) {
                  name = new UTName(ks, ut);
               }
            }
         } catch (RecognitionException var9) {
            this.reportError(var9);
            this.recover(this.input, var9);
         }

         return name;
      } finally {
         ;
      }
   }

   public final Cql_Parser.username_return username() throws RecognitionException {
      Cql_Parser.username_return retval = new Cql_Parser.username_return();
      retval.start = this.input.LT(1);

      try {
         try {
            int alt245 = true;
            byte alt245;
            switch(this.input.LA(1)) {
            case 23:
               alt245 = 1;
               break;
            case 178:
               alt245 = 3;
               break;
            case 182:
               alt245 = 2;
               break;
            default:
               if(this.state.backtracking > 0) {
                  this.state.failed = true;
                  return retval;
               }

               NoViableAltException nvae = new NoViableAltException("", 245, 0, this.input);
               throw nvae;
            }

            switch(alt245) {
            case 1:
               this.match(this.input, 23, FOLLOW_IDENT_in_username14314);
               if(this.state.failed) {
                  return retval;
               }
               break;
            case 2:
               this.match(this.input, 182, FOLLOW_STRING_LITERAL_in_username14322);
               if(this.state.failed) {
                  return retval;
               }
               break;
            case 3:
               this.match(this.input, 178, FOLLOW_QUOTED_NAME_in_username14330);
               if(this.state.failed) {
                  return retval;
               }

               if(this.state.backtracking == 0) {
                  this.addRecognitionError("Quoted strings are are not supported for user names and USER is deprecated, please use ROLE");
               }
            }

            retval.stop = this.input.LT(-1);
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

         return retval;
      } finally {
         ;
      }
   }

   public final UserTypes.Literal usertypeLiteral() throws RecognitionException {
      UserTypes.Literal ut = null;
      FieldIdentifier k1 = null;
      Term.Raw v1 = null;
      FieldIdentifier kn = null;
      Term.Raw vn = null;
      HashMap m = new HashMap();

      try {
         this.match(this.input, 214, FOLLOW_214_in_usertypeLiteral10981);
         if(this.state.failed) {
            return ut;
         } else {
            this.pushFollow(FOLLOW_fident_in_usertypeLiteral10985);
            k1 = this.fident();
            --this.state._fsp;
            if(this.state.failed) {
               return ut;
            } else {
               this.match(this.input, 203, FOLLOW_203_in_usertypeLiteral10987);
               if(this.state.failed) {
                  return ut;
               } else {
                  this.pushFollow(FOLLOW_term_in_usertypeLiteral10991);
                  v1 = this.term();
                  --this.state._fsp;
                  if(this.state.failed) {
                     return ut;
                  } else {
                     if(this.state.backtracking == 0) {
                        m.put(k1, v1);
                     }

                     while(true) {
                        int alt202 = 2;
                        int LA202_0 = this.input.LA(1);
                        if(LA202_0 == 198) {
                           alt202 = 1;
                        }

                        switch(alt202) {
                        case 1:
                           this.match(this.input, 198, FOLLOW_198_in_usertypeLiteral10997);
                           if(this.state.failed) {
                              return ut;
                           }

                           this.pushFollow(FOLLOW_fident_in_usertypeLiteral11001);
                           kn = this.fident();
                           --this.state._fsp;
                           if(this.state.failed) {
                              return ut;
                           }

                           this.match(this.input, 203, FOLLOW_203_in_usertypeLiteral11003);
                           if(this.state.failed) {
                              return ut;
                           }

                           this.pushFollow(FOLLOW_term_in_usertypeLiteral11007);
                           vn = this.term();
                           --this.state._fsp;
                           if(this.state.failed) {
                              return ut;
                           }

                           if(this.state.backtracking == 0) {
                              m.put(kn, vn);
                           }
                           break;
                        default:
                           this.match(this.input, 215, FOLLOW_215_in_usertypeLiteral11014);
                           if(this.state.failed) {
                              return ut;
                           }

                           if(this.state.backtracking == 0) {
                              ut = new UserTypes.Literal(m);
                           }

                           return ut;
                        }
                     }
                  }
               }
            }
         }
      } catch (RecognitionException var13) {
         this.reportError(var13);
         this.recover(this.input, var13);
         return ut;
      } finally {
         ;
      }
   }

   public final void usingClause(Attributes.Raw attrs) throws RecognitionException {
      try {
         this.match(this.input, 160, FOLLOW_K_USING_in_usingClause3441);
         if(!this.state.failed) {
            this.pushFollow(FOLLOW_usingClauseObjective_in_usingClause3443);
            this.usingClauseObjective(attrs);
            --this.state._fsp;
            if(!this.state.failed) {
               while(true) {
                  int alt49 = 2;
                  int LA49_0 = this.input.LA(1);
                  if(LA49_0 == 32) {
                     alt49 = 1;
                  }

                  switch(alt49) {
                  case 1:
                     this.match(this.input, 32, FOLLOW_K_AND_in_usingClause3448);
                     if(this.state.failed) {
                        return;
                     }

                     this.pushFollow(FOLLOW_usingClauseObjective_in_usingClause3450);
                     this.usingClauseObjective(attrs);
                     --this.state._fsp;
                     if(this.state.failed) {
                        return;
                     }
                     break;
                  default:
                     return;
                  }
               }
            }
         }
      } catch (RecognitionException var7) {
         this.reportError(var7);
         this.recover(this.input, var7);
      } finally {
         ;
      }
   }

   public final void usingClauseDelete(Attributes.Raw attrs) throws RecognitionException {
      Term.Raw ts = null;

      try {
         try {
            this.match(this.input, 160, FOLLOW_K_USING_in_usingClauseDelete3918);
            if(this.state.failed) {
               return;
            }

            this.match(this.input, 143, FOLLOW_K_TIMESTAMP_in_usingClauseDelete3920);
            if(this.state.failed) {
               return;
            }

            this.pushFollow(FOLLOW_intValue_in_usingClauseDelete3924);
            ts = this.intValue();
            --this.state._fsp;
            if(this.state.failed) {
               return;
            }

            if(this.state.backtracking == 0) {
               attrs.timestamp = ts;
            }
         } catch (RecognitionException var7) {
            this.reportError(var7);
            this.recover(this.input, var7);
         }

      } finally {
         ;
      }
   }

   public final void usingClauseObjective(Attributes.Raw attrs) throws RecognitionException {
      Term.Raw ts = null;
      Term.Raw t = null;

      try {
         try {
            int alt50 = true;
            int LA50_0 = this.input.LA(1);
            byte alt50;
            if(LA50_0 == 143) {
               alt50 = 1;
            } else {
               if(LA50_0 != 150) {
                  if(this.state.backtracking > 0) {
                     this.state.failed = true;
                     return;
                  }

                  NoViableAltException nvae = new NoViableAltException("", 50, 0, this.input);
                  throw nvae;
               }

               alt50 = 2;
            }

            switch(alt50) {
            case 1:
               this.match(this.input, 143, FOLLOW_K_TIMESTAMP_in_usingClauseObjective3472);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_intValue_in_usingClauseObjective3476);
               ts = this.intValue();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  attrs.timestamp = ts;
               }
               break;
            case 2:
               this.match(this.input, 150, FOLLOW_K_TTL_in_usingClauseObjective3486);
               if(this.state.failed) {
                  return;
               }

               this.pushFollow(FOLLOW_intValue_in_usingClauseObjective3490);
               t = this.intValue();
               --this.state._fsp;
               if(this.state.failed) {
                  return;
               }

               if(this.state.backtracking == 0) {
                  attrs.timeToLive = t;
               }
            }
         } catch (RecognitionException var10) {
            this.reportError(var10);
            this.recover(this.input, var10);
         }

      } finally {
         ;
      }
   }

   public Permission validatePermission(String domain, String name) {
      return Permissions.permission(domain, name);
   }

   public final Term.Raw value() throws RecognitionException {
      Term.Raw value = null;
      Constants.Literal c = null;
      Term.Raw l = null;
      UserTypes.Literal u = null;
      Tuples.Literal t = null;
      ColumnIdentifier id = null;

      try {
         try {
            int alt204 = true;
            int alt204 = this.dfa204.predict(this.input);
            switch(alt204) {
            case 1:
               this.pushFollow(FOLLOW_constant_in_value11095);
               c = this.constant();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = c;
               }
               break;
            case 2:
               this.pushFollow(FOLLOW_collectionLiteral_in_value11117);
               l = this.collectionLiteral();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = l;
               }
               break;
            case 3:
               this.pushFollow(FOLLOW_usertypeLiteral_in_value11130);
               u = this.usertypeLiteral();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = u;
               }
               break;
            case 4:
               this.pushFollow(FOLLOW_tupleLiteral_in_value11145);
               t = this.tupleLiteral();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = t;
               }
               break;
            case 5:
               this.match(this.input, 111, FOLLOW_K_NULL_in_value11161);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = Constants.NULL_LITERAL;
               }
               break;
            case 6:
               this.match(this.input, 203, FOLLOW_203_in_value11185);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               this.pushFollow(FOLLOW_noncol_ident_in_value11189);
               id = this.noncol_ident();
               --this.state._fsp;
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = this.newBindVariables(id);
               }
               break;
            case 7:
               this.match(this.input, 177, FOLLOW_QMARK_in_value11200);
               if(this.state.failed) {
                  return (Term.Raw)value;
               }

               if(this.state.backtracking == 0) {
                  value = this.newBindVariables((ColumnIdentifier)null);
               }
            }
         } catch (RecognitionException var12) {
            this.reportError(var12);
            this.recover(this.input, var12);
         }

         return (Term.Raw)value;
      } finally {
         ;
      }
   }

   public final WhereClause.Builder whereClause() throws RecognitionException {
      WhereClause.Builder clause = null;
      clause = new WhereClause.Builder();

      try {
         this.pushFollow(FOLLOW_relationOrExpression_in_whereClause2917);
         this.relationOrExpression(clause);
         --this.state._fsp;
         if(this.state.failed) {
            return clause;
         } else {
            while(true) {
               int alt36 = 2;
               int LA36_0 = this.input.LA(1);
               if(LA36_0 == 32) {
                  alt36 = 1;
               }

               switch(alt36) {
               case 1:
                  this.match(this.input, 32, FOLLOW_K_AND_in_whereClause2921);
                  if(this.state.failed) {
                     return clause;
                  }

                  this.pushFollow(FOLLOW_relationOrExpression_in_whereClause2923);
                  this.relationOrExpression(clause);
                  --this.state._fsp;
                  if(this.state.failed) {
                     return clause;
                  }
                  break;
               default:
                  return clause;
               }
            }
         }
      } catch (RecognitionException var8) {
         this.reportError(var8);
         this.recover(this.input, var8);
         return clause;
      } finally {
         ;
      }
   }

   static {
      int numStates = DFA1_transitionS.length;
      DFA1_transition = new short[numStates][];

      int i;
      for(i = 0; i < numStates; ++i) {
         DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
      }

      DFA2_transitionS = new String[]{"\u0001\u0002\u0004\uffff\u0001\u0002\u0002\uffff\u0001\u0002\u0002\uffff\u0001\u0002\u0003\uffff\u0001\u0002\u0001\uffff\u0002\u0002\u0003\uffff\u0002\u0002\u0004\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0003\uffff\u0003\u0002\u0001\uffff\u0003\u0002\u0001\uffff\u0004\u0002\u0001\uffff\u0003\u0002\u0004\uffff\u0003\u0002\u0001\uffff\u0001\u0002\u0002\uffff\u0004\u0002\u0002\uffff\u0001\u0002\u0001\uffff\u0002\u0002\u0001\uffff\u0001\u0002\u0003\uffff\u0003\u0002\u0001\uffff\u0001\u0002\u0002\uffff\u0001\u0001\u0002\u0002\u0001\uffff\u0003\u0002\u0001\uffff\u0003\u0002\u0004\uffff\u0004\u0002\u0001\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0002\uffff\u0001\u0002\u0002\uffff\u0007\u0002\u0003\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0001\uffff\u0002\u0002\u0002\uffff\u000b\u0002\u0001\uffff\u0002\u0002\u0001\uffff\u0003\u0002\u0005\uffff\u0002\u0002\u0001\uffff\u0004\u0002\u0003\uffff\u0001\u0002\b\uffff\u0002\u0002\u0003\uffff\u0001\u0002\u0002\uffff\u0001\u0002\b\uffff\u0001\u0002\u0004\uffff\u0001\u0002\u0003\uffff\u0001\u0002\u0006\uffff\u0002\u0002\u0002\uffff\u0001\u0002", "\u0001\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""};
      DFA2_eot = DFA.unpackEncodedString("5\uffff");
      DFA2_eof = DFA.unpackEncodedString("5\uffff");
      DFA2_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0006\u0001\u00003\uffff");
      DFA2_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Ö\u0001\u00003\uffff");
      DFA2_accept = DFA.unpackEncodedString("\u0002\uffff\u0001\u00021\uffff\u0001\u0001");
      DFA2_special = DFA.unpackEncodedString("\u0001\uffff\u0001\u00003\uffff}>");
      numStates = DFA2_transitionS.length;
      DFA2_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
      }

      DFA11_transitionS = new String[]{"\u0001\u0002\u0004\uffff\u0001\u0002\u0002\uffff\u0001\u0002\u0002\uffff\u0001\u0002\u0003\uffff\u0001\u0002\u0001\uffff\u0002\u0002\u0003\uffff\u0002\u0002\u0004\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0003\uffff\u0003\u0002\u0001\uffff\u0003\u0002\u0001\uffff\u0004\u0002\u0001\uffff\u0003\u0002\u0004\uffff\u0001\u0002\u0001\u0001\u0001\u0002\u0001\uffff\u0001\u0002\u0002\uffff\u0004\u0002\u0002\uffff\u0001\u0002\u0001\uffff\u0002\u0002\u0001\uffff\u0001\u0002\u0003\uffff\u0003\u0002\u0001\uffff\u0001\u0002\u0002\uffff\u0003\u0002\u0001\uffff\u0003\u0002\u0001\uffff\u0003\u0002\u0004\uffff\u0004\u0002\u0001\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0002\uffff\u0001\u0002\u0002\uffff\u0007\u0002\u0003\uffff\u0001\u0002\u0001\uffff\u0001\u0002\u0001\uffff\u0002\u0002\u0002\uffff\u000b\u0002\u0001\uffff\u0002\u0002\u0001\uffff\u0003\u0002\u0005\uffff\u0002\u0002\u0001\uffff\u0004\u0002\u0003\uffff\u0001\u0002\b\uffff\u0002\u0002\u0003\uffff\u0001\u0002\u0002\uffff\u0001\u0002\b\uffff\u0001\u0002\u0004\uffff\u0001\u0002\u0003\uffff\u0001\u0002\u0006\uffff\u0002\u0002\u0002\uffff\u0001\u0002", "\u0001\uffff", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""};
      DFA11_eot = DFA.unpackEncodedString("4\uffff");
      DFA11_eof = DFA.unpackEncodedString("4\uffff");
      DFA11_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0006\u0001\u00002\uffff");
      DFA11_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Ö\u0001\u00002\uffff");
      DFA11_accept = DFA.unpackEncodedString("\u0002\uffff\u0001\u00020\uffff\u0001\u0001");
      DFA11_special = DFA.unpackEncodedString("\u0001\uffff\u0001\u00002\uffff}>");
      numStates = DFA11_transitionS.length;
      DFA11_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA11_transition[i] = DFA.unpackEncodedString(DFA11_transitionS[i]);
      }

      DFA17_transitionS = new String[]{"\u0001\u001e\u0004\uffff\u0001\u001f\u0002\uffff\u0001\u001a\u0002\uffff\u0001\u001d\u0003\uffff\u0001!\u0001\uffff\u0001\u0001\u0001\u001c\u0003\uffff\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u0005\u0001\u0006\u0001\u0007\u0001\uffff\u0001\u0003\u0001*\u0001\u0003\u0001\uffff\u0002\u0003\u0001\u0019\u0001\b\u0001\uffff\u0001\u0003\u0001\u0017\u0001\t\u0004\uffff\u0001\u0003\u0001+\u0001\n\u0001\uffff\u0001\u000b\u0002\uffff\u0003\u0003\u0001\f\u0002\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\r\u0002\u0003\u0001\uffff\u0001\u000e\u0002\uffff\u0002+\u0001\u0003\u0001\uffff\u0003\u0003\u0001\uffff\u0003\u0003\u0004\uffff\u0001\u0003\u0001$\u0001\"\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0001%\u0002\uffff\u0001\u0003\u0002\uffff\u0005\u0003\u0001#\u0001\"\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0002\uffff\u0001\u0003\u0001\u000f\u0004\u0003\u0001\u0010\u0001\u0018\u0001\u0011\u0001\u0016\u0001\u0012\u0001\uffff\u0001,\u0001\u0003\u0001\uffff\u0001)\u0002\u0003\u0005\uffff\u0002\u0003\u0001\uffff\u0001\u0013\u0001\u0003\u0001\u0014\u0001\u0015\u0003\uffff\u0001(\b\uffff\u0001'\u0001\u0002\u0003\uffff\u0001\u001b\u0002\uffff\u0001 \b\uffff\u0001-\u0004\uffff\u00010\u0003\uffff\u0001&\u0006\uffff\u0001.\u0003\uffff\u0001/", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "\u0001\uffff", "", "", ""};
      DFA17_eot = DFA.unpackEncodedString("3\uffff");
      DFA17_eof = DFA.unpackEncodedString("3\uffff");
      DFA17_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0006/\u0000\u0003\uffff");
      DFA17_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Ö/\u0000\u0003\uffff");
      DFA17_accept = DFA.unpackEncodedString("0\uffff\u0001\u0003\u0001\u0001\u0001\u0002");
      DFA17_special = DFA.unpackEncodedString("\u0001\uffff\u0001\u0000\u0001\u0001\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u0001\b\u0001\t\u0001\n\u0001\u000b\u0001\f\u0001\r\u0001\u000e\u0001\u000f\u0001\u0010\u0001\u0011\u0001\u0012\u0001\u0013\u0001\u0014\u0001\u0015\u0001\u0016\u0001\u0017\u0001\u0018\u0001\u0019\u0001\u001a\u0001\u001b\u0001\u001c\u0001\u001d\u0001\u001e\u0001\u001f\u0001 \u0001!\u0001\"\u0001#\u0001$\u0001%\u0001&\u0001'\u0001(\u0001)\u0001*\u0001+\u0001,\u0001-\u0001.\u0003\uffff}>");
      numStates = DFA17_transitionS.length;
      DFA17_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA17_transition[i] = DFA.unpackEncodedString(DFA17_transitionS[i]);
      }

      DFA22_transitionS = new String[]{"\u0001\u0001\u0004\uffff\u0001\u0001\u0002\uffff\u0001\u0001\u0002\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0001\uffff\u0002\u0001\u0003\uffff\u0002\u0001\u0004\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0003\uffff\u0003\u0001\u0001\uffff\u0003\u0001\u0001\uffff\u0004\u0001\u0001\uffff\u0003\u0001\u0004\uffff\u0003\u0001\u0001\uffff\u0001\u0001\u0002\uffff\u0004\u0001\u0002\uffff\u0001\u0001\u0001\uffff\u0002\u0001\u0001\uffff\u0001\u0001\u0003\uffff\u0003\u0001\u0001\uffff\u0001\u0001\u0002\uffff\u0003\u0001\u0001\uffff\u0003\u0001\u0001\uffff\u0003\u0001\u0004\uffff\u0004\u0001\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0002\uffff\u0001\u0001\u0002\uffff\u0007\u0001\u0003\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0001\uffff\u0002\u0001\u0002\uffff\u000b\u0001\u0001\uffff\u0002\u0001\u0001\uffff\u0003\u0001\u0005\uffff\u0002\u0001\u0001\uffff\u0004\u0001\u0003\uffff\u0001\u0001\b\uffff\u0002\u0001\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u0001\b\uffff\u0001-\b\uffff\u0001\u0001\u0006\uffff\u0001.\u0003\uffff\u0001/", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "\u0001\uffff", "", "", "", ""};
      DFA22_eot = DFA.unpackEncodedString("2\uffff");
      DFA22_eof = DFA.unpackEncodedString("2\uffff");
      DFA22_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0006,\uffff\u0001\u0000\u0004\uffff");
      DFA22_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Ö,\uffff\u0001\u0000\u0004\uffff");
      DFA22_accept = DFA.unpackEncodedString("\u0001\uffff\u0001\u0001,\uffff\u0001\u0004\u0001\u0005\u0001\u0002\u0001\u0003");
      DFA22_special = DFA.unpackEncodedString("-\uffff\u0001\u0000\u0004\uffff}>");
      numStates = DFA22_transitionS.length;
      DFA22_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA22_transition[i] = DFA.unpackEncodedString(DFA22_transitionS[i]);
      }

      DFA30_transitionS = new String[]{"\u0001\u001b\u0004\uffff\u0001\u001b\u0002\uffff\u0001\u001a\u0002\uffff\u0001\u001b\u0003\uffff\u0001\u001b\u0001\uffff\u0001\u0001\u0001\u001b\u0003\uffff\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u0005\u0001\u0006\u0001\u0007\u0001\uffff\u0001\u0003\u0001\u001f\u0001\u0003\u0001\uffff\u0002\u0003\u0001\u0019\u0001\b\u0001\uffff\u0001\u0003\u0001\u0017\u0001\t\u0004\uffff\u0001\u0003\u0001 \u0001\n\u0001\uffff\u0001\u000b\u0002\uffff\u0003\u0003\u0001\f\u0002\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\r\u0002\u0003\u0001\uffff\u0001\u000e\u0002\uffff\u0002 \u0001\u0003\u0001\uffff\u0003\u0003\u0001\uffff\u0003\u0003\u0004\uffff\u0001\u0003\u0002\u001b\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0001\u001b\u0002\uffff\u0001\u0003\u0002\uffff\u0005\u0003\u0002\u001b\u0003\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0002\uffff\u0001\u0003\u0001\u000f\u0004\u0003\u0001\u0010\u0001\u0018\u0001\u0011\u0001\u0016\u0001\u0012\u0001\uffff\u0001!\u0001\u0003\u0001\uffff\u0001\u001e\u0002\u0003\u0005\uffff\u0002\u0003\u0001\uffff\u0001\u0013\u0001\u0003\u0001\u0014\u0001\u0015\u0003\uffff\u0001\u001d\b\uffff\u0001\u001c\u0001\u0002\u0003\uffff\u0001\u001b\u0002\uffff\u0001\u001b\u0011\uffff\u0001\u001b", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "", "", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0001#\u0003\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0001\"\u0003\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "", "\u0001$\u0004\uffff\u0002&\u0004\uffff\u0001&\u0001\uffff\u0001'\u0003\uffff\u0001(\u0001)\u0001*\u0001\uffff\u0001&\u0001\u001a\u0001&\u0001\uffff\u0002&\u0001<\u0001+\u0001\uffff\u0001&\u0001:\u0001,\u0004\uffff\u0001&\u0001\u001a\u0001-\u0001\uffff\u0001.\u0002\uffff\u0003&\u0001/\u0002\uffff\u0001&\u0001\uffff\u0002&\u0001\uffff\u0001&\u0003\uffff\u00010\u0002&\u0001\uffff\u00011\u0002\uffff\u0002\u001a\u0001&\u0001\uffff\u0003&\u0001\uffff\u0003&\u0004\uffff\u0001&\u0002\uffff\u0001&\u0001\uffff\u0001&\u0004\uffff\u0001&\u0002\uffff\u0005&\u0005\uffff\u0001&\u0001\uffff\u0001&\u0001\uffff\u0002&\u0002\uffff\u0001&\u00012\u0004&\u00013\u0001;\u00014\u00019\u00015\u0001\uffff\u0001!\u0001&\u0001\uffff\u0001\u001a\u0002&\u0005\uffff\u0002&\u0001\uffff\u00016\u0001&\u00017\u00018\u0003\uffff\u0001\u001a\t\uffff\u0001%", "\u0001=\u0004\uffff\u0002?\u0004\uffff\u0001?\u0001\uffff\u0001@\u0003\uffff\u0001A\u0001B\u0001C\u0001\uffff\u0001?\u0001\u001b\u0001?\u0001\uffff\u0002?\u0001U\u0001D\u0001\uffff\u0001?\u0001S\u0001E\u0004\uffff\u0001?\u0001\u001b\u0001F\u0001\uffff\u0001G\u0002\uffff\u0003?\u0001H\u0002\uffff\u0001?\u0001\uffff\u0002?\u0001\uffff\u0001?\u0003\uffff\u0001I\u0002?\u0001\uffff\u0001J\u0002\uffff\u0002\u001b\u0001?\u0001\uffff\u0003?\u0001\uffff\u0003?\u0004\uffff\u0001?\u0002\uffff\u0001?\u0001\uffff\u0001?\u0004\uffff\u0001?\u0002\uffff\u0005?\u0005\uffff\u0001?\u0001\uffff\u0001?\u0001\uffff\u0002?\u0002\uffff\u0001?\u0001K\u0004?\u0001L\u0001T\u0001M\u0001R\u0001N\u0001\uffff\u0001!\u0001?\u0001\uffff\u0001\u001b\u0002?\u0005\uffff\u0002?\u0001\uffff\u0001O\u0001?\u0001P\u0001Q\u0003\uffff\u0001\u001b\t\uffff\u0001>", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001a\u0003\uffff\u0001\u001a%\uffff\u0001\u001a\u0017\uffff\u0001\u001a\u0013\uffff\u0001\u001a\u0002\uffff\u0001\u001aI\uffff\u0001\u001a\u0001!\u0002\u001a\u0001\uffff\u0002\u001a\u0001\uffff\u0004\u001a\u0005\uffff\u0003\u001a\u0002\uffff\u0001\u001a", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b", "\u0001\u001b\u0003\uffff\u0001\u001b%\uffff\u0001\u001b\u0017\uffff\u0001\u001b\u0013\uffff\u0001\u001b\u0002\uffff\u0001\u001bI\uffff\u0001\u001b\u0001!\u0002\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0005\uffff\u0003\u001b\u0002\uffff\u0001\u001b"};
      DFA30_eot = DFA.unpackEncodedString("V\uffff");
      DFA30_eof = DFA.unpackEncodedString("\u0001\uffff\u0019\u001a\u0002\uffff\u0001\u001b\u0004\u001a\u0003\uffff\u0019\u001a\u0019\u001b");
      DFA30_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0006\u0019\u001e\u0002\uffff\u0005\u001e\u0001\uffff\u0002\u00172\u001e");
      DFA30_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Ë\u0019×\u0002\uffff\u0005×\u0001\uffff\u0002²2×");
      DFA30_accept = DFA.unpackEncodedString("\u001a\uffff\u0001\u0001\u0001\u0002\u0005\uffff\u0001\u00034\uffff");
      DFA30_special = DFA.unpackEncodedString("V\uffff}>");
      numStates = DFA30_transitionS.length;
      DFA30_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
      }

      DFA31_transitionS = new String[]{"\u0001\u0005\u0004\uffff\u0002\u0005\u0004\uffff\u0001\u0005\u0001\uffff\u0001\u0005\u0003\uffff\u0003\u0005\u0001\uffff\u0001\u0005\u0001\u0004\u0001\u0005\u0001\uffff\u0002\u0005\u0001\u0001\u0001\u0005\u0001\uffff\u0003\u0005\u0004\uffff\u0003\u0005\u0001\uffff\u0001\u0005\u0002\uffff\u0004\u0005\u0002\uffff\u0001\u0005\u0001\uffff\u0002\u0005\u0001\uffff\u0001\u0005\u0003\uffff\u0003\u0005\u0001\uffff\u0001\u0005\u0002\uffff\u0003\u0005\u0001\uffff\u0003\u0005\u0001\uffff\u0003\u0005\u0004\uffff\u0001\u0005\u0002\uffff\u0001\u0005\u0001\uffff\u0001\u0005\u0004\uffff\u0001\u0005\u0002\uffff\u0005\u0005\u0005\uffff\u0001\u0005\u0001\uffff\u0001\u0005\u0001\uffff\u0002\u0005\u0002\uffff\u000b\u0005\u0001\uffff\u0002\u0005\u0001\uffff\u0001\u0003\u0002\u0005\u0005\uffff\u0002\u0005\u0001\uffff\u0004\u0005\u0003\uffff\u0001\u0002\b\uffff\u0002\u0005", "\u0001\u0006\u0006\uffff\u0001\u0005", "\u0001\u0007\u0006\uffff\u0001\u0005", "\u0001\b\u0006\uffff\u0001\u0005", "\u0001\t\u0006\uffff\u0001\u0005", "", "\u0001\u0005\u0004\uffff\u0001\u0005\u0002\uffff\u0001\u0005\u0002\uffff\u0001\u0005\u0003\uffff\u0001\u0005\u0001\uffff\u0002\u0005\u0003\uffff\u0002\u0005\u0004\uffff\u0001\u0005\u0001\uffff\u0001\u0005\u0003\uffff\u0003\u0005\u0001\uffff\u0003\u0005\u0001\uffff\u0004\u0005\u0001\uffff\u0003\u0005\u0004\uffff\u0003\u0005\u0001\uffff\u0001\u0005\u0002\uffff\u0004\u0005\u0002\uffff\u0001\u0005\u0001\uffff\u0002\u0005\u0001\uffff\u0001\u0005\u0003\uffff\u0003\u0005\u0001\uffff\u0001\u0005\u0002\uffff\u0003\u0005\u0001\uffff\u0003\u0005\u0001\uffff\u0003\u0005\u0004\uffff\u0004\u0005\u0001\uffff\u0001\u0005\u0001\uffff\u0001\u0005\u0002\uffff\u0001\u0005\u0002\uffff\u0007\u0005\u0003\uffff\u0001\u0005\u0001\uffff\u0001\u0005\u0001\uffff\u0002\u0005\u0002\uffff\u000b\u0005\u0001\uffff\u0002\u0005\u0001\uffff\u0003\u0005\u0005\uffff\u0002\u0005\u0001\uffff\u0004\u0005\u0003\uffff\u0001\u0005\b\uffff\u0002\u0005\u0003\uffff\u0001\u0005\u0002\uffff\u0001\u0005\b\uffff\u0002\u0005\u0003\uffff\u0001\u0005\u0003\uffff\u0001\u0005\u0006\uffff\u0001\u0005\u0001\n\u0002\uffff\u0001\u0005", "", "", "", ""};
      DFA31_eot = DFA.unpackEncodedString("\u000b\uffff");
      DFA31_eof = DFA.unpackEncodedString("\u000b\uffff");
      DFA31_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0017\u0004Â\u0001\uffff\u0001\u0006\u0004\uffff");
      DFA31_max = DFA.unpackEncodedStringToUnsignedChars("\u0001²\u0004É\u0001\uffff\u0001Ö\u0004\uffff");
      DFA31_accept = DFA.unpackEncodedString("\u0005\uffff\u0001\u0005\u0001\uffff\u0001\u0002\u0001\u0003\u0001\u0004\u0001\u0001");
      DFA31_special = DFA.unpackEncodedString("\u000b\uffff}>");
      numStates = DFA31_transitionS.length;
      DFA31_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
      }

      DFA61_transitionS = new String[]{"\u0001\u0001\b\uffff\u0001\u0002\u0004\uffff\u0002\u0004\u0004\uffff\u0001\u0004\u0001\uffff\u0001\u0005\u0003\uffff\u0001\u0006\u0001\u0007\u0001\b\u0001\uffff\u0001\u0004\u0001\u001a\u0001\u0004\u0001\uffff\u0002\u0004\u0001\u001a\u0001\t\u0001\uffff\u0001\u0004\u0001\u0018\u0001\n\u0004\uffff\u0001\u0004\u0001\u001a\u0001\u000b\u0001\uffff\u0001\f\u0002\uffff\u0003\u0004\u0001\r\u0002\uffff\u0001\u0004\u0001\uffff\u0002\u0004\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u000e\u0002\u0004\u0001\uffff\u0001\u000f\u0002\uffff\u0002\u001a\u0001\u0004\u0001\uffff\u0003\u0004\u0001\uffff\u0003\u0004\u0004\uffff\u0001\u0004\u0002\uffff\u0001\u0004\u0001\uffff\u0001\u0004\u0004\uffff\u0001\u0004\u0002\uffff\u0005\u0004\u0005\uffff\u0001\u0004\u0001\uffff\u0001\u0004\u0001\uffff\u0002\u0004\u0002\uffff\u0001\u0004\u0001\u0010\u0004\u0004\u0001\u0011\u0001\u0019\u0001\u0012\u0001\u0017\u0001\u0013\u0002\uffff\u0001\u0004\u0001\uffff\u0001\u001a\u0002\u0004\u0005\uffff\u0002\u0004\u0001\uffff\u0001\u0014\u0001\u0004\u0001\u0015\u0001\u0016\u0003\uffff\u0001\u001a\t\uffff\u0001\u0003", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "\u0001\u001b}\uffff\u0001\u001b\u0002\uffff\u0001\u001d\b\uffff\u0001\u001c", "", "", ""};
      DFA61_eot = DFA.unpackEncodedString("\u001e\uffff");
      DFA61_eof = DFA.unpackEncodedString("\u001e\uffff");
      DFA61_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u000e\u001aH\u0003\uffff");
      DFA61_max = DFA.unpackEncodedStringToUnsignedChars("\u0001²\u001aÒ\u0003\uffff");
      DFA61_accept = DFA.unpackEncodedString("\u001b\uffff\u0001\u0001\u0001\u0002\u0001\u0003");
      DFA61_special = DFA.unpackEncodedString("\u001e\uffff}>");
      numStates = DFA61_transitionS.length;
      DFA61_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
      }

      DFA185_transitionS = new String[]{"\u0001\u0001\u0004\uffff\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u0005\u0001\u0006\u0001\u0007\u0001\uffff\u0001\u0003\u0001\u0019\u0001\u0003\u0001\uffff\u0002\u0003\u0001\u0019\u0001\b\u0001\uffff\u0001\u0003\u0001\u0017\u0001\t\u0004\uffff\u0001\u0003\u0001\u0019\u0001\n\u0001\uffff\u0001\u000b\u0002\uffff\u0003\u0003\u0001\f\u0002\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\r\u0002\u0003\u0001\uffff\u0001\u000e\u0002\uffff\u0002\u0019\u0001\u0003\u0001\uffff\u0003\u0003\u0001\uffff\u0003\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0005\u0003\u0005\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0002\uffff\u0001\u0003\u0001\u000f\u0004\u0003\u0001\u0010\u0001\u0018\u0001\u0011\u0001\u0016\u0001\u0012\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0019\u0002\u0003\u0005\uffff\u0002\u0003\u0001\uffff\u0001\u0013\u0001\u0003\u0001\u0014\u0001\u0015\u0003\uffff\u0001\u0019\b\uffff\u0001\u001a\u0001\u0002", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001b\u0002\uffff\u0001\u001c", "", ""};
      DFA185_eot = DFA.unpackEncodedString("\u001d\uffff");
      DFA185_eof = DFA.unpackEncodedString("\u0001\uffff\u001a\u001c\u0002\uffff");
      DFA185_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0017\u001aÉ\u0002\uffff");
      DFA185_max = DFA.unpackEncodedStringToUnsignedChars("\u0001²\u001aÌ\u0002\uffff");
      DFA185_accept = DFA.unpackEncodedString("\u001b\uffff\u0001\u0001\u0001\u0002");
      DFA185_special = DFA.unpackEncodedString("\u001d\uffff}>");
      numStates = DFA185_transitionS.length;
      DFA185_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
      }

      DFA186_transitionS = new String[]{"\u0001\u0001\u0004\uffff\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u0005\u0001\u0006\u0001\u0007\u0001\uffff\u0001\u0003\u0001\u0019\u0001\u0003\u0001\uffff\u0002\u0003\u0001\u0019\u0001\b\u0001\uffff\u0001\u0003\u0001\u0017\u0001\t\u0004\uffff\u0001\u0003\u0001\u0019\u0001\n\u0001\uffff\u0001\u000b\u0002\uffff\u0003\u0003\u0001\f\u0002\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\r\u0002\u0003\u0001\uffff\u0001\u000e\u0002\uffff\u0002\u0019\u0001\u0003\u0001\uffff\u0003\u0003\u0001\uffff\u0003\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0005\u0003\u0005\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0002\uffff\u0001\u0003\u0001\u000f\u0004\u0003\u0001\u0010\u0001\u0018\u0001\u0011\u0001\u0016\u0001\u0012\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0019\u0002\u0003\u0005\uffff\u0002\u0003\u0001\uffff\u0001\u0013\u0001\u0003\u0001\u0014\u0001\u0015\u0003\uffff\u0001\u0019\b\uffff\u0001\u001a\u0001\u0002", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "\u0001\u001c\u0002\uffff\u0002\u001c\u0002\uffff\u0001\u001c\u001c\uffff\u0001\u001c\b\uffff\u0001\u001c\u0005\uffff\u0001\u001c\n\uffff\u0001\u001c\u0006\uffff\u0001\u001c\u000b\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0003\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0004\uffff\u0002\u001c\b\uffff\u0001\u001c\u000b\uffff\u0001\u001c\r\uffff\u0001\u001c\u0005\uffff\u0002\u001c\u001a\uffff\u0001\u001c\u0006\uffff\u0001\u001b\u0002\uffff\u0001\u001c", "", ""};
      DFA186_eot = DFA.unpackEncodedString("\u001d\uffff");
      DFA186_eof = DFA.unpackEncodedString("\u0001\uffff\u001a\u001c\u0002\uffff");
      DFA186_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0017\u001a\u001b\u0002\uffff");
      DFA186_max = DFA.unpackEncodedStringToUnsignedChars("\u0001²\u001aÌ\u0002\uffff");
      DFA186_accept = DFA.unpackEncodedString("\u001b\uffff\u0001\u0001\u0001\u0002");
      DFA186_special = DFA.unpackEncodedString("\u001d\uffff}>");
      numStates = DFA186_transitionS.length;
      DFA186_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA186_transition[i] = DFA.unpackEncodedString(DFA186_transitionS[i]);
      }

      DFA204_transitionS = new String[]{"\u0001\u0001\u0004\uffff\u0001\u0001\u0005\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u0001P\uffff\u0002\u0001\u0004\uffff\u0001\u0005\n\uffff\u0002\u00015\uffff\u0001\u0007\u0004\uffff\u0001\u0001\u0002\uffff\u0001\u0001\b\uffff\u0001\u0004\b\uffff\u0001\u0006\u0006\uffff\u0001\u0002\u0003\uffff\u0001\u0003", "", "", "\u0001\u0002\u0004\uffff\u0001\u0002\u0005\uffff\u0001\u0002\u0003\uffff\u0001\u0002\u0001\uffff\u0001\b\u0001\u0002\u0003\uffff\u0002\n\u0004\uffff\u0001\n\u0001\uffff\u0001\u000b\u0003\uffff\u0001\f\u0001\r\u0001\u000e\u0001\uffff\u0001\n\u0001!\u0001\n\u0001\uffff\u0002\n\u0001 \u0001\u000f\u0001\uffff\u0001\n\u0001\u001e\u0001\u0010\u0004\uffff\u0001\n\u0001!\u0001\u0011\u0001\uffff\u0001\u0012\u0002\uffff\u0003\n\u0001\u0013\u0002\uffff\u0001\n\u0001\uffff\u0002\n\u0001\uffff\u0001\n\u0003\uffff\u0001\u0014\u0002\n\u0001\uffff\u0001\u0015\u0002\uffff\u0002!\u0001\n\u0001\uffff\u0003\n\u0001\uffff\u0003\n\u0004\uffff\u0001\n\u0002\u0002\u0001\n\u0001\uffff\u0001\n\u0001\uffff\u0001\u0002\u0002\uffff\u0001\n\u0002\uffff\u0005\n\u0002\u0002\u0003\uffff\u0001\n\u0001\uffff\u0001\n\u0001\uffff\u0002\n\u0002\uffff\u0001\n\u0001\u0016\u0004\n\u0001\u0017\u0001\u001f\u0001\u0018\u0001\u001d\u0001\u0019\u0001\uffff\u0001\u0002\u0001\n\u0001\uffff\u0001!\u0002\n\u0005\uffff\u0002\n\u0001\uffff\u0001\u001a\u0001\n\u0001\u001b\u0001\u001c\u0003\uffff\u0001!\b\uffff\u0001\u0002\u0001\t\u0003\uffff\u0001\u0002\u0002\uffff\u0001\u0002\b\uffff\u0001\u0002\u0004\uffff\u0001\u0002\u0003\uffff\u0001\u0002\u0006\uffff\u0001\u0002\u0003\uffff\u0002\u0002", "", "", "", "", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0006\uffff\u0001\u0002\u0001\uffff\u0001\"", "\u0001\u0002\u0001\uffff\u0001\"", ""};
      DFA204_eot = DFA.unpackEncodedString("#\uffff");
      DFA204_eof = DFA.unpackEncodedString("#\uffff");
      DFA204_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0006\u0002\uffff\u0001\u0006\u0004\uffff\u0019Â\u0001É\u0001\uffff");
      DFA204_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Ö\u0002\uffff\u0001×\u0004\uffff\u001aË\u0001\uffff");
      DFA204_accept = DFA.unpackEncodedString("\u0001\uffff\u0001\u0001\u0001\u0002\u0001\uffff\u0001\u0004\u0001\u0005\u0001\u0006\u0001\u0007\u001a\uffff\u0001\u0003");
      DFA204_special = DFA.unpackEncodedString("#\uffff}>");
      numStates = DFA204_transitionS.length;
      DFA204_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA204_transition[i] = DFA.unpackEncodedString(DFA204_transitionS[i]);
      }

      DFA206_transitionS = new String[]{"\u0001\u0001\u0004\uffff\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u0005\u0001\u0006\u0001\u0007\u0001\uffff\u0001\u0003\u0001\u001a\u0001\u0003\u0001\uffff\u0002\u0003\u0001\u0019\u0001\b\u0001\uffff\u0001\u0003\u0001\u0017\u0001\t\u0004\uffff\u0001\u0003\u0001\u001a\u0001\n\u0001\uffff\u0001\u000b\u0002\uffff\u0003\u0003\u0001\f\u0002\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\r\u0002\u0003\u0001\uffff\u0001\u000e\u0002\uffff\u0002\u001a\u0001\u0003\u0001\uffff\u0003\u0003\u0001\uffff\u0003\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0005\u0003\u0005\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0002\uffff\u0001\u0003\u0001\u000f\u0004\u0003\u0001\u0010\u0001\u0018\u0001\u0011\u0001\u0016\u0001\u0012\u0001\uffff\u0001\u001b\u0001\u0003\u0001\uffff\u0001\u001a\u0002\u0003\u0005\uffff\u0002\u0003\u0001\uffff\u0001\u0013\u0001\u0003\u0001\u0014\u0001\u0015\u0003\uffff\u0001\u001a\b\uffff\u0001\u001a\u0001\u0002", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "\u0001\u001b\u0006\uffff\u0001\u001a\u0002\uffff\u0001\u001b", "", ""};
      DFA206_eot = DFA.unpackEncodedString("\u001c\uffff");
      DFA206_eof = DFA.unpackEncodedString("\u0001\uffff\u0019\u001b\u0002\uffff");
      DFA206_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0017\u0019Â\u0002\uffff");
      DFA206_max = DFA.unpackEncodedStringToUnsignedChars("\u0001²\u0019Ì\u0002\uffff");
      DFA206_accept = DFA.unpackEncodedString("\u001a\uffff\u0001\u0001\u0001\u0002");
      DFA206_special = DFA.unpackEncodedString("\u001c\uffff}>");
      numStates = DFA206_transitionS.length;
      DFA206_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA206_transition[i] = DFA.unpackEncodedString(DFA206_transitionS[i]);
      }

      DFA208_transitionS = new String[]{"\u0001\u0001\u0004\uffff\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u0005\u0001\u0006\u0001\u0007\u0001\uffff\u0001\u0003\u0001\u001c\u0001\u0003\u0001\uffff\u0002\u0003\u0001\u0019\u0001\b\u0001\uffff\u0001\u0003\u0001\u0017\u0001\t\u0004\uffff\u0001\u0003\u0001\u001c\u0001\n\u0001\uffff\u0001\u000b\u0002\uffff\u0003\u0003\u0001\f\u0002\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\r\u0002\u0003\u0001\uffff\u0001\u000e\u0002\uffff\u0002\u001c\u0001\u0003\u0001\uffff\u0003\u0003\u0001\uffff\u0003\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0005\u0003\u0005\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0002\uffff\u0001\u0003\u0001\u000f\u0004\u0003\u0001\u0010\u0001\u0018\u0001\u0011\u0001\u0016\u0001\u0012\u0001\uffff\u0001\u001b\u0001\u0003\u0001\uffff\u0001\u001c\u0002\u0003\u0005\uffff\u0002\u0003\u0001\uffff\u0001\u0013\u0001\u0003\u0001\u0014\u0001\u0015\u0003\uffff\u0001\u001c\b\uffff\u0001\u001a\u0001\u0002", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001e\u0006\uffff\u0001\u001d", "\u0001\u001d", "\u0001\u001e", "\u0001\u001d", "\u0001\u001f\u0004\uffff\u0002!\u0004\uffff\u0001!\u0001\uffff\u0001\"\u0003\uffff\u0001#\u0001$\u0001%\u0001\uffff\u0001!\u0001\uffff\u0001!\u0001\uffff\u0002!\u00017\u0001&\u0001\uffff\u0001!\u00015\u0001'\u0004\uffff\u0001!\u0001\uffff\u0001(\u0001\uffff\u0001)\u0002\uffff\u0003!\u0001*\u0002\uffff\u0001!\u0001\uffff\u0002!\u0001\uffff\u0001!\u0003\uffff\u0001+\u0002!\u0001\uffff\u0001,\u0004\uffff\u0001!\u0001\uffff\u0003!\u0001\uffff\u0003!\u0004\uffff\u0001!\u0002\uffff\u0001!\u0001\uffff\u0001!\u0004\uffff\u0001!\u0002\uffff\u0005!\u0005\uffff\u0001!\u0001\uffff\u0001!\u0001\uffff\u0002!\u0002\uffff\u0001!\u0001-\u0004!\u0001.\u00016\u0001/\u00014\u00010\u0001\uffff\u0001\u001b\u0001!\u0002\uffff\u0002!\u0005\uffff\u0002!\u0001\uffff\u00011\u0001!\u00012\u00013\r\uffff\u0001 ", "\u00019\u0004\uffff\u00019\u0005\uffff\u00019\u0003\uffff\u00019\u0001\uffff\u00029\u0003\uffff\u00029\u0004\uffff\u00019\u0001\uffff\u00019\u0003\uffff\u00039\u0001\uffff\u00039\u0001\uffff\u00049\u0001\uffff\u00039\u0004\uffff\u00039\u0001\uffff\u00019\u0002\uffff\u00049\u0002\uffff\u00019\u0001\uffff\u00029\u0001\uffff\u00019\u0003\uffff\u00039\u0001\uffff\u00019\u0002\uffff\u00039\u0001\uffff\u00039\u0001\uffff\u00039\u0004\uffff\u00049\u0001\uffff\u00019\u0001\uffff\u00019\u0002\uffff\u00019\u0002\uffff\u00079\u0003\uffff\u00019\u0001\uffff\u00019\u0001\uffff\u00029\u0002\uffff\u000b9\u0001\uffff\u00029\u0001\uffff\u00039\u0005\uffff\u00029\u0001\uffff\u00049\u0003\uffff\u00019\b\uffff\u00029\u0003\uffff\u00019\u0002\uffff\u00019\b\uffff\u00019\u00018\u0003\uffff\u00019\u0003\uffff\u00019\u0006\uffff\u00019\u0003\uffff\u00019", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "\u0001\u001e", "", ""};
      DFA208_eot = DFA.unpackEncodedString(":\uffff");
      DFA208_eof = DFA.unpackEncodedString(":\uffff");
      DFA208_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0017\u0019Â\u0001É\u0001Â\u0001É\u0001\u0017\u0001\u0006\u0019Â\u0002\uffff");
      DFA208_max = DFA.unpackEncodedStringToUnsignedChars("\u0001²\u001aÉ\u0001Â\u0001É\u0001²\u0001Ö\u0019Â\u0002\uffff");
      DFA208_accept = DFA.unpackEncodedString("8\uffff\u0001\u0001\u0001\u0002");
      DFA208_special = DFA.unpackEncodedString(":\uffff}>");
      numStates = DFA208_transitionS.length;
      DFA208_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA208_transition[i] = DFA.unpackEncodedString(DFA208_transitionS[i]);
      }

      DFA210_transitionS = new String[]{"\u0001\u0001\u0001\uffff\u0002\u0001\u0017\uffff\u0001\u0001\u0002\uffff\u0001\u0001\u0011\uffff\u0002\u0001\u0005\uffff\u0001\u0001\n\uffff\u0001\u0001\u0013\uffff\u0001\u0001\u0002\uffff\u0001\u0001\u0004\uffff\u0001\u0001\u001f\uffff\u0001\u0001\t\uffff\u0001\u0001\r\uffff\u0001\u0001\u000e\uffff\u0001\u0001\u0001\u0002\u0001\uffff\u0001\u0001\u0001\u0003\u0003\uffff\u0002\u0001\u0007\uffff\u0001\u0001\u0002\uffff\u0001\u0001", "", "\u0001\u001d\u0004\uffff\u0001\u001d\u0002\uffff\u0001\u0001\u0002\uffff\u0001\u001d\u0003\uffff\u0001\u001d\u0001\uffff\u0001\u0004\u0001\u001d\u0003\uffff\u0002\u0006\u0004\uffff\u0001\u0006\u0001\uffff\u0001\u0007\u0003\uffff\u0001\b\u0001\t\u0001\n\u0001\uffff\u0001\u0006\u0001\u001e\u0001\u0006\u0001\uffff\u0002\u0006\u0001\u001c\u0001\u000b\u0001\uffff\u0001\u0006\u0001\u001a\u0001\f\u0004\uffff\u0001\u0006\u0001\u001e\u0001\r\u0001\uffff\u0001\u000e\u0002\uffff\u0003\u0006\u0001\u000f\u0002\uffff\u0001\u0006\u0001\uffff\u0002\u0006\u0001\uffff\u0001\u0006\u0003\uffff\u0001\u0010\u0002\u0006\u0001\uffff\u0001\u0011\u0002\uffff\u0002\u001e\u0001\u0006\u0001\uffff\u0003\u0006\u0001\uffff\u0003\u0006\u0004\uffff\u0001\u0006\u0002\u001d\u0001\u0006\u0001\uffff\u0001\u0006\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u0006\u0002\uffff\u0005\u0006\u0002\u001d\u0003\uffff\u0001\u0006\u0001\uffff\u0001\u0006\u0001\uffff\u0002\u0006\u0002\uffff\u0001\u0006\u0001\u0012\u0004\u0006\u0001\u0013\u0001\u001b\u0001\u0014\u0001\u0019\u0001\u0015\u0001\uffff\u0001\u001d\u0001\u0006\u0001\uffff\u0001\u001e\u0002\u0006\u0005\uffff\u0002\u0006\u0001\uffff\u0001\u0016\u0001\u0006\u0001\u0017\u0001\u0018\u0003\uffff\u0001\u001e\b\uffff\u0001\u001d\u0001\u0005\u0003\uffff\u0001\u001d\u0002\uffff\u0001\u001d\b\uffff\u0001\u001d\u0004\uffff\u0001\u001d\u0003\uffff\u0001\u001d\u0006\uffff\u0001\u001d\u0003\uffff\u0001\u001d", "", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "\u0001\u0001\u001b\uffff\u0001\u001d\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u001d", "", "\u0001\u0001\u001f\uffff\u0001\u0001\u0002\uffff\u0001\u001d"};
      DFA210_eot = DFA.unpackEncodedString("\u001f\uffff");
      DFA210_eof = DFA.unpackEncodedString("\u0001\u0001\u001e\uffff");
      DFA210_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u001e\u0001\uffff\u0001\u0006\u0001\uffff\u0019¦\u0001\uffff\u0001¦");
      DFA210_max = DFA.unpackEncodedStringToUnsignedChars("\u0001×\u0001\uffff\u0001Ö\u0001\uffff\u0019É\u0001\uffff\u0001É");
      DFA210_accept = DFA.unpackEncodedString("\u0001\uffff\u0001\u0003\u0001\uffff\u0001\u0002\u0019\uffff\u0001\u0001\u0001\uffff");
      DFA210_special = DFA.unpackEncodedString("\u001f\uffff}>");
      numStates = DFA210_transitionS.length;
      DFA210_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA210_transition[i] = DFA.unpackEncodedString(DFA210_transitionS[i]);
      }

      DFA213_transitionS = new String[]{"\u0001\u0001\u0004\uffff\u0001\u0001\u0005\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0001\uffff\u0001\u0004\u0001\u0001\u0003\uffff\u0002\u0004\u0004\uffff\u0001\u0004\u0001\uffff\u0001\u0004\u0003\uffff\u0003\u0004\u0001\uffff\u0003\u0004\u0001\uffff\u0004\u0004\u0001\uffff\u0003\u0004\u0004\uffff\u0003\u0004\u0001\uffff\u0001\u0004\u0002\uffff\u0004\u0004\u0002\uffff\u0001\u0004\u0001\uffff\u0002\u0004\u0001\uffff\u0001\u0004\u0003\uffff\u0003\u0004\u0001\uffff\u0001\u0004\u0002\uffff\u0003\u0004\u0001\uffff\u0003\u0004\u0001\uffff\u0003\u0004\u0004\uffff\u0001\u0004\u0002\u0001\u0001\u0004\u0001\uffff\u0001\u0004\u0001\uffff\u0001\u0001\u0002\uffff\u0001\u0004\u0002\uffff\u0005\u0004\u0002\u0001\u0003\uffff\u0001\u0004\u0001\uffff\u0001\u0004\u0001\uffff\u0002\u0004\u0002\uffff\u000b\u0004\u0001\uffff\u0002\u0004\u0001\uffff\u0003\u0004\u0005\uffff\u0002\u0004\u0001\uffff\u0004\u0004\u0003\uffff\u0001\u0004\b\uffff\u0001\u0003\u0001\u0004\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u0001\b\uffff\u0001\u0002\b\uffff\u0001\u0001\u0006\uffff\u0001\u0001\u0003\uffff\u0001\u0001", "", "\u0001\u0001\u0004\uffff\u0001\u0001\u0005\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0001\uffff\u0001\u0006\u0001\u0001\u0003\uffff\u0002%\u0004\uffff\u0001%\u0001\uffff\u0001\t\u0003\uffff\u0001\n\u0001\u000b\u0001\f\u0001\uffff\u0001%\u0001#\u0001%\u0001\uffff\u0002%\u0001\u001e\u0001\r\u0001\uffff\u0001%\u0001\u001c\u0001\u000e\u0004\uffff\u0001%\u0001#\u0001\u000f\u0001\uffff\u0001\u0010\u0002\uffff\u0003%\u0001\u0011\u0002\uffff\u0001!\u0001\uffff\u0002%\u0001\uffff\u0001%\u0003\uffff\u0001\u0012\u0002%\u0001\uffff\u0001\u0013\u0002\uffff\u0001#\u0001\u001f\u0001%\u0001\uffff\u0003%\u0001\uffff\u0001 \u0001%\u0001\b\u0004\uffff\u0001%\u0002\u0001\u0001%\u0001\uffff\u0001%\u0001\uffff\u0001\u0001\u0002\uffff\u0001%\u0002\uffff\u0005%\u0002\u0001\u0003\uffff\u0001%\u0001\uffff\u0001%\u0001\uffff\u0002%\u0001\uffff\u0001\"\u0001%\u0001\u0014\u0004%\u0001\u0015\u0001\u001d\u0001\u0016\u0001\u001b\u0001\u0017\u0001\uffff\u0001\u0001\u0001%\u0001\uffff\u0001#\u0001$\u0001%\u0005\uffff\u0002%\u0001\uffff\u0001\u0018\u0001%\u0001\u0019\u0001\u001a\u0003\uffff\u0001#\b\uffff\u0001\u0001\u0001\u0007\u0003\uffff\u0001\u0005\u0002\uffff\u0001\u0001\b\uffff\u0001\u0001\u0004\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0006\uffff\u0001\u0001\u0003\uffff\u0001\u0001", "\u0001\u0001\u0001\uffff\u0002\u0001\u0017\uffff\u0001\u0001\u0002\uffff\u0001\u0001\u0011\uffff\u0002\u0001\u0005\uffff\u0001\u0001\n\uffff\u0001\u0001\u0013\uffff\u0001\u0001\u0002\uffff\u0001\u0001\u0004\uffff\u0001\u0001\u001f\uffff\u0001\u0001\t\uffff\u0001\u0001\r\uffff\u0001\u0001\f\uffff\u0001\u0001\u0001\uffff\u0002\u0001\u0001\uffff\u0002\u0001\u0001\uffff\u0001\u0004\u0003\u0001\u0006\uffff\u0002\u0001\u0002\uffff\u0001\u0001", "", "\u0001\u0001\u0001\uffff\u0001&\u0001\u0001\u0001\uffff\u0002\u0001\u0002\uffff\u0001\u0001\b\uffff\u0001\u0001", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'\u0003\uffff\u0001\"", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0006\uffff\u0001'", "\u0001\"\u0005\uffff\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'\u0003\uffff\u0001\"", "\u0001\u0001\u0001\"\u0005\uffff\u0001'\u0003\uffff\u0001\"", "", "\u0001'", "\u0001\u0001\u0001\"\u0005\uffff\u0001'\u0003\uffff\u0001\"", "\u0001\u0001\u0001\"\u0005\uffff\u0001'", "\u0001\"\u0004\uffff\u0001\"\u0005\uffff\u0001\"\u0003\uffff\u0001\"\u0001\uffff\u0002\"\u0003\uffff\u0002\"\u0001\u0001\u0001\uffff\u0002\u0001\u0001\"\u0001\uffff\u0001\"\u0003\uffff\u0003\"\u0001\uffff\u0003\"\u0001\uffff\u0004\"\u0001\uffff\u0003\"\u0001\uffff\u0001\u0001\u0002\uffff\u0001(\u0002\"\u0001\uffff\u0001\"\u0002\uffff\u0004\"\u0002\uffff\u0001\"\u0001\uffff\u0002\"\u0001\uffff\u0001*\u0001\u0001\u0002\uffff\u0003\"\u0001\u0001\u0001\"\u0002\uffff\u0003\"\u0001\uffff\u0003\"\u0001\u0001\u0003\"\u0004\uffff\u0004\"\u0001\uffff\u0001\"\u0001\uffff\u0001\"\u0002\uffff\u0001\"\u0001\uffff\u0001\u0001\u0002\"\u0001+\u0004\"\u0001\u0001\u0002\uffff\u0001\"\u0001\uffff\u0001\"\u0001\uffff\u0002\"\u0002\uffff\u000b\"\u0001\uffff\u0002\"\u0001\uffff\u0003\"\u0003\uffff\u0001\u0001\u0001\uffff\u0002\"\u0001\uffff\u0004\"\u0001\uffff\u0001\u0001\u0001\uffff\u0001\"\b\uffff\u0002\"\u0001\uffff\u0001\u0001\u0001\uffff\u0001\"\u0002\uffff\u0001\"\u0007\uffff\u0001\u0001\u0001\"\u0002\u0001\u0001\uffff\u0002\u0001\u0002\uffff\u0001\u0001\u0001)\u0001\u0001\u0005\uffff\u0001\"\u0002\u0001\u0001\uffff\u0001\"\u0001\u0001", "\u0001,\u0004\uffff\u0002.\u0004\uffff\u0001.\u0001\uffff\u0001\u0001\u0003\uffff\u0003\u0001\u0001\uffff\u0001.\u0001\uffff\u0001.\u0001\uffff\u0002.\u0002\u0001\u0001\uffff\u0001.\u0002\u0001\u0004\uffff\u0001.\u0001\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0002\uffff\u0003.\u0001\u0001\u0002\uffff\u0001.\u0001\uffff\u0002.\u0001\uffff\u0001.\u0003\uffff\u0001\u0001\u0002.\u0001\uffff\u0001\u0001\u0003\uffff\u0001\"\u0001.\u0001\uffff\u0003.\u0001\uffff\u0003.\u0004\uffff\u0001.\u0002\uffff\u0001.\u0001\uffff\u0001.\u0004\uffff\u0001.\u0002\uffff\u0005.\u0005\uffff\u0001.\u0001\uffff\u0001.\u0001\uffff\u0002.\u0002\uffff\u0001.\u0001\u0001\u0004.\u0005\u0001\u0001\uffff\u0001\u0001\u0001.\u0002\uffff\u0002.\u0005\uffff\u0002.\u0001\uffff\u0001\u0001\u0001.\u0002\u0001\r\uffff\u0001-", "\u0001\"\u0006\uffff\u0001\"\u0002\uffff\u0001\u0001", "\u0001\u0001\u0004\uffff\u0001\u0001\u0005\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0001\uffff\u0001/\u0001\u0001\u0003\uffff\u00021\u0004\uffff\u00011\u0001\uffff\u00012\u0003\uffff\u00013\u00014\u00015\u0001\uffff\u00011\u0001H\u00011\u0001\uffff\u00021\u0001G\u00016\u0001\uffff\u00011\u0001E\u00017\u0004\uffff\u00011\u0001H\u00018\u0001\uffff\u00019\u0002\uffff\u00031\u0001:\u0002\uffff\u00011\u0001\uffff\u00021\u0001\uffff\u00011\u0003\uffff\u0001;\u00021\u0001\uffff\u0001<\u0002\uffff\u0002H\u00011\u0001\uffff\u00031\u0001\uffff\u00031\u0004\uffff\u00011\u0002\u0001\u00011\u0001\uffff\u00011\u0001\uffff\u0001\u0001\u0002\uffff\u00011\u0002\uffff\u00051\u0002\u0001\u0003\uffff\u00011\u0001\uffff\u00011\u0001\uffff\u00021\u0002\uffff\u00011\u0001=\u00041\u0001>\u0001F\u0001?\u0001D\u0001@\u0001\uffff\u0001\u0001\u00011\u0001\uffff\u0001H\u00021\u0005\uffff\u00021\u0001\uffff\u0001A\u00011\u0001B\u0001C\u0003\uffff\u0001H\b\uffff\u0001\u0001\u00010\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u0001\b\uffff\u0001\u0001\u0004\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0006\uffff\u0001\u0001\u0003\uffff\u0001\u0001", "\u0001\u0001\u0096\uffff\u0001\"\u0006\uffff\u0001\"", "\u0001\u0001L\uffff\u0001\"\u0006\uffff\u0001\"", "\u0001\u0001\u0001\"", "\u0001\u0001\u0001\"", "\u0001\u0001\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\u0001\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\"", "\u0001\"\u0001\uffff\u0002\"\u0017\uffff\u0001\"\u0002\uffff\u0001\"\u0011\uffff\u0002\"\u0005\uffff\u0001\"\n\uffff\u0001\"\u0013\uffff\u0001\"\u0002\uffff\u0001\"\u0004\uffff\u0001\"\u001f\uffff\u0001\"\t\uffff\u0001\"\r\uffff\u0001\"\f\uffff\u0001\"\u0001\uffff\u0002\"\u0001\uffff\u0002\"\u0001\uffff\u0001\u0001\u0003\"\u0006\uffff\u0002\"\u0002\uffff\u0001\""};
      DFA213_eot = DFA.unpackEncodedString("I\uffff");
      DFA213_eof = DFA.unpackEncodedString("\u0003\uffff\u0001\u0001\"\uffff\u0001\u0001\u0001\uffff\u0001\u0001\u0006\uffff\u001a\"");
      DFA213_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0006\u0001\uffff\u0001\u0006\u0001\u001e\u0001\uffff\u0001Á\u0019Â\u0001Ã\u0002Â\u0001\uffff\u0001É\u0002Â\u0001\u0006\u0001\u0017\u0001Â\u0001\u0006\u0001+\u0001u\u0003Â\u001a\u001e");
      DFA213_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Ö\u0001\uffff\u0001Ö\u0001×\u0001\uffff\u0001Ó\u0002É\u0001Í\u0017É\u0002Í\u0001\uffff\u0001É\u0001Í\u0001É\u0001×\u0001²\u0001Ì\u0001Ö\u0002É\u0003Ã\u001a×");
      DFA213_accept = DFA.unpackEncodedString("\u0001\uffff\u0001\u0001\u0002\uffff\u0001\u0002\u001d\uffff\u0001\u0003&\uffff");
      DFA213_special = DFA.unpackEncodedString("I\uffff}>");
      numStates = DFA213_transitionS.length;
      DFA213_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA213_transition[i] = DFA.unpackEncodedString(DFA213_transitionS[i]);
      }

      DFA216_transitionS = new String[]{"\u0001\u0001\u0004\uffff\u0001\u0001\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0001\uffff\u0001\u0002\u0001\u0001\u0003\uffff\u0002\u0004\u0004\uffff\u0001\u0004\u0001\uffff\u0001\u0005\u0003\uffff\u0001\u0006\u0001\u0007\u0001\b\u0001\uffff\u0001\u0004\u0001\u001b\u0001\u0004\u0001\uffff\u0002\u0004\u0001\u001a\u0001\t\u0001\uffff\u0001\u0004\u0001\u0018\u0001\n\u0004\uffff\u0001\u0004\u0001\u001b\u0001\u000b\u0001\uffff\u0001\f\u0002\uffff\u0003\u0004\u0001\r\u0002\uffff\u0001\u0004\u0001\uffff\u0002\u0004\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u000e\u0002\u0004\u0001\uffff\u0001\u000f\u0002\uffff\u0002\u001b\u0001\u0004\u0001\uffff\u0003\u0004\u0001\uffff\u0003\u0004\u0004\uffff\u0001\u0004\u0002\u0001\u0001\u0004\u0001\uffff\u0001\u0004\u0001\uffff\u0001\u0001\u0002\uffff\u0001\u0004\u0002\uffff\u0005\u0004\u0002\u0001\u0003\uffff\u0001\u0004\u0001\uffff\u0001\u0004\u0001\uffff\u0002\u0004\u0002\uffff\u0001\u0004\u0001\u0010\u0004\u0004\u0001\u0011\u0001\u0019\u0001\u0012\u0001\u0017\u0001\u0013\u0001\uffff\u0001\u0001\u0001\u0004\u0001\uffff\u0001\u001b\u0002\u0004\u0005\uffff\u0002\u0004\u0001\uffff\u0001\u0014\u0001\u0004\u0001\u0015\u0001\u0016\u0003\uffff\u0001\u001b\b\uffff\u0001\u0001\u0001\u0003\u0003\uffff\u0001\u0001\u0002\uffff\u0001\u0001\b\uffff\u0001\u0001\u0004\uffff\u0001\u0001\u0003\uffff\u0001\u0001\u0006\uffff\u0001\u0001\u0003\uffff\u0001\u0001", "", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e©\uffff\u0001\u0001\u0001\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e«\uffff\u0001\u001d\u0002\uffff\u0001\u001d\u0001\uffff\u0001\u0001", "\u0001\u001e«\uffff\u0001\u001d\u0002\uffff\u0001\u001d", "", ""};
      DFA216_eot = DFA.unpackEncodedString("\u001f\uffff");
      DFA216_eof = DFA.unpackEncodedString("\u001f\uffff");
      DFA216_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0006\u0001\uffff\u001b\u0018\u0002\uffff");
      DFA216_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Ö\u0001\uffff\u001aÉ\u0001Ç\u0002\uffff");
      DFA216_accept = DFA.unpackEncodedString("\u0001\uffff\u0001\u0001\u001b\uffff\u0001\u0002\u0001\u0003");
      DFA216_special = DFA.unpackEncodedString("\u001f\uffff}>");
      numStates = DFA216_transitionS.length;
      DFA216_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA216_transition[i] = DFA.unpackEncodedString(DFA216_transitionS[i]);
      }

      DFA224_transitionS = new String[]{"\u0001\u0001\u0004\uffff\u0002\u0003\u0004\uffff\u0001\u0003\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u0005\u0001\u0006\u0001\u0007\u0001\uffff\u0001\u0003\u0001\u0019\u0001\u0003\u0001\uffff\u0002\u0003\u0001\u0019\u0001\b\u0001\uffff\u0001\u0003\u0001\u0017\u0001\t\u0004\uffff\u0001\u0003\u0001\u0019\u0001\n\u0001\uffff\u0001\u000b\u0002\uffff\u0003\u0003\u0001\f\u0002\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0001\uffff\u0001\u0003\u0003\uffff\u0001\r\u0002\u0003\u0001\uffff\u0001\u000e\u0002\uffff\u0002\u0019\u0001\u0003\u0001\uffff\u0003\u0003\u0001\uffff\u0003\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0004\uffff\u0001\u0003\u0002\uffff\u0005\u0003\u0005\uffff\u0001\u0003\u0001\uffff\u0001\u0003\u0001\uffff\u0002\u0003\u0002\uffff\u0001\u0003\u0001\u000f\u0004\u0003\u0001\u0010\u0001\u0018\u0001\u0011\u0001\u0016\u0001\u0012\u0002\uffff\u0001\u0003\u0001\uffff\u0001\u0019\u0002\u0003\u0005\uffff\u0002\u0003\u0001\uffff\u0001\u0013\u0001\u0003\u0001\u0014\u0001\u0015\u0003\uffff\u0001\u0019\t\uffff\u0001\u0002", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001a", "\u0001\u001b\u0004\uffff\u0001\u001b\u0005\uffff\u0001\u001b\u0003\uffff\u0001\u001b\u0002\uffff\u0001\u001b\u0003\uffff\u0002\u001b\u0004\uffff\u0001\u001b\u0001\uffff\u0001\u001b\u0003\uffff\u0003\u001b\u0001\uffff\u0003\u001b\u0001\uffff\u0004\u001b\u0001\uffff\u0003\u001b\u0004\uffff\u0003\u001b\u0001\uffff\u0001\u001b\u0002\uffff\u0004\u001b\u0002\uffff\u0001\u001b\u0001\uffff\u0002\u001b\u0001\uffff\u0001\u001b\u0003\uffff\u0003\u001b\u0001\uffff\u0001\u001b\u0002\uffff\u0003\u001b\u0001\uffff\u0003\u001b\u0001\uffff\u0003\u001b\u0004\uffff\u0004\u001b\u0001\uffff\u0001\u001b\u0004\uffff\u0001\u001b\u0002\uffff\u0007\u001b\u0003\uffff\u0001\u001b\u0001\uffff\u0001\u001b\u0001\uffff\u0002\u001b\u0002\uffff\u000b\u001b\u0002\uffff\u0001\u001b\u0001\uffff\u0003\u001b\u0005\uffff\u0002\u001b\u0001\uffff\u0004\u001b\u0003\uffff\u0001\u001b\r\uffff\u0001\u001b\u0002\uffff\u0001\u001b\u001c\uffff\u0001\u001c", "", ""};
      DFA224_eot = DFA.unpackEncodedString("\u001d\uffff");
      DFA224_eof = DFA.unpackEncodedString("\u001d\uffff");
      DFA224_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0017\u0019Ï\u0001\u0006\u0002\uffff");
      DFA224_max = DFA.unpackEncodedStringToUnsignedChars("\u0001²\u0019Ï\u0001Ö\u0002\uffff");
      DFA224_accept = DFA.unpackEncodedString("\u001b\uffff\u0001\u0001\u0001\u0002");
      DFA224_special = DFA.unpackEncodedString("\u001d\uffff}>");
      numStates = DFA224_transitionS.length;
      DFA224_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA224_transition[i] = DFA.unpackEncodedString(DFA224_transitionS[i]);
      }

      DFA229_transitionS = new String[]{"\u0001\u0001\b\uffff\u0001\u0002\u0004\uffff\u0002\u0004\u0004\uffff\u0001\u0004\u0001\uffff\u0001\u0005\u0003\uffff\u0001\u0006\u0001\u0007\u0001\b\u0001\uffff\u0001\u0004\u0001\u001a\u0001\u0004\u0001\uffff\u0002\u0004\u0001\u001a\u0001\t\u0001\uffff\u0001\u0004\u0001\u0018\u0001\n\u0004\uffff\u0001\u0004\u0001\u001a\u0001\u000b\u0001\uffff\u0001\f\u0002\uffff\u0003\u0004\u0001\r\u0002\uffff\u0001\u0004\u0001\uffff\u0002\u0004\u0001\uffff\u0001\u0004\u0003\uffff\u0001\u000e\u0002\u0004\u0001\uffff\u0001\u000f\u0002\uffff\u0002\u001a\u0001\u0004\u0001\uffff\u0003\u0004\u0001\uffff\u0003\u0004\u0004\uffff\u0001\u0004\u0002\uffff\u0001\u0004\u0001\uffff\u0001\u0004\u0004\uffff\u0001\u0004\u0002\uffff\u0005\u0004\u0005\uffff\u0001\u0004\u0001\uffff\u0001\u0004\u0001\uffff\u0002\u0004\u0002\uffff\u0001\u0004\u0001\u0010\u0004\u0004\u0001\u0011\u0001\u0019\u0001\u0012\u0001\u0017\u0001\u0013\u0001\uffff\u0001\u001b\u0001\u0004\u0001\uffff\u0001\u001a\u0002\u0004\u0005\uffff\u0002\u0004\u0001\uffff\u0001\u0014\u0001\u0004\u0001\u0015\u0001\u0016\u0003\uffff\u0001\u001a\t\uffff\u0001\u0003\u000f\uffff\u0001\u001c", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "\u0001!\u001e\uffff\u0001 \u0007\uffff\u0001\u001f\u0006\uffff\u0001\u001e`\uffff\u0001\u001d\f\uffff\u0005\u001d\u0001\"", "", "\u0001#\b\uffff\u0001$\u0004\uffff\u0002&\u0004\uffff\u0001&\u0001\uffff\u0001'\u0003\uffff\u0001(\u0001)\u0001*\u0001\uffff\u0001&\u0001<\u0001&\u0001\uffff\u0002&\u0001<\u0001+\u0001\uffff\u0001&\u0001:\u0001,\u0004\uffff\u0001&\u0001<\u0001-\u0001\uffff\u0001.\u0002\uffff\u0003&\u0001/\u0002\uffff\u0001&\u0001\uffff\u0002&\u0001\uffff\u0001&\u0003\uffff\u00010\u0002&\u0001\uffff\u00011\u0002\uffff\u0002<\u0001&\u0001\uffff\u0003&\u0001\uffff\u0003&\u0004\uffff\u0001&\u0002\uffff\u0001&\u0001\uffff\u0001&\u0004\uffff\u0001&\u0002\uffff\u0005&\u0005\uffff\u0001&\u0001\uffff\u0001&\u0001\uffff\u0002&\u0002\uffff\u0001&\u00012\u0004&\u00013\u0001;\u00014\u00019\u00015\u0001\uffff\u0001=\u0001&\u0001\uffff\u0001<\u0002&\u0005\uffff\u0002&\u0001\uffff\u00016\u0001&\u00017\u00018\u0003\uffff\u0001<\t\uffff\u0001%\u000f\uffff\u0001=", "", "", "", "\u0001>\u0010\uffff\u0001?\b\uffff\u0001>", "", "", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "\u0001=\u001e\uffff\u0001=\u0007\uffff\u0001=\u0006\uffff\u0001=`\uffff\u0001=\u0002\uffff\u0001@\u0002\uffff\u0001@\u0006\uffff\u0006=", "", "", "", ""};
      DFA229_eot = DFA.unpackEncodedString("A\uffff");
      DFA229_eof = DFA.unpackEncodedString("A\uffff");
      DFA229_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u000e\u001a1\u0001\uffff\u0001\u000e\u0003\uffff\u0001±\u0002\uffff\u001a1\u0004\uffff");
      DFA229_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Â\u001aÒ\u0001\uffff\u0001Â\u0003\uffff\u0001Ë\u0002\uffff\u001aÒ\u0004\uffff");
      DFA229_accept = DFA.unpackEncodedString("\u001b\uffff\u0001\u0004\u0001\uffff\u0001\u0001\u0001\u0002\u0001\u0003\u0001\uffff\u0001\u0007\u0001\b\u001a\uffff\u0001\n\u0001\u0005\u0001\u0006\u0001\t");
      DFA229_special = DFA.unpackEncodedString("A\uffff}>");
      numStates = DFA229_transitionS.length;
      DFA229_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA229_transition[i] = DFA.unpackEncodedString(DFA229_transitionS[i]);
      }

      DFA228_transitionS = new String[]{"\u0001\u0001o\uffff\u0001\u0007\f\uffff\u0001\u0003\u0001\u0004\u0001\u0002\u0001\u0005\u0001\u0006", "", "\u0001\t\u0010\uffff\u0001\b\b\uffff\u0001\t", "\u0001\t\u0010\uffff\u0001\b\b\uffff\u0001\t", "\u0001\t\u0010\uffff\u0001\b\b\uffff\u0001\t", "\u0001\t\u0010\uffff\u0001\b\b\uffff\u0001\t", "\u0001\t\u0010\uffff\u0001\b\b\uffff\u0001\t", "\u0001\t\u0010\uffff\u0001\b\b\uffff\u0001\t", "", ""};
      DFA228_eot = DFA.unpackEncodedString("\n\uffff");
      DFA228_eof = DFA.unpackEncodedString("\n\uffff");
      DFA228_min = DFA.unpackEncodedStringToUnsignedChars("\u0001P\u0001\uffff\u0006±\u0002\uffff");
      DFA228_max = DFA.unpackEncodedStringToUnsignedChars("\u0001Ñ\u0001\uffff\u0006Ë\u0002\uffff");
      DFA228_accept = DFA.unpackEncodedString("\u0001\uffff\u0001\u0001\u0006\uffff\u0001\u0002\u0001\u0003");
      DFA228_special = DFA.unpackEncodedString("\n\uffff}>");
      numStates = DFA228_transitionS.length;
      DFA228_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA228_transition[i] = DFA.unpackEncodedString(DFA228_transitionS[i]);
      }

      DFA239_transitionS = new String[]{"\u0001\u0019\u0004\uffff\u0002\u0019\u0004\uffff\u0001\u0019\u0001\uffff\u0001\u0001\u0003\uffff\u0001\u0002\u0001\u0003\u0001\u0004\u0001\uffff\u0003\u0019\u0001\uffff\u0003\u0019\u0001\u0005\u0001\uffff\u0001\u0019\u0001\u0014\u0001\u0006\u0004\uffff\u0002\u0019\u0001\u0007\u0001\uffff\u0001\b\u0002\uffff\u0003\u0019\u0001\t\u0002\uffff\u0001\u001a\u0001\uffff\u0002\u0019\u0001\uffff\u0001\u0019\u0003\uffff\u0001\n\u0002\u0019\u0001\uffff\u0001\u000b\u0002\uffff\u0003\u0019\u0001\uffff\u0003\u0019\u0001\uffff\u0001\u0017\u0001\u0019\u0001\u0016\u0004\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0001\uffff\u0001\u0019\u0004\uffff\u0001\u0019\u0002\uffff\u0005\u0019\u0005\uffff\u0001\u0019\u0001\uffff\u0001\u0019\u0001\uffff\u0002\u0019\u0001\uffff\u0001\u0018\u0001\u0019\u0001\f\u0004\u0019\u0001\r\u0001\u0015\u0001\u000e\u0001\u0013\u0001\u000f\u0002\uffff\u0001\u0019\u0001\uffff\u0003\u0019\u0005\uffff\u0002\u0019\u0001\uffff\u0001\u0010\u0001\u0019\u0001\u0011\u0001\u0012\u0003\uffff\u0001\u0019\t\uffff\u0001\u0019\u0003\uffff\u0001\u001b", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u001c\b\uffff\u0001\u001c\r\uffff\u0001\u001c\n\uffff\u0001\u001c\t\uffff\u0001\u001c\u0013\uffff\u0001\u001c\f\uffff\u0001\u001c9\uffff\u0001\u001c\u0002\uffff\u0001\u001c\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u001c\u0003\uffff\u0001\u001c", "\u0001\u0019\b\uffff\u0001\u0019\r\uffff\u0001\u0019\n\uffff\u0001\u0019\t\uffff\u0001\u0019\u0013\uffff\u0001\u0019\f\uffff\u0001\u00199\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0001\u0018\u0002\uffff\u0001\u0019", "\u0001\u0019\b\uffff\u0001\u0019\r\uffff\u0001\u0019\n\uffff\u0001\u0019\t\uffff\u0001\u0019\u0013\uffff\u0001\u0019\f\uffff\u0001\u00199\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0001\u0018\u0002\uffff\u0001\u0019", "", "", "\u0001\u0019\b\uffff\u0001\u0019\r\uffff\u0001\u0019\n\uffff\u0001\u0019\t\uffff\u0001\u0019\u0013\uffff\u0001\u0019\f\uffff\u0001\u00199\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0002\uffff\u0001\u0019\u0001\u001d\u0002\uffff\u0001\u0019", "", "", ""};
      DFA239_eot = DFA.unpackEncodedString("\u001e\uffff");
      DFA239_eof = DFA.unpackEncodedString("\u0001\uffff\u0015\u001c\u0002\u0019\u0002\uffff\u0001\u0019\u0003\uffff");
      DFA239_min = DFA.unpackEncodedStringToUnsignedChars("\u0001\u0017\u0017<\u0002\uffff\u0001<\u0003\uffff");
      DFA239_max = DFA.unpackEncodedStringToUnsignedChars("\u0001¶\u0017Ð\u0002\uffff\u0001Ð\u0003\uffff");
      DFA239_accept = DFA.unpackEncodedString("\u0018\uffff\u0001\u0002\u0001\u0003\u0001\uffff\u0001\u0005\u0001\u0001\u0001\u0004");
      DFA239_special = DFA.unpackEncodedString("\u001e\uffff}>");
      numStates = DFA239_transitionS.length;
      DFA239_transition = new short[numStates][];

      for(i = 0; i < numStates; ++i) {
         DFA239_transition[i] = DFA.unpackEncodedString(DFA239_transitionS[i]);
      }

      FOLLOW_selectStatement_in_cqlStatement59 = new BitSet(new long[]{2L});
      FOLLOW_insertStatement_in_cqlStatement88 = new BitSet(new long[]{2L});
      FOLLOW_updateStatement_in_cqlStatement117 = new BitSet(new long[]{2L});
      FOLLOW_batchStatement_in_cqlStatement146 = new BitSet(new long[]{2L});
      FOLLOW_deleteStatement_in_cqlStatement176 = new BitSet(new long[]{2L});
      FOLLOW_useStatement_in_cqlStatement205 = new BitSet(new long[]{2L});
      FOLLOW_truncateStatement_in_cqlStatement237 = new BitSet(new long[]{2L});
      FOLLOW_createKeyspaceStatement_in_cqlStatement264 = new BitSet(new long[]{2L});
      FOLLOW_createTableStatement_in_cqlStatement285 = new BitSet(new long[]{2L});
      FOLLOW_createIndexStatement_in_cqlStatement308 = new BitSet(new long[]{2L});
      FOLLOW_dropKeyspaceStatement_in_cqlStatement331 = new BitSet(new long[]{2L});
      FOLLOW_dropTableStatement_in_cqlStatement353 = new BitSet(new long[]{2L});
      FOLLOW_dropIndexStatement_in_cqlStatement378 = new BitSet(new long[]{2L});
      FOLLOW_alterTableStatement_in_cqlStatement403 = new BitSet(new long[]{2L});
      FOLLOW_alterKeyspaceStatement_in_cqlStatement427 = new BitSet(new long[]{2L});
      FOLLOW_grantPermissionsStatement_in_cqlStatement448 = new BitSet(new long[]{2L});
      FOLLOW_revokePermissionsStatement_in_cqlStatement466 = new BitSet(new long[]{2L});
      FOLLOW_listPermissionsStatement_in_cqlStatement483 = new BitSet(new long[]{2L});
      FOLLOW_createUserStatement_in_cqlStatement502 = new BitSet(new long[]{2L});
      FOLLOW_alterUserStatement_in_cqlStatement526 = new BitSet(new long[]{2L});
      FOLLOW_dropUserStatement_in_cqlStatement551 = new BitSet(new long[]{2L});
      FOLLOW_listUsersStatement_in_cqlStatement577 = new BitSet(new long[]{2L});
      FOLLOW_createTriggerStatement_in_cqlStatement602 = new BitSet(new long[]{2L});
      FOLLOW_dropTriggerStatement_in_cqlStatement623 = new BitSet(new long[]{2L});
      FOLLOW_createTypeStatement_in_cqlStatement646 = new BitSet(new long[]{2L});
      FOLLOW_alterTypeStatement_in_cqlStatement670 = new BitSet(new long[]{2L});
      FOLLOW_dropTypeStatement_in_cqlStatement695 = new BitSet(new long[]{2L});
      FOLLOW_createFunctionStatement_in_cqlStatement721 = new BitSet(new long[]{2L});
      FOLLOW_dropFunctionStatement_in_cqlStatement741 = new BitSet(new long[]{2L});
      FOLLOW_createAggregateStatement_in_cqlStatement763 = new BitSet(new long[]{2L});
      FOLLOW_dropAggregateStatement_in_cqlStatement782 = new BitSet(new long[]{2L});
      FOLLOW_createRoleStatement_in_cqlStatement803 = new BitSet(new long[]{2L});
      FOLLOW_alterRoleStatement_in_cqlStatement827 = new BitSet(new long[]{2L});
      FOLLOW_dropRoleStatement_in_cqlStatement852 = new BitSet(new long[]{2L});
      FOLLOW_listRolesStatement_in_cqlStatement878 = new BitSet(new long[]{2L});
      FOLLOW_grantRoleStatement_in_cqlStatement903 = new BitSet(new long[]{2L});
      FOLLOW_revokeRoleStatement_in_cqlStatement928 = new BitSet(new long[]{2L});
      FOLLOW_createMaterializedViewStatement_in_cqlStatement952 = new BitSet(new long[]{2L});
      FOLLOW_dropMaterializedViewStatement_in_cqlStatement964 = new BitSet(new long[]{2L});
      FOLLOW_alterMaterializedViewStatement_in_cqlStatement978 = new BitSet(new long[]{2L});
      FOLLOW_restrictPermissionsStatement_in_cqlStatement991 = new BitSet(new long[]{2L});
      FOLLOW_unrestrictPermissionsStatement_in_cqlStatement1006 = new BitSet(new long[]{2L});
      FOLLOW_K_USE_in_useStatement1032 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_keyspaceName_in_useStatement1036 = new BitSet(new long[]{2L});
      FOLLOW_K_SELECT_in_selectStatement1070 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4982916L});
      FOLLOW_K_JSON_in_selectStatement1096 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4982916L});
      FOLLOW_selectClause_in_selectStatement1105 = new BitSet(new long[]{0L, 256L});
      FOLLOW_K_FROM_in_selectStatement1113 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_selectStatement1117 = new BitSet(new long[]{1073741826L, 40532400941318144L, 274877906944L});
      FOLLOW_K_WHERE_in_selectStatement1127 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519909786L, 2097156L});
      FOLLOW_whereClause_in_selectStatement1131 = new BitSet(new long[]{1073741826L, 40532400941318144L});
      FOLLOW_K_GROUP_in_selectStatement1144 = new BitSet(new long[]{8796093022208L});
      FOLLOW_K_BY_in_selectStatement1146 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_groupByClause_in_selectStatement1148 = new BitSet(new long[]{1073741826L, 40532400941301760L, 0L, 64L});
      FOLLOW_198_in_selectStatement1153 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_groupByClause_in_selectStatement1155 = new BitSet(new long[]{1073741826L, 40532400941301760L, 0L, 64L});
      FOLLOW_K_ORDER_in_selectStatement1172 = new BitSet(new long[]{8796093022208L});
      FOLLOW_K_BY_in_selectStatement1174 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_orderByClause_in_selectStatement1176 = new BitSet(new long[]{1073741826L, 36028801313931264L, 0L, 64L});
      FOLLOW_198_in_selectStatement1181 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_orderByClause_in_selectStatement1183 = new BitSet(new long[]{1073741826L, 36028801313931264L, 0L, 64L});
      FOLLOW_K_PER_in_selectStatement1200 = new BitSet(new long[]{0L, 9007199254740992L});
      FOLLOW_K_PARTITION_in_selectStatement1202 = new BitSet(new long[]{0L, 4294967296L});
      FOLLOW_K_LIMIT_in_selectStatement1204 = new BitSet(new long[]{16777216L, 0L, 562949953421312L, 2048L});
      FOLLOW_intValue_in_selectStatement1208 = new BitSet(new long[]{1073741826L, 4294967296L});
      FOLLOW_K_LIMIT_in_selectStatement1223 = new BitSet(new long[]{16777216L, 0L, 562949953421312L, 2048L});
      FOLLOW_intValue_in_selectStatement1227 = new BitSet(new long[]{1073741826L});
      FOLLOW_K_ALLOW_in_selectStatement1242 = new BitSet(new long[]{0L, 16L});
      FOLLOW_K_FILTERING_in_selectStatement1244 = new BitSet(new long[]{2L});
      FOLLOW_K_DISTINCT_in_selectClause1299 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4982916L});
      FOLLOW_selectors_in_selectClause1303 = new BitSet(new long[]{2L});
      FOLLOW_selectors_in_selectClause1315 = new BitSet(new long[]{2L});
      FOLLOW_selector_in_selectors1340 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_198_in_selectors1345 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_selector_in_selectors1349 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_211_in_selectors1361 = new BitSet(new long[]{2L});
      FOLLOW_unaliasedSelector_in_selector1394 = new BitSet(new long[]{17179869186L});
      FOLLOW_K_AS_in_selector1397 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_selector1401 = new BitSet(new long[]{2L});
      FOLLOW_selectionAddition_in_unaliasedSelector1430 = new BitSet(new long[]{2L});
      FOLLOW_selectionMultiplication_in_selectionAddition1457 = new BitSet(new long[]{2L, 0L, 0L, 144L});
      FOLLOW_196_in_selectionAddition1473 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_selectionMultiplication_in_selectionAddition1477 = new BitSet(new long[]{2L, 0L, 0L, 144L});
      FOLLOW_199_in_selectionAddition1491 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_selectionMultiplication_in_selectionAddition1495 = new BitSet(new long[]{2L, 0L, 0L, 144L});
      FOLLOW_selectionGroup_in_selectionMultiplication1533 = new BitSet(new long[]{2L, 0L, 0L, 525314L});
      FOLLOW_211_in_selectionMultiplication1549 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_selectionGroup_in_selectionMultiplication1553 = new BitSet(new long[]{2L, 0L, 0L, 525314L});
      FOLLOW_202_in_selectionMultiplication1567 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_selectionGroup_in_selectionMultiplication1571 = new BitSet(new long[]{2L, 0L, 0L, 525314L});
      FOLLOW_193_in_selectionMultiplication1585 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_selectionGroup_in_selectionMultiplication1589 = new BitSet(new long[]{2L, 0L, 0L, 525314L});
      FOLLOW_selectionGroupWithField_in_selectionGroup1631 = new BitSet(new long[]{2L});
      FOLLOW_selectionGroupWithoutField_in_selectionGroup1643 = new BitSet(new long[]{2L});
      FOLLOW_199_in_selectionGroup1653 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_selectionGroup_in_selectionGroup1657 = new BitSet(new long[]{2L});
      FOLLOW_selectionGroupWithoutField_in_selectionGroupWithField1682 = new BitSet(new long[]{0L, 0L, 0L, 262656L});
      FOLLOW_selectorModifier_in_selectionGroupWithField1686 = new BitSet(new long[]{2L});
      FOLLOW_fieldSelectorModifier_in_selectorModifier1713 = new BitSet(new long[]{0L, 0L, 0L, 262656L});
      FOLLOW_selectorModifier_in_selectorModifier1718 = new BitSet(new long[]{2L});
      FOLLOW_210_in_selectorModifier1729 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 168323267686039450L, 4458628L});
      FOLLOW_collectionSubSelection_in_selectorModifier1733 = new BitSet(new long[]{0L, 0L, 0L, 1048576L});
      FOLLOW_212_in_selectorModifier1736 = new BitSet(new long[]{0L, 0L, 0L, 262656L});
      FOLLOW_selectorModifier_in_selectorModifier1740 = new BitSet(new long[]{2L});
      FOLLOW_201_in_fieldSelectorModifier1773 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_fieldSelectorModifier1777 = new BitSet(new long[]{2L});
      FOLLOW_term_in_collectionSubSelection1815 = new BitSet(new long[]{2L, 0L, 4503599627370496L});
      FOLLOW_RANGE_in_collectionSubSelection1821 = new BitSet(new long[]{8137853980297529410L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_collectionSubSelection1826 = new BitSet(new long[]{2L});
      FOLLOW_RANGE_in_collectionSubSelection1841 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_collectionSubSelection1847 = new BitSet(new long[]{2L});
      FOLLOW_simpleUnaliasedSelector_in_selectionGroupWithoutField1899 = new BitSet(new long[]{2L});
      FOLLOW_selectionTypeHint_in_selectionGroupWithoutField1917 = new BitSet(new long[]{2L});
      FOLLOW_selectionTupleOrNestedSelector_in_selectionGroupWithoutField1929 = new BitSet(new long[]{2L});
      FOLLOW_selectionList_in_selectionGroupWithoutField1941 = new BitSet(new long[]{2L});
      FOLLOW_selectionMapOrSet_in_selectionGroupWithoutField1953 = new BitSet(new long[]{2L});
      FOLLOW_194_in_selectionTypeHint1981 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_selectionTypeHint1985 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_selectionTypeHint1987 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458500L});
      FOLLOW_selectionGroupWithoutField_in_selectionTypeHint1991 = new BitSet(new long[]{2L});
      FOLLOW_210_in_selectionList2032 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 5507204L});
      FOLLOW_unaliasedSelector_in_selectionList2038 = new BitSet(new long[]{0L, 0L, 0L, 1048640L});
      FOLLOW_198_in_selectionList2044 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionList2048 = new BitSet(new long[]{0L, 0L, 0L, 1048640L});
      FOLLOW_212_in_selectionList2058 = new BitSet(new long[]{2L});
      FOLLOW_214_in_selectionMapOrSet2079 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionMapOrSet2083 = new BitSet(new long[]{0L, 0L, 0L, 8390720L});
      FOLLOW_selectionMap_in_selectionMapOrSet2089 = new BitSet(new long[]{0L, 0L, 0L, 8388608L});
      FOLLOW_selectionSet_in_selectionMapOrSet2098 = new BitSet(new long[]{0L, 0L, 0L, 8388608L});
      FOLLOW_215_in_selectionMapOrSet2104 = new BitSet(new long[]{2L});
      FOLLOW_214_in_selectionMapOrSet2112 = new BitSet(new long[]{0L, 0L, 0L, 8388608L});
      FOLLOW_215_in_selectionMapOrSet2114 = new BitSet(new long[]{2L});
      FOLLOW_203_in_selectionMap2159 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionMap2163 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_198_in_selectionMap2171 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionMap2175 = new BitSet(new long[]{0L, 0L, 0L, 2048L});
      FOLLOW_203_in_selectionMap2177 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionMap2181 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_198_in_selectionSet2233 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionSet2237 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_194_in_selectionTupleOrNestedSelector2283 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionTupleOrNestedSelector2287 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_selectionTupleOrNestedSelector2292 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionTupleOrNestedSelector2296 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_selectionTupleOrNestedSelector2303 = new BitSet(new long[]{2L});
      FOLLOW_sident_in_simpleUnaliasedSelector2328 = new BitSet(new long[]{2L});
      FOLLOW_selectionLiteral_in_simpleUnaliasedSelector2374 = new BitSet(new long[]{2L});
      FOLLOW_selectionFunction_in_simpleUnaliasedSelector2410 = new BitSet(new long[]{2L});
      FOLLOW_K_COUNT_in_selectionFunction2456 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_selectionFunction2458 = new BitSet(new long[]{0L, 0L, 0L, 524288L});
      FOLLOW_211_in_selectionFunction2460 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_selectionFunction2462 = new BitSet(new long[]{2L});
      FOLLOW_K_WRITETIME_in_selectionFunction2493 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_selectionFunction2495 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_selectionFunction2499 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_selectionFunction2501 = new BitSet(new long[]{2L});
      FOLLOW_K_TTL_in_selectionFunction2524 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_selectionFunction2532 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_selectionFunction2536 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_selectionFunction2538 = new BitSet(new long[]{2L});
      FOLLOW_K_CAST_in_selectionFunction2561 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_selectionFunction2568 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionFunction2572 = new BitSet(new long[]{17179869184L});
      FOLLOW_K_AS_in_selectionFunction2574 = new BitSet(new long[]{4667988779070390272L, 4456513L, 111669403904L});
      FOLLOW_native_type_in_selectionFunction2578 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_selectionFunction2580 = new BitSet(new long[]{2L});
      FOLLOW_functionName_in_selectionFunction2592 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_selectionFunctionArgs_in_selectionFunction2596 = new BitSet(new long[]{2L});
      FOLLOW_constant_in_selectionLiteral2621 = new BitSet(new long[]{2L});
      FOLLOW_K_NULL_in_selectionLiteral2651 = new BitSet(new long[]{2L});
      FOLLOW_203_in_selectionLiteral2685 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_selectionLiteral2689 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_selectionLiteral2710 = new BitSet(new long[]{2L});
      FOLLOW_194_in_selectionFunctionArgs2766 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458636L});
      FOLLOW_unaliasedSelector_in_selectionFunctionArgs2771 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_selectionFunctionArgs2787 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_unaliasedSelector_in_selectionFunctionArgs2791 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_selectionFunctionArgs2806 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_sident2829 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_sident2854 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_sident2873 = new BitSet(new long[]{2L});
      FOLLOW_EMPTY_QUOTED_NAME_in_sident2883 = new BitSet(new long[]{2L});
      FOLLOW_relationOrExpression_in_whereClause2917 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_AND_in_whereClause2921 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519909786L, 2097156L});
      FOLLOW_relationOrExpression_in_whereClause2923 = new BitSet(new long[]{4294967298L});
      FOLLOW_relation_in_relationOrExpression2945 = new BitSet(new long[]{2L});
      FOLLOW_customIndexExpression_in_relationOrExpression2954 = new BitSet(new long[]{2L});
      FOLLOW_213_in_customIndexExpression2982 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_idxName_in_customIndexExpression2984 = new BitSet(new long[]{0L, 0L, 0L, 64L});
      FOLLOW_198_in_customIndexExpression2987 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_customIndexExpression2991 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_customIndexExpression2993 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_orderByClause3023 = new BitSet(new long[]{288230410511450114L});
      FOLLOW_K_ASC_in_orderByClause3026 = new BitSet(new long[]{2L});
      FOLLOW_K_DESC_in_orderByClause3030 = new BitSet(new long[]{2L});
      FOLLOW_unaliasedSelector_in_groupByClause3056 = new BitSet(new long[]{2L});
      FOLLOW_K_INSERT_in_insertStatement3081 = new BitSet(new long[]{0L, 8388608L});
      FOLLOW_K_INTO_in_insertStatement3083 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_insertStatement3087 = new BitSet(new long[]{0L, 33554432L, 0L, 4L});
      FOLLOW_normalInsertStatement_in_insertStatement3101 = new BitSet(new long[]{2L});
      FOLLOW_K_JSON_in_insertStatement3116 = new BitSet(new long[]{0L, 0L, 18577348462903296L, 2048L});
      FOLLOW_jsonInsertStatement_in_insertStatement3120 = new BitSet(new long[]{2L});
      FOLLOW_194_in_normalInsertStatement3156 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_normalInsertStatement3160 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_normalInsertStatement3167 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_normalInsertStatement3171 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_normalInsertStatement3178 = new BitSet(new long[]{0L, 0L, 17179869184L});
      FOLLOW_K_VALUES_in_normalInsertStatement3186 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_normalInsertStatement3194 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_normalInsertStatement3198 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_normalInsertStatement3204 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_normalInsertStatement3208 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_normalInsertStatement3215 = new BitSet(new long[]{2L, 32768L, 4294967296L});
      FOLLOW_K_IF_in_normalInsertStatement3225 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_normalInsertStatement3227 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_normalInsertStatement3229 = new BitSet(new long[]{2L, 0L, 4294967296L});
      FOLLOW_usingClause_in_normalInsertStatement3244 = new BitSet(new long[]{2L});
      FOLLOW_jsonValue_in_jsonInsertStatement3290 = new BitSet(new long[]{72057594037927938L, 32768L, 4294967296L});
      FOLLOW_K_DEFAULT_in_jsonInsertStatement3300 = new BitSet(new long[]{0L, 140737488355328L, 134217728L});
      FOLLOW_K_NULL_in_jsonInsertStatement3304 = new BitSet(new long[]{2L, 32768L, 4294967296L});
      FOLLOW_K_UNSET_in_jsonInsertStatement3312 = new BitSet(new long[]{2L, 32768L, 4294967296L});
      FOLLOW_K_IF_in_jsonInsertStatement3328 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_jsonInsertStatement3330 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_jsonInsertStatement3332 = new BitSet(new long[]{2L, 0L, 4294967296L});
      FOLLOW_usingClause_in_jsonInsertStatement3347 = new BitSet(new long[]{2L});
      FOLLOW_STRING_LITERAL_in_jsonValue3382 = new BitSet(new long[]{2L});
      FOLLOW_203_in_jsonValue3392 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_jsonValue3396 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_jsonValue3410 = new BitSet(new long[]{2L});
      FOLLOW_K_USING_in_usingClause3441 = new BitSet(new long[]{0L, 0L, 4227072L});
      FOLLOW_usingClauseObjective_in_usingClause3443 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_AND_in_usingClause3448 = new BitSet(new long[]{0L, 0L, 4227072L});
      FOLLOW_usingClauseObjective_in_usingClause3450 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_TIMESTAMP_in_usingClauseObjective3472 = new BitSet(new long[]{16777216L, 0L, 562949953421312L, 2048L});
      FOLLOW_intValue_in_usingClauseObjective3476 = new BitSet(new long[]{2L});
      FOLLOW_K_TTL_in_usingClauseObjective3486 = new BitSet(new long[]{16777216L, 0L, 562949953421312L, 2048L});
      FOLLOW_intValue_in_usingClauseObjective3490 = new BitSet(new long[]{2L});
      FOLLOW_K_UPDATE_in_updateStatement3524 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_updateStatement3528 = new BitSet(new long[]{0L, 0L, 4294967360L});
      FOLLOW_usingClause_in_updateStatement3538 = new BitSet(new long[]{0L, 0L, 64L});
      FOLLOW_K_SET_in_updateStatement3550 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_columnOperation_in_updateStatement3552 = new BitSet(new long[]{0L, 0L, 274877906944L, 64L});
      FOLLOW_198_in_updateStatement3556 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_columnOperation_in_updateStatement3558 = new BitSet(new long[]{0L, 0L, 274877906944L, 64L});
      FOLLOW_K_WHERE_in_updateStatement3569 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519909786L, 2097156L});
      FOLLOW_whereClause_in_updateStatement3573 = new BitSet(new long[]{2L, 32768L});
      FOLLOW_K_IF_in_updateStatement3583 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_K_EXISTS_in_updateStatement3587 = new BitSet(new long[]{2L});
      FOLLOW_updateConditions_in_updateStatement3595 = new BitSet(new long[]{2L});
      FOLLOW_columnCondition_in_updateConditions3637 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_AND_in_updateConditions3642 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_columnCondition_in_updateConditions3644 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_DELETE_in_deleteStatement3681 = new BitSet(new long[]{8137853980278538240L, -8942977815945651335L, 1127131519385498L});
      FOLLOW_deleteSelection_in_deleteStatement3687 = new BitSet(new long[]{0L, 256L});
      FOLLOW_K_FROM_in_deleteStatement3700 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_deleteStatement3704 = new BitSet(new long[]{0L, 0L, 279172874240L});
      FOLLOW_usingClauseDelete_in_deleteStatement3714 = new BitSet(new long[]{0L, 0L, 274877906944L});
      FOLLOW_K_WHERE_in_deleteStatement3726 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519909786L, 2097156L});
      FOLLOW_whereClause_in_deleteStatement3730 = new BitSet(new long[]{2L, 32768L});
      FOLLOW_K_IF_in_deleteStatement3740 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_K_EXISTS_in_deleteStatement3744 = new BitSet(new long[]{2L});
      FOLLOW_updateConditions_in_deleteStatement3752 = new BitSet(new long[]{2L});
      FOLLOW_deleteOp_in_deleteSelection3799 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_198_in_deleteSelection3814 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_deleteOp_in_deleteSelection3818 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_cident_in_deleteOp3845 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_deleteOp3872 = new BitSet(new long[]{0L, 0L, 0L, 262144L});
      FOLLOW_210_in_deleteOp3874 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_deleteOp3878 = new BitSet(new long[]{0L, 0L, 0L, 1048576L});
      FOLLOW_212_in_deleteOp3880 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_deleteOp3892 = new BitSet(new long[]{0L, 0L, 0L, 512L});
      FOLLOW_201_in_deleteOp3894 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_deleteOp3898 = new BitSet(new long[]{2L});
      FOLLOW_K_USING_in_usingClauseDelete3918 = new BitSet(new long[]{0L, 0L, 32768L});
      FOLLOW_K_TIMESTAMP_in_usingClauseDelete3920 = new BitSet(new long[]{16777216L, 0L, 562949953421312L, 2048L});
      FOLLOW_intValue_in_usingClauseDelete3924 = new BitSet(new long[]{2L});
      FOLLOW_K_BEGIN_in_batchStatement3958 = new BitSet(new long[]{2252074691592192L, 0L, 33554432L});
      FOLLOW_K_UNLOGGED_in_batchStatement3968 = new BitSet(new long[]{274877906944L});
      FOLLOW_K_COUNTER_in_batchStatement3974 = new BitSet(new long[]{274877906944L});
      FOLLOW_K_BATCH_in_batchStatement3987 = new BitSet(new long[]{144115196665790464L, 2097152L, 4563402752L});
      FOLLOW_usingClause_in_batchStatement3991 = new BitSet(new long[]{144115196665790464L, 2097152L, 268435456L});
      FOLLOW_batchStatementObjective_in_batchStatement4011 = new BitSet(new long[]{144115196665790464L, 2097152L, 268435456L, 4096L});
      FOLLOW_204_in_batchStatement4013 = new BitSet(new long[]{144115196665790464L, 2097152L, 268435456L});
      FOLLOW_K_APPLY_in_batchStatement4027 = new BitSet(new long[]{274877906944L});
      FOLLOW_K_BATCH_in_batchStatement4029 = new BitSet(new long[]{2L});
      FOLLOW_insertStatement_in_batchStatementObjective4060 = new BitSet(new long[]{2L});
      FOLLOW_updateStatement_in_batchStatementObjective4073 = new BitSet(new long[]{2L});
      FOLLOW_deleteStatement_in_batchStatementObjective4086 = new BitSet(new long[]{2L});
      FOLLOW_K_CREATE_in_createAggregateStatement4119 = new BitSet(new long[]{268435456L, 2251799813685248L});
      FOLLOW_K_OR_in_createAggregateStatement4122 = new BitSet(new long[]{0L, 4611686018427387904L});
      FOLLOW_K_REPLACE_in_createAggregateStatement4124 = new BitSet(new long[]{268435456L});
      FOLLOW_K_AGGREGATE_in_createAggregateStatement4136 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081473331098L});
      FOLLOW_K_IF_in_createAggregateStatement4145 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createAggregateStatement4147 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createAggregateStatement4149 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081473331098L});
      FOLLOW_functionName_in_createAggregateStatement4163 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_createAggregateStatement4171 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L, 8L});
      FOLLOW_comparatorType_in_createAggregateStatement4195 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_createAggregateStatement4211 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_createAggregateStatement4215 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_createAggregateStatement4239 = new BitSet(new long[]{0L, 0L, 128L});
      FOLLOW_K_SFUNC_in_createAggregateStatement4247 = new BitSet(new long[]{5831975786692739072L, -8942977816046314887L, 1126032004087706L});
      FOLLOW_allowedFunctionName_in_createAggregateStatement4253 = new BitSet(new long[]{0L, 0L, 2048L});
      FOLLOW_K_STYPE_in_createAggregateStatement4261 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_createAggregateStatement4267 = new BitSet(new long[]{1152921504606846978L, 524320L});
      FOLLOW_K_FINALFUNC_in_createAggregateStatement4285 = new BitSet(new long[]{5831975786692739072L, -8942977816046314887L, 1126032004087706L});
      FOLLOW_allowedFunctionName_in_createAggregateStatement4291 = new BitSet(new long[]{1152921504606846978L, 524288L});
      FOLLOW_K_INITCOND_in_createAggregateStatement4318 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_createAggregateStatement4324 = new BitSet(new long[]{1152921504606846978L});
      FOLLOW_K_DETERMINISTIC_in_createAggregateStatement4343 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_dropAggregateStatement4386 = new BitSet(new long[]{268435456L});
      FOLLOW_K_AGGREGATE_in_dropAggregateStatement4388 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081473331098L});
      FOLLOW_K_IF_in_dropAggregateStatement4397 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropAggregateStatement4399 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081473331098L});
      FOLLOW_functionName_in_dropAggregateStatement4414 = new BitSet(new long[]{2L, 0L, 0L, 4L});
      FOLLOW_194_in_dropAggregateStatement4432 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L, 8L});
      FOLLOW_comparatorType_in_dropAggregateStatement4460 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_dropAggregateStatement4478 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_dropAggregateStatement4482 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_dropAggregateStatement4510 = new BitSet(new long[]{2L});
      FOLLOW_K_CREATE_in_createFunctionStatement4567 = new BitSet(new long[]{0L, 2251799813687296L});
      FOLLOW_K_OR_in_createFunctionStatement4570 = new BitSet(new long[]{0L, 4611686018427387904L});
      FOLLOW_K_REPLACE_in_createFunctionStatement4572 = new BitSet(new long[]{0L, 2048L});
      FOLLOW_K_FUNCTION_in_createFunctionStatement4584 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081473331098L});
      FOLLOW_K_IF_in_createFunctionStatement4593 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createFunctionStatement4595 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createFunctionStatement4597 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081473331098L});
      FOLLOW_functionName_in_createFunctionStatement4611 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_createFunctionStatement4619 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L, 8L});
      FOLLOW_noncol_ident_in_createFunctionStatement4643 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_createFunctionStatement4647 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_createFunctionStatement4663 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_createFunctionStatement4667 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_createFunctionStatement4671 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_createFunctionStatement4695 = new BitSet(new long[]{17592186044416L, 0L, 2L});
      FOLLOW_K_RETURNS_in_createFunctionStatement4706 = new BitSet(new long[]{0L, 140737488355328L});
      FOLLOW_K_NULL_in_createFunctionStatement4708 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_CALLED_in_createFunctionStatement4714 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_ON_in_createFunctionStatement4720 = new BitSet(new long[]{0L, 140737488355328L});
      FOLLOW_K_NULL_in_createFunctionStatement4722 = new BitSet(new long[]{0L, 1048576L});
      FOLLOW_K_INPUT_in_createFunctionStatement4724 = new BitSet(new long[]{0L, 0L, 2L});
      FOLLOW_K_RETURNS_in_createFunctionStatement4732 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_createFunctionStatement4738 = new BitSet(new long[]{1152921504606846976L, 1100585369600L});
      FOLLOW_K_DETERMINISTIC_in_createFunctionStatement4748 = new BitSet(new long[]{0L, 1100585369600L});
      FOLLOW_K_MONOTONIC_in_createFunctionStatement4771 = new BitSet(new long[]{0L, 1073741824L});
      FOLLOW_K_MONOTONIC_in_createFunctionStatement4785 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_ON_in_createFunctionStatement4787 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_createFunctionStatement4791 = new BitSet(new long[]{0L, 1073741824L});
      FOLLOW_K_LANGUAGE_in_createFunctionStatement4810 = new BitSet(new long[]{8388608L});
      FOLLOW_IDENT_in_createFunctionStatement4816 = new BitSet(new long[]{17179869184L});
      FOLLOW_K_AS_in_createFunctionStatement4824 = new BitSet(new long[]{0L, 0L, 18014398509481984L});
      FOLLOW_STRING_LITERAL_in_createFunctionStatement4830 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_dropFunctionStatement4868 = new BitSet(new long[]{0L, 2048L});
      FOLLOW_K_FUNCTION_in_dropFunctionStatement4870 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081473331098L});
      FOLLOW_K_IF_in_dropFunctionStatement4879 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropFunctionStatement4881 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081473331098L});
      FOLLOW_functionName_in_dropFunctionStatement4896 = new BitSet(new long[]{2L, 0L, 0L, 4L});
      FOLLOW_194_in_dropFunctionStatement4914 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L, 8L});
      FOLLOW_comparatorType_in_dropFunctionStatement4942 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_dropFunctionStatement4960 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_dropFunctionStatement4964 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_dropFunctionStatement4992 = new BitSet(new long[]{2L});
      FOLLOW_K_CREATE_in_createKeyspaceStatement5051 = new BitSet(new long[]{0L, 268435456L});
      FOLLOW_K_KEYSPACE_in_createKeyspaceStatement5053 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081472806810L});
      FOLLOW_K_IF_in_createKeyspaceStatement5056 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createKeyspaceStatement5058 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createKeyspaceStatement5060 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_keyspaceName_in_createKeyspaceStatement5069 = new BitSet(new long[]{0L, 0L, 549755813888L});
      FOLLOW_K_WITH_in_createKeyspaceStatement5077 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_properties_in_createKeyspaceStatement5079 = new BitSet(new long[]{2L});
      FOLLOW_K_CREATE_in_createTableStatement5114 = new BitSet(new long[]{140737488355328L});
      FOLLOW_K_COLUMNFAMILY_in_createTableStatement5116 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081472806810L});
      FOLLOW_K_IF_in_createTableStatement5119 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createTableStatement5121 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createTableStatement5123 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_createTableStatement5138 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_cfamDefinition_in_createTableStatement5148 = new BitSet(new long[]{2L});
      FOLLOW_194_in_cfamDefinition5167 = new BitSet(new long[]{8137853980278521856L, -7790056311338804615L, 1127131519385498L});
      FOLLOW_cfamColumns_in_cfamDefinition5169 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_cfamDefinition5174 = new BitSet(new long[]{8137853980278521856L, -7790056311338804615L, 1127131519385498L, 72L});
      FOLLOW_cfamColumns_in_cfamDefinition5176 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_cfamDefinition5183 = new BitSet(new long[]{2L, 0L, 549755813888L});
      FOLLOW_K_WITH_in_cfamDefinition5193 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cfamProperty_in_cfamDefinition5195 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_AND_in_cfamDefinition5200 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cfamProperty_in_cfamDefinition5202 = new BitSet(new long[]{4294967298L});
      FOLLOW_ident_in_cfamColumns5237 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_cfamColumns5241 = new BitSet(new long[]{2L, 1152921504606846976L, 512L});
      FOLLOW_K_STATIC_in_cfamColumns5244 = new BitSet(new long[]{2L, 1152921504606846976L});
      FOLLOW_K_PRIMARY_in_cfamColumns5261 = new BitSet(new long[]{0L, 67108864L});
      FOLLOW_K_KEY_in_cfamColumns5263 = new BitSet(new long[]{2L});
      FOLLOW_K_PRIMARY_in_cfamColumns5275 = new BitSet(new long[]{0L, 67108864L});
      FOLLOW_K_KEY_in_cfamColumns5277 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_cfamColumns5279 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L, 4L});
      FOLLOW_pkDef_in_cfamColumns5281 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_cfamColumns5285 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_ident_in_cfamColumns5289 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_cfamColumns5296 = new BitSet(new long[]{2L});
      FOLLOW_ident_in_pkDef5333 = new BitSet(new long[]{2L});
      FOLLOW_194_in_pkDef5343 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_ident_in_pkDef5347 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_pkDef5353 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_ident_in_pkDef5357 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_pkDef5364 = new BitSet(new long[]{2L});
      FOLLOW_property_in_cfamProperty5382 = new BitSet(new long[]{2L});
      FOLLOW_K_COMPACT_in_cfamProperty5391 = new BitSet(new long[]{0L, 0L, 1024L});
      FOLLOW_K_STORAGE_in_cfamProperty5393 = new BitSet(new long[]{2L});
      FOLLOW_K_CLUSTERING_in_cfamProperty5403 = new BitSet(new long[]{0L, 4503599627370496L});
      FOLLOW_K_ORDER_in_cfamProperty5405 = new BitSet(new long[]{8796093022208L});
      FOLLOW_K_BY_in_cfamProperty5407 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_cfamProperty5409 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cfamOrdering_in_cfamProperty5411 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_cfamProperty5415 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cfamOrdering_in_cfamProperty5417 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_cfamProperty5422 = new BitSet(new long[]{2L});
      FOLLOW_ident_in_cfamOrdering5450 = new BitSet(new long[]{288230410511450112L});
      FOLLOW_K_ASC_in_cfamOrdering5453 = new BitSet(new long[]{2L});
      FOLLOW_K_DESC_in_cfamOrdering5457 = new BitSet(new long[]{2L});
      FOLLOW_K_CREATE_in_createTypeStatement5496 = new BitSet(new long[]{0L, 0L, 16777216L});
      FOLLOW_K_TYPE_in_createTypeStatement5498 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1127131519385498L});
      FOLLOW_K_IF_in_createTypeStatement5501 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createTypeStatement5503 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createTypeStatement5505 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_userTypeName_in_createTypeStatement5523 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_createTypeStatement5536 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_typeColumns_in_createTypeStatement5538 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_createTypeStatement5543 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L, 72L});
      FOLLOW_typeColumns_in_createTypeStatement5545 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_createTypeStatement5552 = new BitSet(new long[]{2L});
      FOLLOW_fident_in_typeColumns5572 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_typeColumns5576 = new BitSet(new long[]{2L});
      FOLLOW_K_CREATE_in_createIndexStatement5611 = new BitSet(new long[]{9007199254740992L, 131072L});
      FOLLOW_K_CUSTOM_in_createIndexStatement5614 = new BitSet(new long[]{0L, 131072L});
      FOLLOW_K_INDEX_in_createIndexStatement5620 = new BitSet(new long[]{8137853980278521856L, -8942414865992197511L, 1690081472806810L});
      FOLLOW_K_IF_in_createIndexStatement5623 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createIndexStatement5625 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createIndexStatement5627 = new BitSet(new long[]{8137853980278521856L, -8942414865992230279L, 1690081472806810L});
      FOLLOW_idxName_in_createIndexStatement5643 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_ON_in_createIndexStatement5648 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_createIndexStatement5652 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_createIndexStatement5654 = new BitSet(new long[]{8137853980278538240L, -8942977815945650565L, 1127131519385498L, 8L});
      FOLLOW_indexIdent_in_createIndexStatement5657 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_createIndexStatement5661 = new BitSet(new long[]{8137853980278538240L, -8942977815945650565L, 1127131519385498L});
      FOLLOW_indexIdent_in_createIndexStatement5663 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_createIndexStatement5670 = new BitSet(new long[]{2L, 0L, 554050781184L});
      FOLLOW_K_USING_in_createIndexStatement5681 = new BitSet(new long[]{0L, 0L, 18014398509481984L});
      FOLLOW_STRING_LITERAL_in_createIndexStatement5685 = new BitSet(new long[]{2L, 0L, 549755813888L});
      FOLLOW_K_WITH_in_createIndexStatement5700 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_properties_in_createIndexStatement5702 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_indexIdent5734 = new BitSet(new long[]{2L});
      FOLLOW_K_VALUES_in_indexIdent5762 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_indexIdent5764 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_indexIdent5768 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_indexIdent5770 = new BitSet(new long[]{2L});
      FOLLOW_K_KEYS_in_indexIdent5781 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_indexIdent5783 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_indexIdent5787 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_indexIdent5789 = new BitSet(new long[]{2L});
      FOLLOW_K_ENTRIES_in_indexIdent5802 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_indexIdent5804 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_indexIdent5808 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_indexIdent5810 = new BitSet(new long[]{2L});
      FOLLOW_K_FULL_in_indexIdent5820 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_indexIdent5822 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_indexIdent5826 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_indexIdent5828 = new BitSet(new long[]{2L});
      FOLLOW_K_CREATE_in_createMaterializedViewStatement5865 = new BitSet(new long[]{0L, 68719476736L});
      FOLLOW_K_MATERIALIZED_in_createMaterializedViewStatement5867 = new BitSet(new long[]{0L, 0L, 137438953472L});
      FOLLOW_K_VIEW_in_createMaterializedViewStatement5869 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081472806810L});
      FOLLOW_K_IF_in_createMaterializedViewStatement5872 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createMaterializedViewStatement5874 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createMaterializedViewStatement5876 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_createMaterializedViewStatement5884 = new BitSet(new long[]{17179869184L});
      FOLLOW_K_AS_in_createMaterializedViewStatement5886 = new BitSet(new long[]{0L, 0L, 32L});
      FOLLOW_K_SELECT_in_createMaterializedViewStatement5896 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4982916L});
      FOLLOW_selectors_in_createMaterializedViewStatement5900 = new BitSet(new long[]{0L, 256L});
      FOLLOW_K_FROM_in_createMaterializedViewStatement5902 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_createMaterializedViewStatement5906 = new BitSet(new long[]{0L, 1152921504606846976L, 274877906944L});
      FOLLOW_K_WHERE_in_createMaterializedViewStatement5917 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519909786L, 2097156L});
      FOLLOW_whereClause_in_createMaterializedViewStatement5921 = new BitSet(new long[]{0L, 1152921504606846976L});
      FOLLOW_K_PRIMARY_in_createMaterializedViewStatement5933 = new BitSet(new long[]{0L, 67108864L});
      FOLLOW_K_KEY_in_createMaterializedViewStatement5935 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_createMaterializedViewStatement5947 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_createMaterializedViewStatement5949 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_createMaterializedViewStatement5953 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_createMaterializedViewStatement5959 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_createMaterializedViewStatement5963 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_createMaterializedViewStatement5970 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_createMaterializedViewStatement5974 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_createMaterializedViewStatement5978 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_createMaterializedViewStatement5985 = new BitSet(new long[]{2L, 0L, 549755813888L});
      FOLLOW_194_in_createMaterializedViewStatement5995 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_createMaterializedViewStatement5999 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_createMaterializedViewStatement6005 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_createMaterializedViewStatement6009 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_createMaterializedViewStatement6016 = new BitSet(new long[]{2L, 0L, 549755813888L});
      FOLLOW_K_WITH_in_createMaterializedViewStatement6048 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cfamProperty_in_createMaterializedViewStatement6050 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_AND_in_createMaterializedViewStatement6055 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cfamProperty_in_createMaterializedViewStatement6057 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_CREATE_in_createTriggerStatement6095 = new BitSet(new long[]{0L, 0L, 1048576L});
      FOLLOW_K_TRIGGER_in_createTriggerStatement6097 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1127131519385498L});
      FOLLOW_K_IF_in_createTriggerStatement6100 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createTriggerStatement6102 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createTriggerStatement6104 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_ident_in_createTriggerStatement6114 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_ON_in_createTriggerStatement6125 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_createTriggerStatement6129 = new BitSet(new long[]{0L, 0L, 4294967296L});
      FOLLOW_K_USING_in_createTriggerStatement6131 = new BitSet(new long[]{0L, 0L, 18014398509481984L});
      FOLLOW_STRING_LITERAL_in_createTriggerStatement6135 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_dropTriggerStatement6176 = new BitSet(new long[]{0L, 0L, 1048576L});
      FOLLOW_K_TRIGGER_in_dropTriggerStatement6178 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1127131519385498L});
      FOLLOW_K_IF_in_dropTriggerStatement6181 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropTriggerStatement6183 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_ident_in_dropTriggerStatement6193 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_ON_in_dropTriggerStatement6196 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_dropTriggerStatement6200 = new BitSet(new long[]{2L});
      FOLLOW_K_ALTER_in_alterKeyspaceStatement6240 = new BitSet(new long[]{0L, 268435456L});
      FOLLOW_K_KEYSPACE_in_alterKeyspaceStatement6242 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_keyspaceName_in_alterKeyspaceStatement6246 = new BitSet(new long[]{0L, 0L, 549755813888L});
      FOLLOW_K_WITH_in_alterKeyspaceStatement6256 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_properties_in_alterKeyspaceStatement6258 = new BitSet(new long[]{2L});
      FOLLOW_K_ALTER_in_alterTableStatement6293 = new BitSet(new long[]{140737488355328L});
      FOLLOW_K_COLUMNFAMILY_in_alterTableStatement6295 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_alterTableStatement6299 = new BitSet(new long[]{-9223372034573074432L, 2305843009213693952L, 549755813888L});
      FOLLOW_K_ALTER_in_alterTableStatement6313 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_schema_cident_in_alterTableStatement6317 = new BitSet(new long[]{0L, 0L, 16777216L});
      FOLLOW_K_TYPE_in_alterTableStatement6320 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_alterTableStatement6324 = new BitSet(new long[]{2L});
      FOLLOW_K_ADD_in_alterTableStatement6343 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L, 4L});
      FOLLOW_schema_cident_in_alterTableStatement6358 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_alterTableStatement6363 = new BitSet(new long[]{0L, 0L, 512L});
      FOLLOW_cfisStatic_in_alterTableStatement6369 = new BitSet(new long[]{2L});
      FOLLOW_194_in_alterTableStatement6398 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_schema_cident_in_alterTableStatement6403 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_alterTableStatement6408 = new BitSet(new long[]{0L, 0L, 512L, 72L});
      FOLLOW_cfisStatic_in_alterTableStatement6413 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_alterTableStatement6442 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_schema_cident_in_alterTableStatement6446 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_alterTableStatement6451 = new BitSet(new long[]{0L, 0L, 512L, 72L});
      FOLLOW_cfisStatic_in_alterTableStatement6456 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_alterTableStatement6463 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_alterTableStatement6483 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L, 4L});
      FOLLOW_schema_cident_in_alterTableStatement6498 = new BitSet(new long[]{2L, 0L, 4294967296L});
      FOLLOW_194_in_alterTableStatement6528 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_schema_cident_in_alterTableStatement6533 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_alterTableStatement6563 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_schema_cident_in_alterTableStatement6567 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_alterTableStatement6574 = new BitSet(new long[]{2L, 0L, 4294967296L});
      FOLLOW_K_USING_in_alterTableStatement6602 = new BitSet(new long[]{0L, 0L, 32768L});
      FOLLOW_K_TIMESTAMP_in_alterTableStatement6604 = new BitSet(new long[]{16777216L});
      FOLLOW_INTEGER_in_alterTableStatement6608 = new BitSet(new long[]{2L});
      FOLLOW_K_WITH_in_alterTableStatement6630 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_properties_in_alterTableStatement6633 = new BitSet(new long[]{2L});
      FOLLOW_K_RENAME_in_alterTableStatement6666 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_schema_cident_in_alterTableStatement6720 = new BitSet(new long[]{0L, 0L, 262144L});
      FOLLOW_K_TO_in_alterTableStatement6722 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_schema_cident_in_alterTableStatement6726 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_AND_in_alterTableStatement6747 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_schema_cident_in_alterTableStatement6751 = new BitSet(new long[]{0L, 0L, 262144L});
      FOLLOW_K_TO_in_alterTableStatement6753 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_schema_cident_in_alterTableStatement6757 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_STATIC_in_cfisStatic6810 = new BitSet(new long[]{2L});
      FOLLOW_K_ALTER_in_alterMaterializedViewStatement6846 = new BitSet(new long[]{0L, 68719476736L});
      FOLLOW_K_MATERIALIZED_in_alterMaterializedViewStatement6848 = new BitSet(new long[]{0L, 0L, 137438953472L});
      FOLLOW_K_VIEW_in_alterMaterializedViewStatement6850 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_alterMaterializedViewStatement6854 = new BitSet(new long[]{0L, 0L, 549755813888L});
      FOLLOW_K_WITH_in_alterMaterializedViewStatement6866 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_properties_in_alterMaterializedViewStatement6868 = new BitSet(new long[]{2L});
      FOLLOW_K_ALTER_in_alterTypeStatement6899 = new BitSet(new long[]{0L, 0L, 16777216L});
      FOLLOW_K_TYPE_in_alterTypeStatement6901 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_userTypeName_in_alterTypeStatement6905 = new BitSet(new long[]{2281701376L, 2305843009213693952L});
      FOLLOW_K_ALTER_in_alterTypeStatement6919 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_alterTypeStatement6923 = new BitSet(new long[]{0L, 0L, 16777216L});
      FOLLOW_K_TYPE_in_alterTypeStatement6925 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_alterTypeStatement6929 = new BitSet(new long[]{2L});
      FOLLOW_K_ADD_in_alterTypeStatement6945 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_alterTypeStatement6951 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_alterTypeStatement6955 = new BitSet(new long[]{2L});
      FOLLOW_K_RENAME_in_alterTypeStatement6978 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_renamedColumns_in_alterTypeStatement6982 = new BitSet(new long[]{2L});
      FOLLOW_fident_in_renamedColumns7043 = new BitSet(new long[]{0L, 0L, 262144L});
      FOLLOW_K_TO_in_renamedColumns7045 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_renamedColumns7049 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_AND_in_renamedColumns7055 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_renamedColumns7059 = new BitSet(new long[]{0L, 0L, 262144L});
      FOLLOW_K_TO_in_renamedColumns7061 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_renamedColumns7065 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_DROP_in_dropKeyspaceStatement7102 = new BitSet(new long[]{0L, 268435456L});
      FOLLOW_K_KEYSPACE_in_dropKeyspaceStatement7104 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081472806810L});
      FOLLOW_K_IF_in_dropKeyspaceStatement7107 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropKeyspaceStatement7109 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_keyspaceName_in_dropKeyspaceStatement7118 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_dropTableStatement7152 = new BitSet(new long[]{140737488355328L});
      FOLLOW_K_COLUMNFAMILY_in_dropTableStatement7154 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081472806810L});
      FOLLOW_K_IF_in_dropTableStatement7157 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropTableStatement7159 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_dropTableStatement7168 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_dropTypeStatement7202 = new BitSet(new long[]{0L, 0L, 16777216L});
      FOLLOW_K_TYPE_in_dropTypeStatement7204 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1127131519385498L});
      FOLLOW_K_IF_in_dropTypeStatement7207 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropTypeStatement7209 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_userTypeName_in_dropTypeStatement7218 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_dropIndexStatement7252 = new BitSet(new long[]{0L, 131072L});
      FOLLOW_K_INDEX_in_dropIndexStatement7254 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081472806810L});
      FOLLOW_K_IF_in_dropIndexStatement7257 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropIndexStatement7259 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_indexName_in_dropIndexStatement7268 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_dropMaterializedViewStatement7308 = new BitSet(new long[]{0L, 68719476736L});
      FOLLOW_K_MATERIALIZED_in_dropMaterializedViewStatement7310 = new BitSet(new long[]{0L, 0L, 137438953472L});
      FOLLOW_K_VIEW_in_dropMaterializedViewStatement7312 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 1690081472806810L});
      FOLLOW_K_IF_in_dropMaterializedViewStatement7315 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropMaterializedViewStatement7317 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_dropMaterializedViewStatement7326 = new BitSet(new long[]{2L});
      FOLLOW_K_TRUNCATE_in_truncateStatement7357 = new BitSet(new long[]{8137994717766877184L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_K_COLUMNFAMILY_in_truncateStatement7360 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_truncateStatement7366 = new BitSet(new long[]{2L});
      FOLLOW_K_GRANT_in_grantPermissionsStatement7400 = new BitSet(new long[]{-504553565059022848L, -8942977266189837699L, 19141530028867514L});
      FOLLOW_K_AUTHORIZE_in_grantPermissionsStatement7414 = new BitSet(new long[]{0L, 128L});
      FOLLOW_K_FOR_in_grantPermissionsStatement7416 = new BitSet(new long[]{-504553565059022848L, -8942977266189837699L, 19141530028867514L});
      FOLLOW_permissionOrAll_in_grantPermissionsStatement7433 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_ON_in_grantPermissionsStatement7441 = new BitSet(new long[]{8137994717766877184L, -8942977403360355719L, 1690081472806810L});
      FOLLOW_resourceFromInternalName_in_grantPermissionsStatement7457 = new BitSet(new long[]{0L, 0L, 262144L});
      FOLLOW_resource_in_grantPermissionsStatement7465 = new BitSet(new long[]{0L, 0L, 262144L});
      FOLLOW_K_TO_in_grantPermissionsStatement7477 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_grantPermissionsStatement7491 = new BitSet(new long[]{2L});
      FOLLOW_K_REVOKE_in_revokePermissionsStatement7531 = new BitSet(new long[]{-504553565059022848L, -8942977266189837699L, 19141530028867514L});
      FOLLOW_K_AUTHORIZE_in_revokePermissionsStatement7545 = new BitSet(new long[]{0L, 128L});
      FOLLOW_K_FOR_in_revokePermissionsStatement7547 = new BitSet(new long[]{-504553565059022848L, -8942977266189837699L, 19141530028867514L});
      FOLLOW_permissionOrAll_in_revokePermissionsStatement7564 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_ON_in_revokePermissionsStatement7572 = new BitSet(new long[]{8137994717766877184L, -8942977403360355719L, 1690081472806810L});
      FOLLOW_resourceFromInternalName_in_revokePermissionsStatement7588 = new BitSet(new long[]{0L, 256L});
      FOLLOW_resource_in_revokePermissionsStatement7596 = new BitSet(new long[]{0L, 256L});
      FOLLOW_K_FROM_in_revokePermissionsStatement7608 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_revokePermissionsStatement7622 = new BitSet(new long[]{2L});
      FOLLOW_K_RESTRICT_in_restrictPermissionsStatement7662 = new BitSet(new long[]{-504553565059022848L, -8942977266189837699L, 19141530028867514L});
      FOLLOW_permissionOrAll_in_restrictPermissionsStatement7674 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_ON_in_restrictPermissionsStatement7682 = new BitSet(new long[]{8137994717766877184L, -8942977403360355719L, 1690081472806810L});
      FOLLOW_resourceFromInternalName_in_restrictPermissionsStatement7698 = new BitSet(new long[]{0L, 0L, 262144L});
      FOLLOW_resource_in_restrictPermissionsStatement7706 = new BitSet(new long[]{0L, 0L, 262144L});
      FOLLOW_K_TO_in_restrictPermissionsStatement7718 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_restrictPermissionsStatement7732 = new BitSet(new long[]{2L});
      FOLLOW_K_UNRESTRICT_in_unrestrictPermissionsStatement7772 = new BitSet(new long[]{-504553565059022848L, -8942977266189837699L, 19141530028867514L});
      FOLLOW_permissionOrAll_in_unrestrictPermissionsStatement7784 = new BitSet(new long[]{0L, 562949953421312L});
      FOLLOW_K_ON_in_unrestrictPermissionsStatement7792 = new BitSet(new long[]{8137994717766877184L, -8942977403360355719L, 1690081472806810L});
      FOLLOW_resourceFromInternalName_in_unrestrictPermissionsStatement7808 = new BitSet(new long[]{0L, 256L});
      FOLLOW_resource_in_unrestrictPermissionsStatement7816 = new BitSet(new long[]{0L, 256L});
      FOLLOW_K_FROM_in_unrestrictPermissionsStatement7828 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_unrestrictPermissionsStatement7842 = new BitSet(new long[]{2L});
      FOLLOW_K_GRANT_in_grantRoleStatement7873 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_grantRoleStatement7887 = new BitSet(new long[]{0L, 0L, 262144L});
      FOLLOW_K_TO_in_grantRoleStatement7895 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_grantRoleStatement7909 = new BitSet(new long[]{2L});
      FOLLOW_K_REVOKE_in_revokeRoleStatement7940 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_revokeRoleStatement7954 = new BitSet(new long[]{0L, 256L});
      FOLLOW_K_FROM_in_revokeRoleStatement7962 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_revokeRoleStatement7976 = new BitSet(new long[]{2L});
      FOLLOW_K_LIST_in_listPermissionsStatement8014 = new BitSet(new long[]{-504553565059022848L, -8942977266189837699L, 19141530028867514L});
      FOLLOW_permissionOrAll_in_listPermissionsStatement8026 = new BitSet(new long[]{2L, 862017116176384L});
      FOLLOW_K_ON_in_listPermissionsStatement8036 = new BitSet(new long[]{8137994717766877184L, -8942977403360355719L, 1690081472806810L});
      FOLLOW_resource_in_listPermissionsStatement8038 = new BitSet(new long[]{2L, 299067162755072L});
      FOLLOW_K_OF_in_listPermissionsStatement8053 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_roleName_in_listPermissionsStatement8055 = new BitSet(new long[]{2L, 17592186044416L});
      FOLLOW_K_NORECURSIVE_in_listPermissionsStatement8069 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_permissionDomain8099 = new BitSet(new long[]{2L});
      FOLLOW_STRING_LITERAL_in_permissionDomain8107 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_permissionDomain8115 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_permissionDomain8123 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_permissionName8140 = new BitSet(new long[]{2L});
      FOLLOW_STRING_LITERAL_in_permissionName8148 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_permissionName8156 = new BitSet(new long[]{2L});
      FOLLOW_corePermissionName_in_permissionName8164 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_permissionName8172 = new BitSet(new long[]{2L});
      FOLLOW_corePermissionName_in_permission8273 = new BitSet(new long[]{2L});
      FOLLOW_permissionDomain_in_permission8285 = new BitSet(new long[]{0L, 0L, 0L, 512L});
      FOLLOW_201_in_permission8287 = new BitSet(new long[]{-504553565059022848L, -8942977266189837699L, 19141530028867514L});
      FOLLOW_permissionName_in_permission8291 = new BitSet(new long[]{2L});
      FOLLOW_K_ALL_in_permissionOrAll8314 = new BitSet(new long[]{2L, 144115188075855872L});
      FOLLOW_K_PERMISSIONS_in_permissionOrAll8318 = new BitSet(new long[]{2L});
      FOLLOW_K_PERMISSIONS_in_permissionOrAll8337 = new BitSet(new long[]{2L});
      FOLLOW_permission_in_permissionOrAll8349 = new BitSet(new long[]{2L, 72057594037927936L, 0L, 64L});
      FOLLOW_K_PERMISSION_in_permissionOrAll8353 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_198_in_permissionOrAll8382 = new BitSet(new long[]{-504553565059022848L, -8942977266189837699L, 19141530028867514L});
      FOLLOW_permission_in_permissionOrAll8386 = new BitSet(new long[]{2L, 72057594037927936L, 0L, 64L});
      FOLLOW_K_PERMISSION_in_permissionOrAll8390 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_K_RESOURCE_in_resourceFromInternalName8427 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_resourceFromInternalName8429 = new BitSet(new long[]{0L, 0L, 18014398509481984L});
      FOLLOW_STRING_LITERAL_in_resourceFromInternalName8433 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_resourceFromInternalName8435 = new BitSet(new long[]{2L});
      FOLLOW_dataResource_in_cassandraResource8460 = new BitSet(new long[]{2L});
      FOLLOW_roleResource_in_cassandraResource8472 = new BitSet(new long[]{2L});
      FOLLOW_functionResource_in_cassandraResource8484 = new BitSet(new long[]{2L});
      FOLLOW_jmxResource_in_cassandraResource8496 = new BitSet(new long[]{2L});
      FOLLOW_K_ALL_in_dataResource8519 = new BitSet(new long[]{0L, 536870912L});
      FOLLOW_K_KEYSPACES_in_dataResource8521 = new BitSet(new long[]{2L});
      FOLLOW_K_KEYSPACE_in_dataResource8531 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_keyspaceName_in_dataResource8537 = new BitSet(new long[]{2L});
      FOLLOW_K_COLUMNFAMILY_in_dataResource8549 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_columnFamilyName_in_dataResource8558 = new BitSet(new long[]{2L});
      FOLLOW_K_ALL_in_jmxResource8587 = new BitSet(new long[]{0L, 274877906944L});
      FOLLOW_K_MBEANS_in_jmxResource8589 = new BitSet(new long[]{2L});
      FOLLOW_K_MBEAN_in_jmxResource8609 = new BitSet(new long[]{0L, 0L, 18014398509481984L});
      FOLLOW_mbean_in_jmxResource8611 = new BitSet(new long[]{2L});
      FOLLOW_K_MBEANS_in_jmxResource8621 = new BitSet(new long[]{0L, 0L, 18014398509481984L});
      FOLLOW_mbean_in_jmxResource8623 = new BitSet(new long[]{2L});
      FOLLOW_K_ALL_in_roleResource8646 = new BitSet(new long[]{0L, 0L, 16L});
      FOLLOW_K_ROLES_in_roleResource8648 = new BitSet(new long[]{2L});
      FOLLOW_K_ROLE_in_roleResource8658 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_roleResource8664 = new BitSet(new long[]{2L});
      FOLLOW_K_ALL_in_functionResource8696 = new BitSet(new long[]{0L, 4096L});
      FOLLOW_K_FUNCTIONS_in_functionResource8698 = new BitSet(new long[]{2L});
      FOLLOW_K_ALL_in_functionResource8708 = new BitSet(new long[]{0L, 4096L});
      FOLLOW_K_FUNCTIONS_in_functionResource8710 = new BitSet(new long[]{0L, 65536L});
      FOLLOW_K_IN_in_functionResource8712 = new BitSet(new long[]{0L, 268435456L});
      FOLLOW_K_KEYSPACE_in_functionResource8714 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_keyspaceName_in_functionResource8720 = new BitSet(new long[]{2L});
      FOLLOW_K_FUNCTION_in_functionResource8735 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081473331098L});
      FOLLOW_functionName_in_functionResource8739 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_functionResource8757 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L, 8L});
      FOLLOW_comparatorType_in_functionResource8785 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_functionResource8803 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_functionResource8807 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_functionResource8835 = new BitSet(new long[]{2L});
      FOLLOW_K_CREATE_in_createUserStatement8883 = new BitSet(new long[]{0L, 0L, 1073741824L});
      FOLLOW_K_USER_in_createUserStatement8885 = new BitSet(new long[]{8388608L, 32768L, 19140298416324608L});
      FOLLOW_K_IF_in_createUserStatement8888 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createUserStatement8890 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createUserStatement8892 = new BitSet(new long[]{8388608L, 0L, 19140298416324608L});
      FOLLOW_username_in_createUserStatement8900 = new BitSet(new long[]{2L, 35184372088832L, 549755817984L});
      FOLLOW_K_WITH_in_createUserStatement8912 = new BitSet(new long[]{0L, 18014398509481984L});
      FOLLOW_userPassword_in_createUserStatement8914 = new BitSet(new long[]{2L, 35184372088832L, 4096L});
      FOLLOW_K_SUPERUSER_in_createUserStatement8928 = new BitSet(new long[]{2L});
      FOLLOW_K_NOSUPERUSER_in_createUserStatement8934 = new BitSet(new long[]{2L});
      FOLLOW_K_ALTER_in_alterUserStatement8979 = new BitSet(new long[]{0L, 0L, 1073741824L});
      FOLLOW_K_USER_in_alterUserStatement8981 = new BitSet(new long[]{8388608L, 0L, 19140298416324608L});
      FOLLOW_username_in_alterUserStatement8985 = new BitSet(new long[]{2L, 35184372088832L, 549755817984L});
      FOLLOW_K_WITH_in_alterUserStatement8997 = new BitSet(new long[]{0L, 18014398509481984L});
      FOLLOW_userPassword_in_alterUserStatement8999 = new BitSet(new long[]{2L, 35184372088832L, 4096L});
      FOLLOW_K_SUPERUSER_in_alterUserStatement9013 = new BitSet(new long[]{2L});
      FOLLOW_K_NOSUPERUSER_in_alterUserStatement9027 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_dropUserStatement9073 = new BitSet(new long[]{0L, 0L, 1073741824L});
      FOLLOW_K_USER_in_dropUserStatement9075 = new BitSet(new long[]{8388608L, 32768L, 19140298416324608L});
      FOLLOW_K_IF_in_dropUserStatement9078 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropUserStatement9080 = new BitSet(new long[]{8388608L, 0L, 19140298416324608L});
      FOLLOW_username_in_dropUserStatement9088 = new BitSet(new long[]{2L});
      FOLLOW_K_LIST_in_listUsersStatement9113 = new BitSet(new long[]{0L, 0L, 2147483648L});
      FOLLOW_K_USERS_in_listUsersStatement9115 = new BitSet(new long[]{2L});
      FOLLOW_K_CREATE_in_createRoleStatement9149 = new BitSet(new long[]{0L, 0L, 8L});
      FOLLOW_K_ROLE_in_createRoleStatement9151 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 19704479982288794L});
      FOLLOW_K_IF_in_createRoleStatement9154 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_createRoleStatement9156 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_createRoleStatement9158 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_createRoleStatement9166 = new BitSet(new long[]{2L, 0L, 549755813888L});
      FOLLOW_K_WITH_in_createRoleStatement9176 = new BitSet(new long[]{0L, 19140315596193792L, 4096L});
      FOLLOW_roleOptions_in_createRoleStatement9178 = new BitSet(new long[]{2L});
      FOLLOW_K_ALTER_in_alterRoleStatement9222 = new BitSet(new long[]{0L, 0L, 8L});
      FOLLOW_K_ROLE_in_alterRoleStatement9224 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_alterRoleStatement9228 = new BitSet(new long[]{2L, 0L, 549755813888L});
      FOLLOW_K_WITH_in_alterRoleStatement9238 = new BitSet(new long[]{0L, 19140315596193792L, 4096L});
      FOLLOW_roleOptions_in_alterRoleStatement9240 = new BitSet(new long[]{2L});
      FOLLOW_K_DROP_in_dropRoleStatement9284 = new BitSet(new long[]{0L, 0L, 8L});
      FOLLOW_K_ROLE_in_dropRoleStatement9286 = new BitSet(new long[]{8137853980278521856L, -8942977815945618823L, 19704479982288794L});
      FOLLOW_K_IF_in_dropRoleStatement9289 = new BitSet(new long[]{0L, 8L});
      FOLLOW_K_EXISTS_in_dropRoleStatement9291 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_userOrRoleName_in_dropRoleStatement9299 = new BitSet(new long[]{2L});
      FOLLOW_K_LIST_in_listRolesStatement9339 = new BitSet(new long[]{0L, 0L, 16L});
      FOLLOW_K_ROLES_in_listRolesStatement9341 = new BitSet(new long[]{2L, 299067162755072L});
      FOLLOW_K_OF_in_listRolesStatement9351 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19704479982288794L});
      FOLLOW_roleName_in_listRolesStatement9353 = new BitSet(new long[]{2L, 17592186044416L});
      FOLLOW_K_NORECURSIVE_in_listRolesStatement9366 = new BitSet(new long[]{2L});
      FOLLOW_roleOption_in_roleOptions9397 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_AND_in_roleOptions9401 = new BitSet(new long[]{0L, 19140315596193792L, 4096L});
      FOLLOW_roleOption_in_roleOptions9403 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_PASSWORD_in_roleOption9425 = new BitSet(new long[]{0L, 0L, 0L, 32768L});
      FOLLOW_207_in_roleOption9427 = new BitSet(new long[]{0L, 0L, 18014398509481984L});
      FOLLOW_STRING_LITERAL_in_roleOption9431 = new BitSet(new long[]{2L});
      FOLLOW_K_OPTIONS_in_roleOption9442 = new BitSet(new long[]{0L, 0L, 0L, 32768L});
      FOLLOW_207_in_roleOption9444 = new BitSet(new long[]{0L, 0L, 0L, 4194304L});
      FOLLOW_fullMapLiteral_in_roleOption9448 = new BitSet(new long[]{2L});
      FOLLOW_K_SUPERUSER_in_roleOption9459 = new BitSet(new long[]{0L, 0L, 0L, 32768L});
      FOLLOW_207_in_roleOption9461 = new BitSet(new long[]{64L});
      FOLLOW_BOOLEAN_in_roleOption9465 = new BitSet(new long[]{2L});
      FOLLOW_K_LOGIN_in_roleOption9476 = new BitSet(new long[]{0L, 0L, 0L, 32768L});
      FOLLOW_207_in_roleOption9478 = new BitSet(new long[]{64L});
      FOLLOW_BOOLEAN_in_roleOption9482 = new BitSet(new long[]{2L});
      FOLLOW_K_PASSWORD_in_userPassword9504 = new BitSet(new long[]{0L, 0L, 18014398509481984L});
      FOLLOW_STRING_LITERAL_in_userPassword9508 = new BitSet(new long[]{2L});
      FOLLOW_EMPTY_QUOTED_NAME_in_cident9540 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_cident9555 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_cident9580 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_cident9599 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_schema_cident9624 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_schema_cident9649 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_schema_cident9668 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_ident9694 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_ident9719 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_ident9738 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_fident9763 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_fident9788 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_fident9807 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_noncol_ident9833 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_noncol_ident9858 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_noncol_ident9877 = new BitSet(new long[]{2L});
      FOLLOW_ksName_in_keyspaceName9910 = new BitSet(new long[]{2L});
      FOLLOW_ksName_in_indexName9944 = new BitSet(new long[]{0L, 0L, 0L, 512L});
      FOLLOW_201_in_indexName9947 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_idxName_in_indexName9951 = new BitSet(new long[]{2L});
      FOLLOW_ksName_in_columnFamilyName9983 = new BitSet(new long[]{0L, 0L, 0L, 512L});
      FOLLOW_201_in_columnFamilyName9986 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1690081472806810L});
      FOLLOW_cfName_in_columnFamilyName9990 = new BitSet(new long[]{2L});
      FOLLOW_noncol_ident_in_userTypeName10015 = new BitSet(new long[]{0L, 0L, 0L, 512L});
      FOLLOW_201_in_userTypeName10017 = new BitSet(new long[]{1162861107715506176L, -8942977815983662536L, 1125920334159514L});
      FOLLOW_non_type_ident_in_userTypeName10023 = new BitSet(new long[]{2L});
      FOLLOW_roleName_in_userOrRoleName10055 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_ksName10078 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_ksName10103 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_ksName10122 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_ksName10132 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_cfName10154 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_cfName10179 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_cfName10198 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_cfName10208 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_idxName10230 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_idxName10255 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_idxName10274 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_idxName10284 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_roleName10306 = new BitSet(new long[]{2L});
      FOLLOW_STRING_LITERAL_in_roleName10331 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_roleName10347 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_roleName10366 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_roleName10376 = new BitSet(new long[]{2L});
      FOLLOW_STRING_LITERAL_in_constant10401 = new BitSet(new long[]{2L});
      FOLLOW_INTEGER_in_constant10413 = new BitSet(new long[]{2L});
      FOLLOW_FLOAT_in_constant10432 = new BitSet(new long[]{2L});
      FOLLOW_BOOLEAN_in_constant10453 = new BitSet(new long[]{2L});
      FOLLOW_DURATION_in_constant10472 = new BitSet(new long[]{2L});
      FOLLOW_UUID_in_constant10490 = new BitSet(new long[]{2L});
      FOLLOW_HEXNUMBER_in_constant10512 = new BitSet(new long[]{2L});
      FOLLOW_set_in_constant10528 = new BitSet(new long[]{2L});
      FOLLOW_K_POSITIVE_INFINITY_in_constant10548 = new BitSet(new long[]{2L});
      FOLLOW_K_NEGATIVE_INFINITY_in_constant10563 = new BitSet(new long[]{2L});
      FOLLOW_214_in_fullMapLiteral10604 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 12847236L});
      FOLLOW_term_in_fullMapLiteral10610 = new BitSet(new long[]{0L, 0L, 0L, 2048L});
      FOLLOW_203_in_fullMapLiteral10612 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_fullMapLiteral10616 = new BitSet(new long[]{0L, 0L, 0L, 8388672L});
      FOLLOW_198_in_fullMapLiteral10622 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_fullMapLiteral10626 = new BitSet(new long[]{0L, 0L, 0L, 2048L});
      FOLLOW_203_in_fullMapLiteral10628 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_fullMapLiteral10632 = new BitSet(new long[]{0L, 0L, 0L, 8388672L});
      FOLLOW_215_in_fullMapLiteral10648 = new BitSet(new long[]{2L});
      FOLLOW_mapLiteral_in_setOrMapLiteral10672 = new BitSet(new long[]{2L});
      FOLLOW_setLiteral_in_setOrMapLiteral10685 = new BitSet(new long[]{2L});
      FOLLOW_198_in_setLiteral10730 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_setLiteral10734 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_203_in_mapLiteral10779 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_mapLiteral10783 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_198_in_mapLiteral10789 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_mapLiteral10793 = new BitSet(new long[]{0L, 0L, 0L, 2048L});
      FOLLOW_203_in_mapLiteral10795 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_mapLiteral10799 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_listLiteral_in_collectionLiteral10827 = new BitSet(new long[]{2L});
      FOLLOW_214_in_collectionLiteral10837 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_collectionLiteral10841 = new BitSet(new long[]{0L, 0L, 0L, 2112L});
      FOLLOW_setOrMapLiteral_in_collectionLiteral10845 = new BitSet(new long[]{0L, 0L, 0L, 8388608L});
      FOLLOW_215_in_collectionLiteral10850 = new BitSet(new long[]{2L});
      FOLLOW_214_in_collectionLiteral10868 = new BitSet(new long[]{0L, 0L, 0L, 8388608L});
      FOLLOW_215_in_collectionLiteral10870 = new BitSet(new long[]{2L});
      FOLLOW_210_in_listLiteral10911 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 5507204L});
      FOLLOW_term_in_listLiteral10917 = new BitSet(new long[]{0L, 0L, 0L, 1048640L});
      FOLLOW_198_in_listLiteral10923 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_listLiteral10927 = new BitSet(new long[]{0L, 0L, 0L, 1048640L});
      FOLLOW_212_in_listLiteral10937 = new BitSet(new long[]{2L});
      FOLLOW_214_in_usertypeLiteral10981 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_usertypeLiteral10985 = new BitSet(new long[]{0L, 0L, 0L, 2048L});
      FOLLOW_203_in_usertypeLiteral10987 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_usertypeLiteral10991 = new BitSet(new long[]{0L, 0L, 0L, 8388672L});
      FOLLOW_198_in_usertypeLiteral10997 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_usertypeLiteral11001 = new BitSet(new long[]{0L, 0L, 0L, 2048L});
      FOLLOW_203_in_usertypeLiteral11003 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_usertypeLiteral11007 = new BitSet(new long[]{0L, 0L, 0L, 8388672L});
      FOLLOW_215_in_usertypeLiteral11014 = new BitSet(new long[]{2L});
      FOLLOW_194_in_tupleLiteral11051 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_tupleLiteral11055 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_tupleLiteral11061 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_tupleLiteral11065 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_tupleLiteral11072 = new BitSet(new long[]{2L});
      FOLLOW_constant_in_value11095 = new BitSet(new long[]{2L});
      FOLLOW_collectionLiteral_in_value11117 = new BitSet(new long[]{2L});
      FOLLOW_usertypeLiteral_in_value11130 = new BitSet(new long[]{2L});
      FOLLOW_tupleLiteral_in_value11145 = new BitSet(new long[]{2L});
      FOLLOW_K_NULL_in_value11161 = new BitSet(new long[]{2L});
      FOLLOW_203_in_value11185 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_value11189 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_value11200 = new BitSet(new long[]{2L});
      FOLLOW_INTEGER_in_intValue11240 = new BitSet(new long[]{2L});
      FOLLOW_203_in_intValue11254 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_intValue11258 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_intValue11269 = new BitSet(new long[]{2L});
      FOLLOW_keyspaceName_in_functionName11315 = new BitSet(new long[]{0L, 0L, 0L, 512L});
      FOLLOW_201_in_functionName11317 = new BitSet(new long[]{5831975786692739072L, -8942977816046314887L, 1126032004087706L});
      FOLLOW_allowedFunctionName_in_functionName11323 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_allowedFunctionName11350 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_allowedFunctionName11384 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_function_keyword_in_allowedFunctionName11412 = new BitSet(new long[]{2L});
      FOLLOW_K_TOKEN_in_allowedFunctionName11422 = new BitSet(new long[]{2L});
      FOLLOW_K_COUNT_in_allowedFunctionName11454 = new BitSet(new long[]{2L});
      FOLLOW_functionName_in_function11501 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_function11503 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_function11505 = new BitSet(new long[]{2L});
      FOLLOW_functionName_in_function11535 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_194_in_function11537 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_functionArgs_in_function11541 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_function11543 = new BitSet(new long[]{2L});
      FOLLOW_term_in_functionArgs11576 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_198_in_functionArgs11582 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_functionArgs11586 = new BitSet(new long[]{2L, 0L, 0L, 64L});
      FOLLOW_termAddition_in_term11614 = new BitSet(new long[]{2L});
      FOLLOW_termMultiplication_in_termAddition11666 = new BitSet(new long[]{2L, 0L, 0L, 144L});
      FOLLOW_196_in_termAddition11682 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_termMultiplication_in_termAddition11686 = new BitSet(new long[]{2L, 0L, 0L, 144L});
      FOLLOW_199_in_termAddition11700 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_termMultiplication_in_termAddition11704 = new BitSet(new long[]{2L, 0L, 0L, 144L});
      FOLLOW_termGroup_in_termMultiplication11742 = new BitSet(new long[]{2L, 0L, 0L, 525314L});
      FOLLOW_211_in_termMultiplication11758 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_termGroup_in_termMultiplication11762 = new BitSet(new long[]{2L, 0L, 0L, 525314L});
      FOLLOW_202_in_termMultiplication11776 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_termGroup_in_termMultiplication11780 = new BitSet(new long[]{2L, 0L, 0L, 525314L});
      FOLLOW_193_in_termMultiplication11794 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_termGroup_in_termMultiplication11798 = new BitSet(new long[]{2L, 0L, 0L, 525314L});
      FOLLOW_simpleTerm_in_termGroup11834 = new BitSet(new long[]{2L});
      FOLLOW_199_in_termGroup11857 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458500L});
      FOLLOW_simpleTerm_in_termGroup11862 = new BitSet(new long[]{2L});
      FOLLOW_value_in_simpleTerm11895 = new BitSet(new long[]{2L});
      FOLLOW_function_in_simpleTerm11939 = new BitSet(new long[]{2L});
      FOLLOW_194_in_simpleTerm11978 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_simpleTerm11982 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_simpleTerm11984 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458500L});
      FOLLOW_simpleTerm_in_simpleTerm11988 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_columnOperation12012 = new BitSet(new long[]{0L, 0L, 0L, 295712L});
      FOLLOW_columnOperationDifferentiator_in_columnOperation12014 = new BitSet(new long[]{2L});
      FOLLOW_207_in_columnOperationDifferentiator12033 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_normalColumnOperation_in_columnOperationDifferentiator12035 = new BitSet(new long[]{2L});
      FOLLOW_shorthandColumnOperation_in_columnOperationDifferentiator12044 = new BitSet(new long[]{2L});
      FOLLOW_210_in_columnOperationDifferentiator12053 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_columnOperationDifferentiator12057 = new BitSet(new long[]{0L, 0L, 0L, 1048576L});
      FOLLOW_212_in_columnOperationDifferentiator12059 = new BitSet(new long[]{0L, 0L, 0L, 32768L});
      FOLLOW_collectionColumnOperation_in_columnOperationDifferentiator12061 = new BitSet(new long[]{2L});
      FOLLOW_201_in_columnOperationDifferentiator12070 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_columnOperationDifferentiator12074 = new BitSet(new long[]{0L, 0L, 0L, 32768L});
      FOLLOW_udtColumnOperation_in_columnOperationDifferentiator12076 = new BitSet(new long[]{2L});
      FOLLOW_term_in_normalColumnOperation12097 = new BitSet(new long[]{2L, 0L, 0L, 16L});
      FOLLOW_196_in_normalColumnOperation12100 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_normalColumnOperation12104 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_normalColumnOperation12125 = new BitSet(new long[]{0L, 0L, 0L, 144L});
      FOLLOW_set_in_normalColumnOperation12129 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_normalColumnOperation12139 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_normalColumnOperation12157 = new BitSet(new long[]{16777216L});
      FOLLOW_INTEGER_in_normalColumnOperation12161 = new BitSet(new long[]{2L});
      FOLLOW_set_in_shorthandColumnOperation12189 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_shorthandColumnOperation12199 = new BitSet(new long[]{2L});
      FOLLOW_207_in_collectionColumnOperation12225 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_collectionColumnOperation12229 = new BitSet(new long[]{2L});
      FOLLOW_207_in_udtColumnOperation12255 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_udtColumnOperation12259 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_columnCondition12292 = new BitSet(new long[]{0L, 65536L, 0L, 516609L});
      FOLLOW_relationType_in_columnCondition12306 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_columnCondition12310 = new BitSet(new long[]{2L});
      FOLLOW_K_IN_in_columnCondition12324 = new BitSet(new long[]{0L, 0L, 562949953421312L, 2052L});
      FOLLOW_singleColumnInValues_in_columnCondition12342 = new BitSet(new long[]{2L});
      FOLLOW_inMarker_in_columnCondition12362 = new BitSet(new long[]{2L});
      FOLLOW_210_in_columnCondition12390 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_columnCondition12394 = new BitSet(new long[]{0L, 0L, 0L, 1048576L});
      FOLLOW_212_in_columnCondition12396 = new BitSet(new long[]{0L, 65536L, 0L, 253953L});
      FOLLOW_relationType_in_columnCondition12414 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_columnCondition12418 = new BitSet(new long[]{2L});
      FOLLOW_K_IN_in_columnCondition12436 = new BitSet(new long[]{0L, 0L, 562949953421312L, 2052L});
      FOLLOW_singleColumnInValues_in_columnCondition12458 = new BitSet(new long[]{2L});
      FOLLOW_inMarker_in_columnCondition12482 = new BitSet(new long[]{2L});
      FOLLOW_201_in_columnCondition12528 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_fident_in_columnCondition12532 = new BitSet(new long[]{0L, 65536L, 0L, 253953L});
      FOLLOW_relationType_in_columnCondition12550 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_columnCondition12554 = new BitSet(new long[]{2L});
      FOLLOW_K_IN_in_columnCondition12572 = new BitSet(new long[]{0L, 0L, 562949953421312L, 2052L});
      FOLLOW_singleColumnInValues_in_columnCondition12594 = new BitSet(new long[]{2L});
      FOLLOW_inMarker_in_columnCondition12618 = new BitSet(new long[]{2L});
      FOLLOW_property_in_properties12680 = new BitSet(new long[]{4294967298L});
      FOLLOW_K_AND_in_properties12684 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_property_in_properties12686 = new BitSet(new long[]{4294967298L});
      FOLLOW_noncol_ident_in_property12709 = new BitSet(new long[]{0L, 0L, 0L, 32768L});
      FOLLOW_207_in_property12711 = new BitSet(new long[]{8137853980289140800L, -8078280090420749703L, 162130818197880730L});
      FOLLOW_propertyValue_in_property12715 = new BitSet(new long[]{2L});
      FOLLOW_noncol_ident_in_property12727 = new BitSet(new long[]{0L, 0L, 0L, 32768L});
      FOLLOW_207_in_property12729 = new BitSet(new long[]{0L, 0L, 0L, 4194304L});
      FOLLOW_fullMapLiteral_in_property12733 = new BitSet(new long[]{2L});
      FOLLOW_constant_in_propertyValue12758 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_keyword_in_propertyValue12780 = new BitSet(new long[]{2L});
      FOLLOW_207_in_relationType12803 = new BitSet(new long[]{2L});
      FOLLOW_205_in_relationType12814 = new BitSet(new long[]{2L});
      FOLLOW_206_in_relationType12825 = new BitSet(new long[]{2L});
      FOLLOW_208_in_relationType12835 = new BitSet(new long[]{2L});
      FOLLOW_209_in_relationType12846 = new BitSet(new long[]{2L});
      FOLLOW_192_in_relationType12856 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_relation12878 = new BitSet(new long[]{0L, 0L, 0L, 253953L});
      FOLLOW_relationType_in_relation12882 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_relation12886 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_relation12898 = new BitSet(new long[]{0L, 2147483648L});
      FOLLOW_K_LIKE_in_relation12900 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_relation12904 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_relation12916 = new BitSet(new long[]{0L, 16777216L});
      FOLLOW_K_IS_in_relation12918 = new BitSet(new long[]{0L, 70368744177664L});
      FOLLOW_K_NOT_in_relation12920 = new BitSet(new long[]{0L, 140737488355328L});
      FOLLOW_K_NULL_in_relation12922 = new BitSet(new long[]{2L});
      FOLLOW_K_TOKEN_in_relation12932 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_tupleOfIdentifiers_in_relation12936 = new BitSet(new long[]{0L, 0L, 0L, 253953L});
      FOLLOW_relationType_in_relation12940 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_relation12944 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_relation12964 = new BitSet(new long[]{0L, 65536L});
      FOLLOW_K_IN_in_relation12966 = new BitSet(new long[]{0L, 0L, 562949953421312L, 2048L});
      FOLLOW_inMarker_in_relation12970 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_relation12990 = new BitSet(new long[]{0L, 65536L});
      FOLLOW_K_IN_in_relation12992 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_singleColumnInValues_in_relation12996 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_relation13016 = new BitSet(new long[]{562949953421312L});
      FOLLOW_containsOperator_in_relation13020 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_relation13024 = new BitSet(new long[]{2L});
      FOLLOW_cident_in_relation13036 = new BitSet(new long[]{0L, 0L, 0L, 262144L});
      FOLLOW_210_in_relation13038 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_relation13042 = new BitSet(new long[]{0L, 0L, 0L, 1048576L});
      FOLLOW_212_in_relation13044 = new BitSet(new long[]{0L, 0L, 0L, 253953L});
      FOLLOW_relationType_in_relation13048 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_relation13052 = new BitSet(new long[]{2L});
      FOLLOW_tupleOfIdentifiers_in_relation13064 = new BitSet(new long[]{0L, 65536L, 0L, 253953L});
      FOLLOW_K_IN_in_relation13074 = new BitSet(new long[]{0L, 0L, 562949953421312L, 2052L});
      FOLLOW_194_in_relation13088 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_relation13090 = new BitSet(new long[]{2L});
      FOLLOW_inMarkerForTuple_in_relation13122 = new BitSet(new long[]{2L});
      FOLLOW_tupleOfTupleLiterals_in_relation13156 = new BitSet(new long[]{2L});
      FOLLOW_tupleOfMarkersForTuples_in_relation13190 = new BitSet(new long[]{2L});
      FOLLOW_relationType_in_relation13232 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_tupleLiteral_in_relation13236 = new BitSet(new long[]{2L});
      FOLLOW_relationType_in_relation13262 = new BitSet(new long[]{0L, 0L, 562949953421312L, 2048L});
      FOLLOW_markerForTuple_in_relation13266 = new BitSet(new long[]{2L});
      FOLLOW_194_in_relation13296 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519909786L, 4L});
      FOLLOW_relation_in_relation13298 = new BitSet(new long[]{0L, 0L, 0L, 8L});
      FOLLOW_195_in_relation13301 = new BitSet(new long[]{2L});
      FOLLOW_K_CONTAINS_in_containsOperator13322 = new BitSet(new long[]{2L, 67108864L});
      FOLLOW_K_KEY_in_containsOperator13327 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_inMarker13352 = new BitSet(new long[]{2L});
      FOLLOW_203_in_inMarker13362 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_inMarker13366 = new BitSet(new long[]{2L});
      FOLLOW_194_in_tupleOfIdentifiers13398 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_tupleOfIdentifiers13402 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_tupleOfIdentifiers13407 = new BitSet(new long[]{8137853980278538240L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_cident_in_tupleOfIdentifiers13411 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_tupleOfIdentifiers13417 = new BitSet(new long[]{2L});
      FOLLOW_194_in_singleColumnInValues13447 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458636L});
      FOLLOW_term_in_singleColumnInValues13455 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_singleColumnInValues13460 = new BitSet(new long[]{8137853980297529408L, -8078139352932394375L, 163819668058668954L, 4458628L});
      FOLLOW_term_in_singleColumnInValues13464 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_singleColumnInValues13473 = new BitSet(new long[]{2L});
      FOLLOW_194_in_tupleOfTupleLiterals13503 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_tupleLiteral_in_tupleOfTupleLiterals13507 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_tupleOfTupleLiterals13512 = new BitSet(new long[]{0L, 0L, 0L, 4L});
      FOLLOW_tupleLiteral_in_tupleOfTupleLiterals13516 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_tupleOfTupleLiterals13522 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_markerForTuple13543 = new BitSet(new long[]{2L});
      FOLLOW_203_in_markerForTuple13553 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_markerForTuple13557 = new BitSet(new long[]{2L});
      FOLLOW_194_in_tupleOfMarkersForTuples13589 = new BitSet(new long[]{0L, 0L, 562949953421312L, 2048L});
      FOLLOW_markerForTuple_in_tupleOfMarkersForTuples13593 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_198_in_tupleOfMarkersForTuples13598 = new BitSet(new long[]{0L, 0L, 562949953421312L, 2048L});
      FOLLOW_markerForTuple_in_tupleOfMarkersForTuples13602 = new BitSet(new long[]{0L, 0L, 0L, 72L});
      FOLLOW_195_in_tupleOfMarkersForTuples13608 = new BitSet(new long[]{2L});
      FOLLOW_QMARK_in_inMarkerForTuple13629 = new BitSet(new long[]{2L});
      FOLLOW_203_in_inMarkerForTuple13639 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 1127131519385498L});
      FOLLOW_noncol_ident_in_inMarkerForTuple13643 = new BitSet(new long[]{2L});
      FOLLOW_native_type_in_comparatorTypeWithoutTuples13668 = new BitSet(new long[]{2L});
      FOLLOW_collection_type_in_comparatorTypeWithoutTuples13684 = new BitSet(new long[]{2L});
      FOLLOW_userTypeName_in_comparatorTypeWithoutTuples13696 = new BitSet(new long[]{2L});
      FOLLOW_K_FROZEN_in_comparatorTypeWithoutTuples13708 = new BitSet(new long[]{0L, 0L, 0L, 8192L});
      FOLLOW_205_in_comparatorTypeWithoutTuples13710 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_comparatorTypeWithoutTuples13714 = new BitSet(new long[]{0L, 0L, 0L, 65536L});
      FOLLOW_208_in_comparatorTypeWithoutTuples13716 = new BitSet(new long[]{2L});
      FOLLOW_STRING_LITERAL_in_comparatorTypeWithoutTuples13734 = new BitSet(new long[]{2L});
      FOLLOW_comparatorTypeWithoutTuples_in_comparatorType13766 = new BitSet(new long[]{2L});
      FOLLOW_tuple_types_in_comparatorType13782 = new BitSet(new long[]{2L});
      FOLLOW_comparatorTypeWithoutTuples_in_comparatorTypeWithMultiCellTuple13827 = new BitSet(new long[]{2L});
      FOLLOW_tuple_types_in_comparatorTypeWithMultiCellTuple13843 = new BitSet(new long[]{2L});
      FOLLOW_K_ASCII_in_native_type13886 = new BitSet(new long[]{2L});
      FOLLOW_K_BIGINT_in_native_type13900 = new BitSet(new long[]{2L});
      FOLLOW_K_BLOB_in_native_type13913 = new BitSet(new long[]{2L});
      FOLLOW_K_BOOLEAN_in_native_type13928 = new BitSet(new long[]{2L});
      FOLLOW_K_COUNTER_in_native_type13940 = new BitSet(new long[]{2L});
      FOLLOW_K_DECIMAL_in_native_type13952 = new BitSet(new long[]{2L});
      FOLLOW_K_DOUBLE_in_native_type13964 = new BitSet(new long[]{2L});
      FOLLOW_K_DURATION_in_native_type13977 = new BitSet(new long[]{2L});
      FOLLOW_K_FLOAT_in_native_type13990 = new BitSet(new long[]{2L});
      FOLLOW_K_INET_in_native_type14004 = new BitSet(new long[]{2L});
      FOLLOW_K_INT_in_native_type14019 = new BitSet(new long[]{2L});
      FOLLOW_K_SMALLINT_in_native_type14035 = new BitSet(new long[]{2L});
      FOLLOW_K_TEXT_in_native_type14046 = new BitSet(new long[]{2L});
      FOLLOW_K_TIMESTAMP_in_native_type14061 = new BitSet(new long[]{2L});
      FOLLOW_K_TINYINT_in_native_type14071 = new BitSet(new long[]{2L});
      FOLLOW_K_UUID_in_native_type14083 = new BitSet(new long[]{2L});
      FOLLOW_K_VARCHAR_in_native_type14098 = new BitSet(new long[]{2L});
      FOLLOW_K_VARINT_in_native_type14110 = new BitSet(new long[]{2L});
      FOLLOW_K_TIMEUUID_in_native_type14123 = new BitSet(new long[]{2L});
      FOLLOW_K_DATE_in_native_type14134 = new BitSet(new long[]{2L});
      FOLLOW_K_TIME_in_native_type14149 = new BitSet(new long[]{2L});
      FOLLOW_K_MAP_in_collection_type14177 = new BitSet(new long[]{0L, 0L, 0L, 8192L});
      FOLLOW_205_in_collection_type14180 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_collection_type14184 = new BitSet(new long[]{0L, 0L, 0L, 64L});
      FOLLOW_198_in_collection_type14186 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_collection_type14190 = new BitSet(new long[]{0L, 0L, 0L, 65536L});
      FOLLOW_208_in_collection_type14192 = new BitSet(new long[]{2L});
      FOLLOW_K_LIST_in_collection_type14210 = new BitSet(new long[]{0L, 0L, 0L, 8192L});
      FOLLOW_205_in_collection_type14212 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_collection_type14216 = new BitSet(new long[]{0L, 0L, 0L, 65536L});
      FOLLOW_208_in_collection_type14218 = new BitSet(new long[]{2L});
      FOLLOW_K_SET_in_collection_type14236 = new BitSet(new long[]{0L, 0L, 0L, 8192L});
      FOLLOW_205_in_collection_type14239 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_collection_type14243 = new BitSet(new long[]{0L, 0L, 0L, 65536L});
      FOLLOW_208_in_collection_type14245 = new BitSet(new long[]{2L});
      FOLLOW_K_TUPLE_in_tuple_types14276 = new BitSet(new long[]{0L, 0L, 0L, 8192L});
      FOLLOW_205_in_tuple_types14278 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_tuple_types14282 = new BitSet(new long[]{0L, 0L, 0L, 65600L});
      FOLLOW_198_in_tuple_types14287 = new BitSet(new long[]{8137853980278521856L, -8942977815945651591L, 19141530028867546L});
      FOLLOW_comparatorType_in_tuple_types14291 = new BitSet(new long[]{0L, 0L, 0L, 65600L});
      FOLLOW_208_in_tuple_types14297 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_username14314 = new BitSet(new long[]{2L});
      FOLLOW_STRING_LITERAL_in_username14322 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_username14330 = new BitSet(new long[]{2L});
      FOLLOW_STRING_LITERAL_in_mbean14349 = new BitSet(new long[]{2L});
      FOLLOW_IDENT_in_non_type_ident14374 = new BitSet(new long[]{2L});
      FOLLOW_QUOTED_NAME_in_non_type_ident14405 = new BitSet(new long[]{2L});
      FOLLOW_basic_unreserved_keyword_in_non_type_ident14430 = new BitSet(new long[]{2L});
      FOLLOW_K_KEY_in_non_type_ident14442 = new BitSet(new long[]{2L});
      FOLLOW_unreserved_function_keyword_in_unreserved_keyword14485 = new BitSet(new long[]{2L});
      FOLLOW_set_in_unreserved_keyword14501 = new BitSet(new long[]{2L});
      FOLLOW_basic_unreserved_keyword_in_unreserved_function_keyword14552 = new BitSet(new long[]{2L});
      FOLLOW_native_type_in_unreserved_function_keyword14564 = new BitSet(new long[]{2L});
      FOLLOW_set_in_basic_unreserved_keyword14602 = new BitSet(new long[]{2L});
      FOLLOW_K_JSON_in_synpred1_Parser1090 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4982916L});
      FOLLOW_selectClause_in_synpred1_Parser1092 = new BitSet(new long[]{2L});
      FOLLOW_K_DISTINCT_in_synpred2_Parser1293 = new BitSet(new long[]{8137853980297545792L, -8078139352932394375L, 163819668058668954L, 4982916L});
      FOLLOW_selectors_in_synpred2_Parser1295 = new BitSet(new long[]{2L});
      FOLLOW_selectionGroupWithField_in_synpred3_Parser1624 = new BitSet(new long[]{2L});
      FOLLOW_selectionTypeHint_in_synpred4_Parser1911 = new BitSet(new long[]{2L});
   }

   protected class DFA239 extends DFA {
      public DFA239(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 239;
         this.eot = Cql_Parser.DFA239_eot;
         this.eof = Cql_Parser.DFA239_eof;
         this.min = Cql_Parser.DFA239_min;
         this.max = Cql_Parser.DFA239_max;
         this.accept = Cql_Parser.DFA239_accept;
         this.special = Cql_Parser.DFA239_special;
         this.transition = Cql_Parser.DFA239_transition;
      }

      public String getDescription() {
         return "1800:1: comparatorTypeWithoutTuples returns [CQL3Type.Raw t] : (n= native_type |c= collection_type |id= userTypeName | K_FROZEN '<' f= comparatorType '>' |s= STRING_LITERAL );";
      }
   }

   protected class DFA228 extends DFA {
      public DFA228(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 228;
         this.eot = Cql_Parser.DFA228_eot;
         this.eof = Cql_Parser.DFA228_eof;
         this.min = Cql_Parser.DFA228_min;
         this.max = Cql_Parser.DFA228_max;
         this.accept = Cql_Parser.DFA228_accept;
         this.special = Cql_Parser.DFA228_special;
         this.transition = Cql_Parser.DFA228_transition;
      }

      public String getDescription() {
         return "1739:7: ( K_IN ( '(' ')' |tupleInMarker= inMarkerForTuple |literals= tupleOfTupleLiterals |markers= tupleOfMarkersForTuples ) |type= relationType literal= tupleLiteral |type= relationType tupleMarker= markerForTuple )";
      }
   }

   protected class DFA229 extends DFA {
      public DFA229(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 229;
         this.eot = Cql_Parser.DFA229_eot;
         this.eof = Cql_Parser.DFA229_eof;
         this.min = Cql_Parser.DFA229_min;
         this.max = Cql_Parser.DFA229_max;
         this.accept = Cql_Parser.DFA229_accept;
         this.special = Cql_Parser.DFA229_special;
         this.transition = Cql_Parser.DFA229_transition;
      }

      public String getDescription() {
         return "1726:1: relation[WhereClause.Builder clauses] : (name= cident type= relationType t= term |name= cident K_LIKE t= term |name= cident K_IS K_NOT K_NULL | K_TOKEN l= tupleOfIdentifiers type= relationType t= term |name= cident K_IN marker= inMarker |name= cident K_IN inValues= singleColumnInValues |name= cident rt= containsOperator t= term |name= cident '[' key= term ']' type= relationType t= term |ids= tupleOfIdentifiers ( K_IN ( '(' ')' |tupleInMarker= inMarkerForTuple |literals= tupleOfTupleLiterals |markers= tupleOfMarkersForTuples ) |type= relationType literal= tupleLiteral |type= relationType tupleMarker= markerForTuple ) | '(' relation[$clauses] ')' );";
      }
   }

   protected class DFA224 extends DFA {
      public DFA224(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 224;
         this.eot = Cql_Parser.DFA224_eot;
         this.eof = Cql_Parser.DFA224_eof;
         this.min = Cql_Parser.DFA224_min;
         this.max = Cql_Parser.DFA224_max;
         this.accept = Cql_Parser.DFA224_accept;
         this.special = Cql_Parser.DFA224_special;
         this.transition = Cql_Parser.DFA224_transition;
      }

      public String getDescription() {
         return "1707:1: property[PropertyDefinitions props] : (k= noncol_ident '=' simple= propertyValue |k= noncol_ident '=' map= fullMapLiteral );";
      }
   }

   protected class DFA216 extends DFA {
      public DFA216(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 216;
         this.eot = Cql_Parser.DFA216_eot;
         this.eof = Cql_Parser.DFA216_eof;
         this.min = Cql_Parser.DFA216_min;
         this.max = Cql_Parser.DFA216_max;
         this.accept = Cql_Parser.DFA216_accept;
         this.special = Cql_Parser.DFA216_special;
         this.transition = Cql_Parser.DFA216_transition;
      }

      public String getDescription() {
         return "1627:1: normalColumnOperation[List<Pair<ColumnMetadata.Raw, Operation.RawUpdate>> operations, ColumnMetadata.Raw key] : (t= term ( '+' c= cident )? |c= cident sig= ( '+' | '-' ) t= term |c= cident i= INTEGER );";
      }
   }

   protected class DFA213 extends DFA {
      public DFA213(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 213;
         this.eot = Cql_Parser.DFA213_eot;
         this.eof = Cql_Parser.DFA213_eof;
         this.min = Cql_Parser.DFA213_min;
         this.max = Cql_Parser.DFA213_max;
         this.accept = Cql_Parser.DFA213_accept;
         this.special = Cql_Parser.DFA213_special;
         this.transition = Cql_Parser.DFA213_transition;
      }

      public String getDescription() {
         return "1610:1: simpleTerm returns [Term.Raw term] : (v= value |f= function | '(' c= comparatorType ')' t= simpleTerm );";
      }
   }

   protected class DFA210 extends DFA {
      public DFA210(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 210;
         this.eot = Cql_Parser.DFA210_eot;
         this.eof = Cql_Parser.DFA210_eof;
         this.min = Cql_Parser.DFA210_min;
         this.max = Cql_Parser.DFA210_max;
         this.accept = Cql_Parser.DFA210_accept;
         this.special = Cql_Parser.DFA210_special;
         this.transition = Cql_Parser.DFA210_transition;
      }

      public String getDescription() {
         return "()* loopback of 1592:9: ( '+' r= termMultiplication | '-' r= termMultiplication )*";
      }
   }

   protected class DFA208 extends DFA {
      public DFA208(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 208;
         this.eot = Cql_Parser.DFA208_eot;
         this.eof = Cql_Parser.DFA208_eof;
         this.min = Cql_Parser.DFA208_min;
         this.max = Cql_Parser.DFA208_max;
         this.accept = Cql_Parser.DFA208_accept;
         this.special = Cql_Parser.DFA208_special;
         this.transition = Cql_Parser.DFA208_transition;
      }

      public String getDescription() {
         return "1576:1: function returns [Term.Raw t] : (f= functionName '(' ')' |f= functionName '(' args= functionArgs ')' );";
      }
   }

   protected class DFA206 extends DFA {
      public DFA206(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 206;
         this.eot = Cql_Parser.DFA206_eot;
         this.eof = Cql_Parser.DFA206_eof;
         this.min = Cql_Parser.DFA206_min;
         this.max = Cql_Parser.DFA206_max;
         this.accept = Cql_Parser.DFA206_accept;
         this.special = Cql_Parser.DFA206_special;
         this.transition = Cql_Parser.DFA206_transition;
      }

      public String getDescription() {
         return "1565:7: (ks= keyspaceName '.' )?";
      }
   }

   protected class DFA204 extends DFA {
      public DFA204(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 204;
         this.eot = Cql_Parser.DFA204_eot;
         this.eof = Cql_Parser.DFA204_eof;
         this.min = Cql_Parser.DFA204_min;
         this.max = Cql_Parser.DFA204_max;
         this.accept = Cql_Parser.DFA204_accept;
         this.special = Cql_Parser.DFA204_special;
         this.transition = Cql_Parser.DFA204_transition;
      }

      public String getDescription() {
         return "1546:1: value returns [Term.Raw value] : (c= constant |l= collectionLiteral |u= usertypeLiteral |t= tupleLiteral | K_NULL | ':' id= noncol_ident | QMARK );";
      }
   }

   protected class DFA186 extends DFA {
      public DFA186(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 186;
         this.eot = Cql_Parser.DFA186_eot;
         this.eof = Cql_Parser.DFA186_eof;
         this.min = Cql_Parser.DFA186_min;
         this.max = Cql_Parser.DFA186_max;
         this.accept = Cql_Parser.DFA186_accept;
         this.special = Cql_Parser.DFA186_special;
         this.transition = Cql_Parser.DFA186_transition;
      }

      public String getDescription() {
         return "1441:7: ( ksName[name] '.' )?";
      }
   }

   protected class DFA185 extends DFA {
      public DFA185(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 185;
         this.eot = Cql_Parser.DFA185_eot;
         this.eof = Cql_Parser.DFA185_eof;
         this.min = Cql_Parser.DFA185_min;
         this.max = Cql_Parser.DFA185_max;
         this.accept = Cql_Parser.DFA185_accept;
         this.special = Cql_Parser.DFA185_special;
         this.transition = Cql_Parser.DFA185_transition;
      }

      public String getDescription() {
         return "1436:7: ( ksName[name] '.' )?";
      }
   }

   protected class DFA61 extends DFA {
      public DFA61(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 61;
         this.eot = Cql_Parser.DFA61_eot;
         this.eof = Cql_Parser.DFA61_eof;
         this.min = Cql_Parser.DFA61_min;
         this.max = Cql_Parser.DFA61_max;
         this.accept = Cql_Parser.DFA61_accept;
         this.special = Cql_Parser.DFA61_special;
         this.transition = Cql_Parser.DFA61_transition;
      }

      public String getDescription() {
         return "606:1: deleteOp returns [Operation.RawDeletion op] : (c= cident |c= cident '[' t= term ']' |c= cident '.' field= fident );";
      }
   }

   protected class DFA31 extends DFA {
      public DFA31(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 31;
         this.eot = Cql_Parser.DFA31_eot;
         this.eof = Cql_Parser.DFA31_eof;
         this.min = Cql_Parser.DFA31_min;
         this.max = Cql_Parser.DFA31_max;
         this.accept = Cql_Parser.DFA31_accept;
         this.special = Cql_Parser.DFA31_special;
         this.transition = Cql_Parser.DFA31_transition;
      }

      public String getDescription() {
         return "424:1: selectionFunction returns [Selectable.Raw s] : ( K_COUNT '(' '\\*' ')' | K_WRITETIME '(' c= cident ')' | K_TTL '(' c= cident ')' | K_CAST '(' sn= unaliasedSelector K_AS t= native_type ')' |f= functionName args= selectionFunctionArgs );";
      }
   }

   protected class DFA30 extends DFA {
      public DFA30(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 30;
         this.eot = Cql_Parser.DFA30_eot;
         this.eof = Cql_Parser.DFA30_eof;
         this.min = Cql_Parser.DFA30_min;
         this.max = Cql_Parser.DFA30_max;
         this.accept = Cql_Parser.DFA30_accept;
         this.special = Cql_Parser.DFA30_special;
         this.transition = Cql_Parser.DFA30_transition;
      }

      public String getDescription() {
         return "418:1: simpleUnaliasedSelector returns [Selectable.Raw s] : (c= sident |l= selectionLiteral |f= selectionFunction );";
      }
   }

   protected class DFA22 extends DFA {
      public DFA22(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 22;
         this.eot = Cql_Parser.DFA22_eot;
         this.eof = Cql_Parser.DFA22_eof;
         this.min = Cql_Parser.DFA22_min;
         this.max = Cql_Parser.DFA22_max;
         this.accept = Cql_Parser.DFA22_accept;
         this.special = Cql_Parser.DFA22_special;
         this.transition = Cql_Parser.DFA22_transition;
      }

      public String getDescription() {
         return "370:1: selectionGroupWithoutField returns [Selectable.Raw s] : (sn= simpleUnaliasedSelector | ( selectionTypeHint )=>h= selectionTypeHint |t= selectionTupleOrNestedSelector |l= selectionList |m= selectionMapOrSet );";
      }

      public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
         TokenStream input = (TokenStream)_input;
         switch(s) {
         case 0:
            int LA22_45 = input.LA(1);
            int index22_45 = input.index();
            input.rewind();
            int sx = true;
            if(Cql_Parser.this.synpred4_Parser()) {
               s = 48;
            } else {
               s = 49;
            }

            input.seek(index22_45);
            if(s >= 0) {
               return s;
            }
         default:
            if(Cql_Parser.this.state.backtracking > 0) {
               Cql_Parser.this.state.failed = true;
               return -1;
            } else {
               NoViableAltException nvae = new NoViableAltException(this.getDescription(), 22, s, input);
               this.error(nvae);
               throw nvae;
            }
         }
      }
   }

   protected class DFA17 extends DFA {
      public DFA17(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 17;
         this.eot = Cql_Parser.DFA17_eot;
         this.eof = Cql_Parser.DFA17_eof;
         this.min = Cql_Parser.DFA17_min;
         this.max = Cql_Parser.DFA17_max;
         this.accept = Cql_Parser.DFA17_accept;
         this.special = Cql_Parser.DFA17_special;
         this.transition = Cql_Parser.DFA17_transition;
      }

      public String getDescription() {
         return "339:1: selectionGroup returns [Selectable.Raw s] : ( ( selectionGroupWithField )=>f= selectionGroupWithField |g= selectionGroupWithoutField | '-' g= selectionGroup );";
      }

      public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
         TokenStream input = (TokenStream)_input;
         boolean sx;
         switch(s) {
         case 0:
            int LA17_1 = input.LA(1);
            int index17_1 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_1);
            if(s >= 0) {
               return s;
            }
            break;
         case 1:
            int LA17_2 = input.LA(1);
            int index17_2 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_2);
            if(s >= 0) {
               return s;
            }
            break;
         case 2:
            int LA17_3 = input.LA(1);
            int index17_3 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_3);
            if(s >= 0) {
               return s;
            }
            break;
         case 3:
            int LA17_4 = input.LA(1);
            int index17_4 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_4);
            if(s >= 0) {
               return s;
            }
            break;
         case 4:
            int LA17_5 = input.LA(1);
            int index17_5 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_5);
            if(s >= 0) {
               return s;
            }
            break;
         case 5:
            int LA17_6 = input.LA(1);
            int index17_6 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_6);
            if(s >= 0) {
               return s;
            }
            break;
         case 6:
            int LA17_7 = input.LA(1);
            int index17_7 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_7);
            if(s >= 0) {
               return s;
            }
            break;
         case 7:
            int LA17_8 = input.LA(1);
            int index17_8 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_8);
            if(s >= 0) {
               return s;
            }
            break;
         case 8:
            int LA17_9 = input.LA(1);
            int index17_9 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_9);
            if(s >= 0) {
               return s;
            }
            break;
         case 9:
            int LA17_10 = input.LA(1);
            int index17_10 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_10);
            if(s >= 0) {
               return s;
            }
            break;
         case 10:
            int LA17_11 = input.LA(1);
            int index17_11 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_11);
            if(s >= 0) {
               return s;
            }
            break;
         case 11:
            int LA17_12 = input.LA(1);
            int index17_12 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_12);
            if(s >= 0) {
               return s;
            }
            break;
         case 12:
            int LA17_13 = input.LA(1);
            int index17_13 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_13);
            if(s >= 0) {
               return s;
            }
            break;
         case 13:
            int LA17_14 = input.LA(1);
            int index17_14 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_14);
            if(s >= 0) {
               return s;
            }
            break;
         case 14:
            int LA17_15 = input.LA(1);
            int index17_15 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_15);
            if(s >= 0) {
               return s;
            }
            break;
         case 15:
            int LA17_16 = input.LA(1);
            int index17_16 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_16);
            if(s >= 0) {
               return s;
            }
            break;
         case 16:
            int LA17_17 = input.LA(1);
            int index17_17 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_17);
            if(s >= 0) {
               return s;
            }
            break;
         case 17:
            int LA17_18 = input.LA(1);
            int index17_18 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_18);
            if(s >= 0) {
               return s;
            }
            break;
         case 18:
            int LA17_19 = input.LA(1);
            int index17_19 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_19);
            if(s >= 0) {
               return s;
            }
            break;
         case 19:
            int LA17_20 = input.LA(1);
            int index17_20 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_20);
            if(s >= 0) {
               return s;
            }
            break;
         case 20:
            int LA17_21 = input.LA(1);
            int index17_21 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_21);
            if(s >= 0) {
               return s;
            }
            break;
         case 21:
            int LA17_22 = input.LA(1);
            int index17_22 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_22);
            if(s >= 0) {
               return s;
            }
            break;
         case 22:
            int LA17_23 = input.LA(1);
            int index17_23 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_23);
            if(s >= 0) {
               return s;
            }
            break;
         case 23:
            int LA17_24 = input.LA(1);
            int index17_24 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_24);
            if(s >= 0) {
               return s;
            }
            break;
         case 24:
            int LA17_25 = input.LA(1);
            int index17_25 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_25);
            if(s >= 0) {
               return s;
            }
            break;
         case 25:
            int LA17_26 = input.LA(1);
            int index17_26 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_26);
            if(s >= 0) {
               return s;
            }
            break;
         case 26:
            int LA17_27 = input.LA(1);
            int index17_27 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_27);
            if(s >= 0) {
               return s;
            }
            break;
         case 27:
            int LA17_28 = input.LA(1);
            int index17_28 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_28);
            if(s >= 0) {
               return s;
            }
            break;
         case 28:
            int LA17_29 = input.LA(1);
            int index17_29 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_29);
            if(s >= 0) {
               return s;
            }
            break;
         case 29:
            int LA17_30 = input.LA(1);
            int index17_30 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_30);
            if(s >= 0) {
               return s;
            }
            break;
         case 30:
            int LA17_31 = input.LA(1);
            int index17_31 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_31);
            if(s >= 0) {
               return s;
            }
            break;
         case 31:
            int LA17_32 = input.LA(1);
            int index17_32 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_32);
            if(s >= 0) {
               return s;
            }
            break;
         case 32:
            int LA17_33 = input.LA(1);
            int index17_33 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_33);
            if(s >= 0) {
               return s;
            }
            break;
         case 33:
            int LA17_34 = input.LA(1);
            int index17_34 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_34);
            if(s >= 0) {
               return s;
            }
            break;
         case 34:
            int LA17_35 = input.LA(1);
            int index17_35 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_35);
            if(s >= 0) {
               return s;
            }
            break;
         case 35:
            int LA17_36 = input.LA(1);
            int index17_36 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_36);
            if(s >= 0) {
               return s;
            }
            break;
         case 36:
            int LA17_37 = input.LA(1);
            int index17_37 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_37);
            if(s >= 0) {
               return s;
            }
            break;
         case 37:
            int LA17_38 = input.LA(1);
            int index17_38 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_38);
            if(s >= 0) {
               return s;
            }
            break;
         case 38:
            int LA17_39 = input.LA(1);
            int index17_39 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_39);
            if(s >= 0) {
               return s;
            }
            break;
         case 39:
            int LA17_40 = input.LA(1);
            int index17_40 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_40);
            if(s >= 0) {
               return s;
            }
            break;
         case 40:
            int LA17_41 = input.LA(1);
            int index17_41 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_41);
            if(s >= 0) {
               return s;
            }
            break;
         case 41:
            int LA17_42 = input.LA(1);
            int index17_42 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_42);
            if(s >= 0) {
               return s;
            }
            break;
         case 42:
            int LA17_43 = input.LA(1);
            int index17_43 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_43);
            if(s >= 0) {
               return s;
            }
            break;
         case 43:
            int LA17_44 = input.LA(1);
            int index17_44 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_44);
            if(s >= 0) {
               return s;
            }
            break;
         case 44:
            int LA17_45 = input.LA(1);
            int index17_45 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_45);
            if(s >= 0) {
               return s;
            }
            break;
         case 45:
            int LA17_46 = input.LA(1);
            int index17_46 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_46);
            if(s >= 0) {
               return s;
            }
            break;
         case 46:
            int LA17_47 = input.LA(1);
            int index17_47 = input.index();
            input.rewind();
            sx = true;
            if(Cql_Parser.this.synpred3_Parser()) {
               s = 49;
            } else {
               s = 50;
            }

            input.seek(index17_47);
            if(s >= 0) {
               return s;
            }
         }

         if(Cql_Parser.this.state.backtracking > 0) {
            Cql_Parser.this.state.failed = true;
            return -1;
         } else {
            NoViableAltException nvae = new NoViableAltException(this.getDescription(), 17, s, input);
            this.error(nvae);
            throw nvae;
         }
      }
   }

   protected class DFA11 extends DFA {
      public DFA11(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 11;
         this.eot = Cql_Parser.DFA11_eot;
         this.eof = Cql_Parser.DFA11_eof;
         this.min = Cql_Parser.DFA11_min;
         this.max = Cql_Parser.DFA11_max;
         this.accept = Cql_Parser.DFA11_accept;
         this.special = Cql_Parser.DFA11_special;
         this.transition = Cql_Parser.DFA11_transition;
      }

      public String getDescription() {
         return "303:1: selectClause returns [boolean isDistinct, List<RawSelector> selectors] : ( ( K_DISTINCT selectors )=> K_DISTINCT s= selectors |s= selectors );";
      }

      public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
         TokenStream input = (TokenStream)_input;
         switch(s) {
         case 0:
            int LA11_1 = input.LA(1);
            int index11_1 = input.index();
            input.rewind();
            int sx = true;
            if(Cql_Parser.this.synpred2_Parser()) {
               s = 51;
            } else {
               s = 2;
            }

            input.seek(index11_1);
            if(s >= 0) {
               return s;
            }
         default:
            if(Cql_Parser.this.state.backtracking > 0) {
               Cql_Parser.this.state.failed = true;
               return -1;
            } else {
               NoViableAltException nvae = new NoViableAltException(this.getDescription(), 11, s, input);
               this.error(nvae);
               throw nvae;
            }
         }
      }
   }

   protected class DFA2 extends DFA {
      public DFA2(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 2;
         this.eot = Cql_Parser.DFA2_eot;
         this.eof = Cql_Parser.DFA2_eof;
         this.min = Cql_Parser.DFA2_min;
         this.max = Cql_Parser.DFA2_max;
         this.accept = Cql_Parser.DFA2_accept;
         this.special = Cql_Parser.DFA2_special;
         this.transition = Cql_Parser.DFA2_transition;
      }

      public String getDescription() {
         return "284:7: ( ( K_JSON selectClause )=> K_JSON )?";
      }

      public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
         TokenStream input = (TokenStream)_input;
         switch(s) {
         case 0:
            int LA2_1 = input.LA(1);
            int index2_1 = input.index();
            input.rewind();
            int sx = true;
            if(Cql_Parser.this.synpred1_Parser()) {
               s = 52;
            } else {
               s = 2;
            }

            input.seek(index2_1);
            if(s >= 0) {
               return s;
            }
         default:
            if(Cql_Parser.this.state.backtracking > 0) {
               Cql_Parser.this.state.failed = true;
               return -1;
            } else {
               NoViableAltException nvae = new NoViableAltException(this.getDescription(), 2, s, input);
               this.error(nvae);
               throw nvae;
            }
         }
      }
   }

   protected class DFA1 extends DFA {
      public DFA1(BaseRecognizer recognizer) {
         this.recognizer = recognizer;
         this.decisionNumber = 1;
         this.eot = Cql_Parser.DFA1_eot;
         this.eof = Cql_Parser.DFA1_eof;
         this.min = Cql_Parser.DFA1_min;
         this.max = Cql_Parser.DFA1_max;
         this.accept = Cql_Parser.DFA1_accept;
         this.special = Cql_Parser.DFA1_special;
         this.transition = Cql_Parser.DFA1_transition;
      }

      public String getDescription() {
         return "214:1: cqlStatement returns [ParsedStatement stmt] : (st1= selectStatement |st2= insertStatement |st3= updateStatement |st4= batchStatement |st5= deleteStatement |st6= useStatement |st7= truncateStatement |st8= createKeyspaceStatement |st9= createTableStatement |st10= createIndexStatement |st11= dropKeyspaceStatement |st12= dropTableStatement |st13= dropIndexStatement |st14= alterTableStatement |st15= alterKeyspaceStatement |st16= grantPermissionsStatement |st17= revokePermissionsStatement |st18= listPermissionsStatement |st19= createUserStatement |st20= alterUserStatement |st21= dropUserStatement |st22= listUsersStatement |st23= createTriggerStatement |st24= dropTriggerStatement |st25= createTypeStatement |st26= alterTypeStatement |st27= dropTypeStatement |st28= createFunctionStatement |st29= dropFunctionStatement |st30= createAggregateStatement |st31= dropAggregateStatement |st32= createRoleStatement |st33= alterRoleStatement |st34= dropRoleStatement |st35= listRolesStatement |st36= grantRoleStatement |st37= revokeRoleStatement |st38= createMaterializedViewStatement |st39= dropMaterializedViewStatement |st40= alterMaterializedViewStatement |st41= restrictPermissionsStatement |st42= unrestrictPermissionsStatement );";
      }
   }

   public static class mbean_return extends ParserRuleReturnScope {
      public mbean_return() {
      }
   }

   public static class username_return extends ParserRuleReturnScope {
      public username_return() {
      }
   }

   public static class corePermissionName_return extends ParserRuleReturnScope {
      public corePermissionName_return() {
      }
   }

   public static class permissionName_return extends ParserRuleReturnScope {
      public permissionName_return() {
      }
   }

   public static class permissionDomain_return extends ParserRuleReturnScope {
      public permissionDomain_return() {
      }
   }

   public static class selectClause_return extends ParserRuleReturnScope {
      public boolean isDistinct;
      public List<RawSelector> selectors;

      public selectClause_return() {
      }
   }
}
